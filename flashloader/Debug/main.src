; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",558
.DEFINE "fs_type"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pdrv"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fats"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "wflag"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fsi_flag"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "id"
.VALUE 5
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "n_rootdir"
.VALUE 7
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "csize"
.VALUE 9
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "lfnbuf"
.VALUE 11
.CLASS 8
.TYPE 45
.ENDEF
.DEFINE "cdir"
.VALUE 14
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "n_fatent"
.VALUE 18
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fsize"
.VALUE 22
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "volbase"
.VALUE 26
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fatbase"
.VALUE 30
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dirbase"
.VALUE 34
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "database"
.VALUE 38
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "winsect"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "win"
.VALUE 46
.CLASS 8
.DIM 512
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 40
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",29
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",46
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "dptr"
.VALUE 15
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 19
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 23
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir"
.VALUE 27
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "fn"
.VALUE 30
.CLASS 8
.DIM 12
.TYPE 108
.ENDEF
.DEFINE "blk_ofs"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",278
.DEFINE "fsize"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fdate"
.VALUE 4
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "ftime"
.VALUE 6
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "fattrib"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "altname"
.VALUE 9
.CLASS 8
.DIM 13
.TYPE 98
.ENDEF
.DEFINE "fname"
.VALUE 22
.CLASS 8
.DIM 256
.TYPE 98
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",12
.DEFINE "fmt"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fat"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "align"
.VALUE 2
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "n_root"
.VALUE 5
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "au_size"
.VALUE 8
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME5"
	SEGMENT BSS
_fs:
	DS	558
.DEFINE "fs"
.ALIAS "_fs"
.CLASS 83
.VALUE _fs
.TAG "NONAME0"
.TYPE 8
.ENDEF
;    1	#include <ez80.h>
;    2	#include "src_fatfs\ff.h"
;    3	#include "spi.h"
;    4	#include "defines.h"
;    5	#include <stdint.h>
;    6	#include "agontimer.h"
;    7	#include "protocol.h"
;    8	
;    9	#define PAGESIZE	1024
;   10	#define FLASHPAGES	128
;   11	#define FLASHSTART	0x0
;   12	#define BAUDRATE	500000
;   13	
;   14	#define MOSFILENAME	"MOS.bin"
;   15	#define LOADADDRESS	0x50000
;   16	
;   17	extern void init_UART0(void);
;   18	
;   19	extern void enableFlashKeyRegister(void);
;   20	extern void lockFlashKeyRegister(void);
;   21	extern void fastmemcpy(UINT24 destination, UINT24 source, UINT24 size);
;   22	extern void reset(void);
;   23	
;   24	FATFS 	fs;
	SEGMENT CODE
;   25	
;   26	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",26,"_main"

.LINE 26

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "counter"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

.DEFINE "addressto"

.CLASS 65

.VALUE -6

.TYPE 14

.ENDEF

.DEFINE "addressfrom"

.CLASS 65

.VALUE -9

.TYPE 14

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE -10

.TYPE 12

.ENDEF

.DEFINE "pagemax"

.CLASS 65

.VALUE -13

.TYPE 14

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -19

.TYPE 14

.ENDEF

.DEFINE "lastpagebytes"

.CLASS 65

.VALUE -22

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFEA
	LD	SP,HL
;   27		FRESULT	fr;
;   28		FIL	   	fil;
;   29		UINT24  br;	
;   30		void * 	dest;
;   31		UINT24 size;
;   32		
;   33		UINT24	counter,pagemax, lastpagebytes;
;   34		UINT24 addressto,addressfrom;
;   35		UINT8	value;
;   36		UINT24 timer;
;   37		init_spi();
.LINE 37

	CALL	_init_spi
;   38		init_UART0();
.LINE 38

	CALL	_init_UART0
;   39	
;   40		/*
;   41		while(1) {
;   42			putch('A');
;   43			delayms(500);
;   44			putch('X');
;   45			delayms(500);
;   46		}
;   47		*/
;   48		while(1) {
L_1:
.LINE 48

;   49			sendStatus('S', 1, 0xAABBCCDD);
.LINE 49

	LD	BC,170
	PUSH	BC
	LD	BC,12307677
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,83
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   50			getch();
.LINE 50

	CALL	_getch
;   51			//delayms(500);
;   52			sendStatus('E', 1, 0);
.LINE 52

	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,69
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   53			getch();
.LINE 53

	CALL	_getch
	JR	L_1
;   54			//delayms(500);
;   55		}
;   56	
;   57		f_mount(&fs, "", 1);
;   58	
;   59		addressto = FLASHSTART;
;   60		addressfrom = LOADADDRESS;
;   61	
;   62		fr = f_open(&fil, MOSFILENAME, FA_READ);
;   63		if(fr == FR_OK) {
;   64	
;   65			di();
;   66			size = f_size(&fil);
;   67			//waitZDI(FEEDBACK_OPEN, size);
;   68	
;   69			fr = f_read(&fil, (void *)LOADADDRESS, size, &br);
;   70	
;   71			f_close(&fil);
;   72			//waitZDI(FEEDBACK_FILEDONE, br);
;   73			
;   74			// Wait for user to acknowledge proceed (remote ZDI)
;   75			//waitZDI(FEEDBACK_PROCEED, 0);
;   76			
;   77			// Unprotect and erase flash
;   78			enableFlashKeyRegister();	// unlock Flash Key Register, so we can write to the Flash Write/Erase protection registers
;   79			FLASH_PROT = 0;				// disable protection on all 8x16KB blocks in the flash
;   80			enableFlashKeyRegister();	// will need to unlock again after previous write to the flash protection register
;   81			FLASH_FDIV = 0x5F;			// Ceiling(18Mhz * 5,1us) = 95, or 0x5F
;   82	
;   83			// Erase all flash pages
;   84			for(counter = 0; counter < FLASHPAGES; counter++)
L_6:
.LINE 84

;   85			{
;   86				FLASH_PAGE = counter;
.LINE 86

	LD	A,(IX+%FFFFFFFD)
	OUT0	(252),A
;   87				FLASH_PGCTL = 0x02;			// Page erase bit enable, start erase
.LINE 87

	LD	A,%2
	OUT0	(255),A
;   88	
;   89				do
L_4:
.LINE 89

;   90				{
;   91					value = FLASH_PGCTL;
.LINE 91

	IN0	A,(255)
	LD	(IX+%FFFFFFF6),A
;   92				}
;   93				while(value & 0x02);// wait for completion of erase			
.LINE 93

	AND	A,%2
	JR	NZ,L_4
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
	LD	BC,128
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_6
;   94			}
;   95			
;   96			// determine number of pages to write
;   97			pagemax = size/PAGESIZE;
;   98			if(size%PAGESIZE) // last page has less than PAGESIZE bytes
.LINE 98

	LD	BC,1023
	LD	HL,(IX+%FFFFFFED)
	CALL	__iand
	LD	(IX+%FFFFFFF0),HL
	CALL	__icmpzero
;   99			{
;  100				pagemax += 1;
;  101				lastpagebytes = size%PAGESIZE;			
;  102			}
;  103			else lastpagebytes = PAGESIZE; // normal last page
.LINE 103

;  104	
;  105			//waitZDI(FEEDBACK_ERASEDONE, pagemax);
;  106	
;  107			// write out each page to flash
;  108			for(counter = 0; counter < pagemax; counter++)
.LINE 108

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_18
L_16:
;  109			{
;  110				if(counter == (pagemax - 1)) // last page to write - might need to write less than PAGESIZE
.LINE 110

	LD	IY,(IX+%FFFFFFF3)
	LEA	HL,IY+%FFFFFFFF
	LD	BC,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_14
;  111					fastmemcpy(addressto,addressfrom,lastpagebytes);				
.LINE 111

	LD	BC,(IX+%FFFFFFEA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF7)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
;  112				else 
.LINE 112

	JR	L_15
L_14:
;  113					fastmemcpy(addressto,addressfrom,PAGESIZE);
.LINE 113

	LD	BC,1024
	PUSH	BC
	LD	BC,(IX+%FFFFFFF7)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
L_15:
;  114			
;  115				addressto += PAGESIZE;
.LINE 115

	LD	BC,1024
	LD	HL,(IX+%FFFFFFFA)
	ADD	HL,BC
	LD	(IX+%FFFFFFFA),HL
;  116				addressfrom += PAGESIZE;
.LINE 116

	LD	HL,(IX+%FFFFFFF7)
	ADD	HL,BC
	LD	(IX+%FFFFFFF7),HL
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  117				//timer = 0;
;  118				//while(timer++ < 32768);
;  119				////waitZDI(FEEDBACK_PAGEWRITTEN, counter);
;  120			}
L_18:
.LINE 120

	LD	BC,(IX+%FFFFFFF3)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_16
;  121			lockFlashKeyRegister();	// lock the flash before WARM reset
.LINE 121

	CALL	_lockFlashKeyRegister
;  122			//waitZDI(FEEDBACK_PAGEWRITTEN, counter);
;  123		}
;  124		else //waitZDI(FEEDBACK_OPEN, 0);
.LINE 124

	JR	L_25
;  125		while(1);
L_22:
.LINE 125

	JR	L_22
L_25:
;  126		return 0;
.LINE 126

	OR	A,A
	SBC	HL,HL
;  127	}
.LINE 127

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_lockFlashKeyRegister               IMPORT  -----   function
;_fastmemcpy                         IMPORT  -----   function
;_getch                              IMPORT  -----   function
;_sendStatus                         IMPORT  -----   function
;_init_UART0                         IMPORT  -----   function
;_init_spi                           IMPORT  -----   function
;lastpagebytes                        IX-22      3   variable
;size                                 IX-19      3   variable
;G_0                                  IX-16      3   variable
;pagemax                              IX-13      3   variable
;value                                IX-10      1   variable
;addressfrom                           IX-9      3   variable
;addressto                             IX-6      3   variable
;counter                               IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 34 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",127,"_main"
	XREF _fastmemcpy:ROM
	XREF _lockFlashKeyRegister:ROM
	XREF _init_UART0:ROM
	XREF _getch:ROM
	XREF _sendStatus:ROM
	XREF _init_spi:ROM
	XREF __iand:ROM
	XREF __icmpzero:ROM
	XDEF _main
	XDEF _fs
	END
