Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED21-Oct-23     13:35:29     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Title:	Initialisation Code for flashloader
                           A     2    ; Author:	Jeroen Venema
                           A     3    
       00060000            A     4    RETURNCODE:					EQU 60000h
       00060001            A     5    RETURNVALUE:				EQU	60001h
                           A     6    
                           A     7    ; Memory parameters from compiled MOS
       000A0000            A     8    __STACKINIT:				EQU A0000h
       00000004            A     9    __CS0_LBR_INIT_PARAM:		EQU 04h
       0000000B            A    10    __CS0_UBR_INIT_PARAM:		EQU 0bh
       00000008            A    11    __CS0_CTL_INIT_PARAM:		EQU 08h
       00000001            A    12    __CS0_BMC_INIT_PARAM:		EQU 01h
       000000C0            A    13    __CS1_LBR_INIT_PARAM:		EQU c0h
       000000C7            A    14    __CS1_UBR_INIT_PARAM:		EQU c7h
       00000008            A    15    __CS1_CTL_INIT_PARAM:		EQU 08h
       00000000            A    16    __CS1_BMC_INIT_PARAM:		EQU 00h
       00000080            A    17    __CS2_LBR_INIT_PARAM:		EQU 80h
       000000BF            A    18    __CS2_UBR_INIT_PARAM:		EQU bfh
       00000008            A    19    __CS2_CTL_INIT_PARAM:		EQU 08h
       00000000            A    20    __CS2_BMC_INIT_PARAM:		EQU 00h
       00000003            A    21    __CS3_LBR_INIT_PARAM:		EQU 03h
       00000003            A    22    __CS3_UBR_INIT_PARAM:		EQU 03h
       00000018            A    23    __CS3_CTL_INIT_PARAM:		EQU 18h
       00000082            A    24    __CS3_BMC_INIT_PARAM:		EQU 82h
       00000080            A    25    __RAM_CTL_INIT_PARAM:		EQU 80h
       000000B7            A    26    __RAM_ADDR_U_INIT_PARAM:	EQU B7h
       00000028            A    27    __FLASH_CTL_INIT_PARAM:		EQU 28h
       00000000            A    28    __FLASH_ADDR_U_INIT_PARAM:	EQU 00h
                           A    29    
                           B     0    			INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	19/03/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 24/07/2022:	Added TMR2_CTL
                           B     9    ; 03/08/2022:	Added UART0_BUFFERLEN
                           B    10    ; 20/08/2022:	Added some VDP protocol flags
                           B    11    ; 18/09/2022:	Added VDPP_FLAG_MODE
                           B    12    ; 09/03/2023:	Renamed TMR2_CTL to TMR0_CTL
                           B    13    ; 15/03/2023:	Added VDPP_FLAG_RTC
                           B    14    ; 19/03/2023:	Fixed TMR0_RR_H to point to cor
                           B    15    
                           B    16    ; MOS specific
                           B    17    ;
       00000010            B    18    VDPP_BUFFERLEN:		EQU		16	; VDP Protocol 
                           B    19    	
       00000001            B    20    VDPP_FLAG_CURSOR:	EQU		00000001b
       00000002            B    21    VDPP_FLAG_SCRCHAR:	EQU		00000010b
       00000004            B    22    VDPP_FLAG_POINT:	EQU		00000100b
       00000008            B    23    VDPP_FLAG_AUDIO:	EQU		00001000b	
       00000010            B    24    VDPP_FLAG_MODE:		EQU		00010000b
       00000020            B    25    VDPP_FLAG_RTC:		EQU		00100000b
                           B    26    
                           B    27    ; For GPIO
                           B    28    ; PA not available on eZ80F92
                           B    29    ;
       00000096            B    30    PA_DR:			EQU		96h
       00000097            B    31    PA_DDR:			EQU		97h
       00000098            B    32    PA_ALT1:		EQU		98h
       00000099            B    33    PA_ALT2:		EQU		99h
       0000009A            B    34    PB_DR:          	EQU		9Ah
       0000009B            B    35    PB_DDR:        	 	EQU		9Bh
       0000009C            B    36    PB_ALT1:        	EQU		9Ch
       0000009D            B    37    PB_ALT2:        	EQU		9Dh
       0000009E            B    38    PC_DR:          	EQU		9Eh
       0000009F            B    39    PC_DDR:         	EQU		9Fh
       000000A0            B    40    PC_ALT1:        	EQU		A0h
       000000A1            B    41    PC_ALT2:        	EQU		A1h
       000000A2            B    42    PD_DR:          	EQU		A2h
       000000A3            B    43    PD_DDR:			EQU		A3h
       000000A4            B    44    PD_ALT1:		EQU		A4h
       000000A5            B    45    PD_ALT2:		EQU		A5h
                           B    46    	
       00000000            B    47    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    48    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    49    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    50    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    51    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    52    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    53    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    54    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    55    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    56    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    57    	
                           B    58    ; For interrupts.asm
                           B    59    ;
                           B    60    
                           B    61    ;UARTs
                           B    62    ;
       00000018            B    63    UART0_IVECT		EQU	18h
       0000001A            B    64    UART1_IVECT		EQU	1Ah
                           B    65    
                           B    66    ;Ports
                           B    67    ;
       00000030            B    68    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    69    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    70    PB2_IVECT  	  	EQU   	34h
       00000036            B    71    PB3_IVECT  	  	EQU   	36h
       00000038            B    72    PB4_IVECT    		EQU   	38h
       0000003A            B    73    PB5_IVECT    		EQU   	3Ah
       0000003C            B    74    PB6_IVECT    		EQU   	3Ch
       0000003E            B    75    PB7_IVECT    		EQU   	3Eh
                           B    76                           
       00000040            B    77    PC0_IVECT    		EQU   	40h
       00000042            B    78    PC1_IVECT    		EQU   	42h
       00000044            B    79    PC2_IVECT    		EQU   	44h
       00000046            B    80    PC3_IVECT    		EQU   	46h
       00000048            B    81    PC4_IVECT    		EQU   	48h
       0000004A            B    82    PC5_IVECT    		EQU   	4Ah
       0000004C            B    83    PC6_IVECT    		EQU   	4Ch
       0000004E            B    84    PC7_IVECT    		EQU   	4Eh
                           B    85                           
       00000050            B    86    PD0_IVECT    		EQU   	50h
       00000052            B    87    PD1_IVECT    		EQU   	52h
       00000054            B    88    PD2_IVECT    		EQU   	54h
       00000056            B    89    PD3_IVECT    		EQU   	56h
       00000058            B    90    PD4_IVECT    		EQU   	58h
       0000005A            B    91    PD5_IVECT    		EQU   	5Ah
       0000005C            B    92    PD6_IVECT    		EQU   	5Ch
       0000005E            B    93    PD7_IVECT    		EQU   	5Eh
                           B    94    
                           B    95    ; For vectors16.asm
                           B    96    ;
       00000080            B    97    TMR0_CTL		EQU	80h
       00000081            B    98    TMR0_DR_L               EQU     81h
       00000081            B    99    TMR0_RR_L               EQU     81h
       00000082            B   100    TMR0_DR_H               EQU     82h
       00000082            B   101    TMR0_RR_H               EQU     82h
                           B     0    			INCLUDE "ez80f92.inc"
                           B     1    ;**********************************************
                           B     2    ;*    eZ80F92.inc
                           B     3    ;*
                           B     4    ;*		eZ80F92 Registers
                           B     5    ;*
                           B     6    ;**********************************************
                           B     7    ;* Start eZ80F92 Include file
                           B     8    
                           B     9    ;* TIMER registers
                           B    10    
                           B    11    TMR0_CTL:	.equ  %80
                           B    12    TMR0_DR_L:	.equ  %81
                           B    13    TMR0_RR_L:	.equ  %81
                           B    14    TMR0_DR_H:	.equ  %82
                           B    15    TMR0_RR_H:	.equ  %82
       00000083            B    16    TMR1_CTL:	.equ  %83
       00000084            B    17    TMR1_DR_L:	.equ  %84
       00000084            B    18    TMR1_RR_L:	.equ  %84
       00000085            B    19    TMR1_DR_H:	.equ  %85
       00000085            B    20    TMR1_RR_H:	.equ  %85
       00000086            B    21    TMR2_CTL:	.equ  %86
       00000087            B    22    TMR2_DR_L:	.equ  %87
       00000087            B    23    TMR2_RR_L:	.equ  %87
       00000088            B    24    TMR2_DR_H:	.equ  %88
       00000088            B    25    TMR2_RR_H:	.equ  %88
       00000089            B    26    TMR3_CTL:	.equ  %89
       0000008A            B    27    TMR3_DR_L:	.equ  %8a
       0000008A            B    28    TMR3_RR_L:	.equ  %8a
       0000008B            B    29    TMR3_DR_H:	.equ  %8b
       0000008B            B    30    TMR3_RR_H:	.equ  %8b
       0000008C            B    31    TMR4_CTL:	.equ  %8c
       0000008D            B    32    TMR4_DR_L:	.equ  %8d
       0000008D            B    33    TMR4_RR_L:	.equ  %8d
       0000008E            B    34    TMR4_DR_H:	.equ  %8e
       0000008E            B    35    TMR4_RR_H:	.equ  %8e
       0000008F            B    36    TMR5_CTL:	.equ  %8f
       00000090            B    37    TMR5_DR_L:	.equ  %90
       00000090            B    38    TMR5_RR_L:	.equ  %90
       00000091            B    39    TMR5_DR_H:	.equ  %91
       00000091            B    40    TMR5_RR_H:	.equ  %91
       00000092            B    41    TMR_ISS:	.equ  %92
                           B    42    
                           B    43    ;* WDT Registers
                           B    44    
       00000093            B    45    WDT_CTL:	.equ %93
       00000094            B    46    WDT_RR:	.equ  %94
                           B    47    
                           B    48    
                           B    49    ;* PORT Registers
                           B    50    
                           B    51    PB_DR:		.equ %9A
                           B    52    PB_DDR:		.equ %9B
                           B    53    PB_ALT1:	.equ %9C
                           B    54    PB_ALT2:	.equ %9D
                           B    55    PC_DR:		.equ %9E
                           B    56    PC_DDR:		.equ %9F
                           B    57    PC_ALT1:	.equ %A0
                           B    58    PC_ALT2:	.equ %A1
                           B    59    PD_DR:		.equ %A2
                           B    60    PD_DDR:		.equ %A3
                           B    61    PD_ALT1:	.equ %A4
                           B    62    PD_ALT2:	.equ %A5
                           B    63    
                           B    64    ;* Chip Select
       000000A8            B    65    CS0_LBR:	.equ %A8
       000000A9            B    66    CS0_UBR:	.equ %A9
       000000AA            B    67    CS0_CTL:	.equ %AA
       000000AB            B    68    CS1_LBR:	.equ %AB
       000000AC            B    69    CS1_UBR:	.equ %AC
       000000AD            B    70    CS1_CTL:	.equ %AD
       000000AE            B    71    CS2_LBR:	.equ %AE
       000000AF            B    72    CS2_UBR:	.equ %AF
       000000B0            B    73    CS2_CTL:	.equ %B0
       000000B1            B    74    CS3_LBR:	.equ %B1
       000000B2            B    75    CS3_UBR:	.equ %B2
       000000B3            B    76    CS3_CTL:	.equ %B3
                           B    77    
                           B    78    ;* RAMCTL Registers
       000000B4            B    79    RAM_CTL0:	.equ %B4
       000000B4            B    80    RAM_CTL:	.equ %B4
       000000B5            B    81    RAM_ADDR_U:	.equ %B5
                           B    82    
                           B    83    ;* SPI Registers
                           B    84    
       000000B8            B    85    SPI_BRG_L:	.equ %B8
       000000B9            B    86    SPI_BRG_H:	.equ %B9
       000000BA            B    87    SPI_CTL:	.equ %BA
       000000BB            B    88    SPI_SR:		.equ %BB
       000000BC            B    89    SPI_RBR:	.equ %BC
       000000BC            B    90    SPI_TSR:	.equ %BC
                           B    91    
                           B    92    ;* UART0 Registers
                           B    93    
       000000C0            B    94    UART0_RBR:	.equ  %C0
       000000C0            B    95    UART0_THR:	.equ  %C0
       000000C0            B    96    UART0_BRG_L:	.equ  %C0
       000000C1            B    97    UART0_IER:	.equ  %C1
       000000C1            B    98    UART0_BRG_H:	.equ  %C1
       000000C2            B    99    UART0_IIR:	.equ  %C2
       000000C2            B   100    UART0_FCTL:	.equ  %C2
       000000C3            B   101    UART0_LCTL:	.equ  %C3
       000000C4            B   102    UART0_MCTL:	.equ  %C4
       000000C5            B   103    UART0_LSR:	.equ  %C5
       000000C6            B   104    UART0_MSR:	.equ  %C6
       000000C7            B   105    UART0_SPR:	.equ  %C7
                           B   106    
                           B   107    ;* I2C Registers
                           B   108    
       000000C8            B   109    I2C_SAR:	.equ  %C8
       000000C9            B   110    I2C_XSAR:	.equ  %C9
       000000CA            B   111    I2C_DR:		.equ  %CA
       000000CB            B   112    I2C_CTL:	.equ  %CB
       000000CC            B   113    I2C_SR:		.equ  %CC
       000000CC            B   114    I2C_CCR:	.equ  %CC
       000000CD            B   115    I2C_SRR:	.equ  %CD
                           B   116    
                           B   117    ;* UART1 Registers
                           B   118    
       000000D0            B   119    UART1_RBR:	.equ  %D0
       000000D0            B   120    UART1_THR:	.equ  %D0
       000000D0            B   121    UART1_BRG_L:	.equ  %D0
       000000D1            B   122    UART1_IER:	.equ  %D1
       000000D1            B   123    UART1_BRG_H:	.equ  %D1
       000000D2            B   124    UART1_IIR:	.equ  %D2
       000000D2            B   125    UART1_FCTL:	.equ  %D2
       000000D3            B   126    UART1_LCTL:	.equ  %D3
       000000D4            B   127    UART1_MCTL:	.equ  %D4
       000000D5            B   128    UART1_LSR:	.equ  %D5
       000000D6            B   129    UART1_MSR:	.equ  %D6
       000000D7            B   130    UART1_SPR:	.equ  %D7
                           B   131    
                           B   132    ;* IR Registers
                           B   133    
       000000BF            B   134    IR_CTL:		.equ   %BF
                           B   135    
                           B   136    ;* CLK Registers
                           B   137    
       000000DB            B   138    CLK_PPD1:	.equ   %DB
       000000DC            B   139    CLK_PPD2:	.equ   %DC
                           B   140    
                           B   141    ;* RTC Registers
                           B   142    
       000000E0            B   143    RTC_SEC:	.equ  %E0
       000000E1            B   144    RTC_MIN:	.equ  %E1
       000000E2            B   145    RTC_HRS:	.equ  %E2
       000000E3            B   146    RTC_DOW:	.equ  %E3
       000000E4            B   147    RTC_DOM:	.equ  %E4
       000000E5            B   148    RTC_MON:	.equ  %E5
       000000E6            B   149    RTC_YR:		.equ  %E6
       000000E7            B   150    RTC_CEN:	.equ  %E7
       000000E8            B   151    RTC_ASEC:	.equ  %E8
       000000E9            B   152    RTC_AMIN:	.equ  %E9
       000000EA            B   153    RTC_AHRS:	.equ  %EA
       000000EB            B   154    RTC_ADOW:	.equ  %EB
       000000EC            B   155    RTC_ACTRL:	.equ  %EC
       000000ED            B   156    RTC_CTRL:	.equ  %ED
                           B   157    
                           B   158    ;* CSBMC Registers
                           B   159    
       000000F0            B   160    CS0_BMC:	.equ %F0
       000000F1            B   161    CS1_BMC:	.equ %F1
       000000F2            B   162    CS2_BMC:	.equ %F2
       000000F3            B   163    CS3_BMC:	.equ %F3
                           B   164    
                           B   165    ;* FLASH Registers
                           B   166    
       000000F5            B   167    FLASH_KEY:	.equ  %F5
       000000F6            B   168    FLASH_DATA:	.equ  %F6
       000000F7            B   169    FLASH_ADDR_U:	.equ  %F7
       000000F8            B   170    FLASH_CTRL:	.equ  %F8
       000000F9            B   171    FLASH_FDIV:	.equ  %F9
       000000FA            B   172    FLASH_PROT:	.equ  %FA
       000000FB            B   173    FLASH_IRQ:	.equ  %FB
       000000FC            B   174    FLASH_PAGE:	.equ  %FC
       000000FD            B   175    FLASH_ROW:	.equ  %FD
       000000FE            B   176    FLASH_COL:	.equ  %FE
       000000FF            B   177    FLASH_PGCTL:	.equ  %FF
                           B   178    
                           B   179    ;* End eZ80F92 inc file 
                           A    32    
                           A    33    			XDEF _waitZDI
                           A    34    			XDEF waitBreakpoint
                           A    35    			XDEF _wait_timer0
                           A    36    			XDEF _enableFlashKeyRegister
                           A    37    			XDEF _lockFlashKeyRegister
                           A    38    			XDEF _fastmemcpy
                           A    39    			XDEF _reset
                           A    40    
                           A    41    			XREF __low_bss
                           A    42    			XREF __len_bss			
                           A    43    			XREF _main
                           A    44    
                           A    45    			SEGMENT CODE
                           A    46    			.ASSUME	ADL = 1	
                           A    47    
                           A    48    ; Start in ADL mode
040000 C3 45 00 04         A    49    			JP	_start			; Jump to start
                           A    50    ;
                           A    51    ; The header stuff
                           A    52    ;
040004 464C4153 484C4F41   A    53    _exec_name:		DB	"FLASHLOADER.BIN", 0		
04000C 4445522E 42494E00 
                           A    54    ;
                           A    55    ; Place the waitBreakpoint routine at a fixed a
                           A    56    ; won't be affected by code changes in the futu
                           A    57    ;
                           A    58    			ALIGN	32
040020                     A    59    waitBreakpoint:
040020 B8                  A    60    			cp	a, b
040021 20 FD               A    61    			jr	nz, waitBreakpoint
040023 C9                  A    62    			ret
                           A    63    
                           A    64    			ALIGN	64			; The executabl
040040 4D4F53              A    65    			DB	"MOS"			; Flag for MOS 
040043 00                  A    66    			DB	00h			; MOS header versio
040044 01                  A    67    			DB	01h			; Flag for run mode
                           A    68    
                           A    69    ;
                           A    70    ; And the code follows on immediately after the
                           A    71    ;
040045 F3                  A    72    _start:		DI
                           A    73    ; Config SPI
040046 3E04                A    74    			LD A, %04
040048 ED39BA              A    75    			OUT0 (SPI_CTL), A        ; SPI
                           A    76    
                           A    77    ; Configure external memory
04004B 3E04                A    78    			LD A, __CS0_LBR_INIT_PARAM
04004D ED39A8              A    79    			OUT0 (CS0_LBR), A
040050 3E0B                A    80    			LD A, __CS0_UBR_INIT_PARAM
040052 ED39A9              A    81    			OUT0 (CS0_UBR), A
040055 3E01                A    82    			LD A, __CS0_BMC_INIT_PARAM
040057 ED39F0              A    83    			OUT0 (CS0_BMC), A
04005A 3E08                A    84    			LD A, __CS0_CTL_INIT_PARAM
04005C ED39AA              A    85    			OUT0 (CS0_CTL), A
                           A    86    
04005F 3EC0                A    87    			LD A, __CS1_LBR_INIT_PARAM
040061 ED39AB              A    88    			OUT0 (CS1_LBR), A
040064 3EC7                A    89    			LD A, __CS1_UBR_INIT_PARAM
040066 ED39AC              A    90    			OUT0 (CS1_UBR), A
040069 3E00                A    91    			LD A, __CS1_BMC_INIT_PARAM
04006B ED39F1              A    92    			OUT0 (CS1_BMC), A
04006E 3E08                A    93    			LD A, __CS1_CTL_INIT_PARAM
040070 ED39AD              A    94    			OUT0 (CS1_CTL), A
                           A    95    
040073 3E80                A    96    			LD A, __CS2_LBR_INIT_PARAM
040075 ED39AE              A    97    			OUT0 (CS2_LBR), A
040078 3EBF                A    98    			LD A, __CS2_UBR_INIT_PARAM
04007A ED39AF              A    99    			OUT0 (CS2_UBR), A
04007D 3E00                A   100    			LD A, __CS2_BMC_INIT_PARAM
04007F ED39F2              A   101    			OUT0 (CS2_BMC), A
040082 3E08                A   102    			LD A, __CS2_CTL_INIT_PARAM
040084 ED39B0              A   103    			OUT0 (CS2_CTL), A
                           A   104    
040087 3E03                A   105    			LD A, __CS3_LBR_INIT_PARAM
040089 ED39B1              A   106    			OUT0 (CS3_LBR), A
04008C 3E03                A   107    			LD A, __CS3_UBR_INIT_PARAM
04008E ED39B2              A   108    			OUT0 (CS3_UBR), A
040091 3E82                A   109    			LD A, __CS3_BMC_INIT_PARAM
040093 ED39F3              A   110    			OUT0 (CS3_BMC), A
040096 3E18                A   111    			LD A, __CS3_CTL_INIT_PARAM
040098 ED39B3              A   112    			OUT0 (CS3_CTL), A
                           A   113    
                           A   114    ; Enable internal memory
04009B 3E00                A   115    			LD A, __FLASH_ADDR_U_INIT_PARAM
04009D ED39F7              A   116    			OUT0 (FLASH_ADDR_U), A
0400A0 3E28                A   117    			LD A, __FLASH_CTL_INIT_PARAM
0400A2 ED39F8              A   118    			OUT0 (FLASH_CTRL), A
                           A   119    
0400A5 3EB7                A   120    			LD A, __RAM_ADDR_U_INIT_PARAM
0400A7 ED39B5              A   121    			OUT0 (RAM_ADDR_U), A
0400AA 3E80                A   122    			LD A, __RAM_CTL_INIT_PARAM
0400AC ED39B4              A   123    			OUT0 (RAM_CTL), A
                           A   124    
                           A   125    ; Setup the stack
0400AF 3100000A            A   126    			LD SP, __STACKINIT
                           A   127    
                           A   128    ; Clear BSS
0400B3 CD C4 00 04         A   129    			CALL	_clear_bss
                           A   130    
                           A   131    ; Push 0 parameters and call main
0400B7 01000000            A   132    			LD  BC, 0
0400BB C5                  A   133    			PUSH	BC			; Parameter 1: 
0400BC CD 6E 01 04         A   134    			CALL	_main			; int main(
                           A   135    
0400C0                     A   136    infinite:
0400C0 C3 C0 00 04         A   137    			JP infinite
                           A   138    			
                           A   139    ; Clear the memory
                           A   140    ;
0400C4 01 35 02 00         A   141    _clear_bss:	LD	BC, __len_bss		; Check for
0400C8 3E 00               A   142    			LD	a, __len_bss >> 16
0400CA B1                  A   143    			OR	A, C
0400CB B0                  A   144    			OR	A, B
0400CC C8                  A   145    			RET	Z			; BSS is zero-lengt
0400CD AF                  A   146    			XOR	A, A
0400CE 32 A8 44 04         A   147    			LD 	(__low_bss), A
0400D2 ED62                A   148    			SBC	HL, HL			; HL = 0
0400D4 0B                  A   149    			DEC	BC			; 1st byte's taken 
0400D5 ED42                A   150    			SBC	HL, BC
0400D7 C8                  A   151    			RET	Z		  	; Just 1 byte ...
0400D8 21 A8 44 04         A   152    			LD	HL, __low_bss		; Reset HL
0400DC 11 A9 44 04         A   153    			LD	DE, __low_bss + 1	; [DE] = bs
0400E0 EDB0                A   154    			LDIR				; Clear this se
0400E2 C9                  A   155    			RET
                           A   156    
                           A   157    ; Wait for timer0 to hit 0
0400E3                     A   158    _wait_timer0:
0400E3 F5                  A   159    			PUSH	AF 
0400E4 C5                  A   160    			PUSH	BC 
0400E5 ED3880              A   161    			IN0	A, (TMR0_CTL)	; Enable the ti
0400E8 F603                A   162    			OR	3
0400EA ED3980              A   163    			OUT0	(TMR0_CTL), A
0400ED ED0081              A   164    $$:			IN0	B, (TMR0_DR_L)	; Fetch the cou
0400F0 ED3882              A   165    			IN0 	A, (TMR0_DR_H)	; And the c
0400F3 B0                  A   166    			OR	B 
0400F4 20 F7               A   167    			JR	NZ, $B
0400F6 C1                  A   168    			POP	BC 
0400F7 F1                  A   169    			POP	AF 
0400F8 C9                  A   170    			RET
                           A   171    
0400F9                     A   172    _enableFlashKeyRegister:
0400F9 DDE5                A   173    	push	ix
0400FB DD210000 00         A   174    	ld		ix,0
040100 DD39                A   175    	add		ix,sp
                           A   176    	
040102 3EB6                A   177    	ld		a, b6h			; unlock
040104 ED39F5              A   178    	out0	(F5h), a
040107 3E49                A   179    	ld		a, 49h
040109 ED39F5              A   180    	out0	(F5h), a
                           A   181    	
04010C DDF9                A   182    	ld		sp,ix
04010E DDE1                A   183    	pop		ix
040110 C9                  A   184    	ret
                           A   185    
040111                     A   186    _lockFlashKeyRegister:
040111 DDE5                A   187    	push	ix
040113 DD210000 00         A   188    	ld		ix,0
040118 DD39                A   189    	add		ix,sp
                           A   190    	
04011A 3EFF                A   191    	ld		a, ffh			; lock
04011C ED39F5              A   192    	out0	(F5h), a
                           A   193    	
04011F DDF9                A   194    	ld		sp,ix
040121 DDE1                A   195    	pop		ix
040123 C9                  A   196    	ret
                           A   197    	
040124                     A   198    _reset:
040124 C7                  A   199    	rst 0h
040125 C9                  A   200    	ret	;will never get here
                           A   201    	
040126                     A   202    _fastmemcpy:
040126 DDE5                A   203    	push	ix
040128 DD210000 00         A   204    	ld		ix,0
04012D DD39                A   205    	add		ix,sp
                           A   206    		
04012F C5                  A   207    	push bc
040130 D5                  A   208    	push de
040131 E5                  A   209    	push hl
                           A   210    	
040132 DD1706              A   211    	ld		de, (ix+6)	; destination address
040135 DD2709              A   212    	ld		hl, (ix+9)	; source
040138 DD070C              A   213    	ld		bc, (ix+12)	; number of bytes to wr
04013B EDB0                A   214    	ldir
                           A   215    
04013D E1                  A   216    	pop hl
04013E D1                  A   217    	pop de
04013F C1                  A   218    	pop bc
                           A   219    
040140 DDF9                A   220    	ld		sp,ix
040142 DDE1                A   221    	pop		ix
040144 C9                  A   222    	ret
                           A   223    	
040145                     A   224    _waitZDI:
040145 DDE5                A   225    	push	ix
040147 DD210000 00         A   226    	ld 		ix,0
04014C DD39                A   227    	add 	ix, sp
                           A   228    
04014E DD4E06              A   229    	ld 		c,	(ix+6)
040151 DD1709              A   230    	ld		de, (ix+9)
040154 21000006            A   231    	ld		hl, RETURNCODE
040158 71                  A   232    	ld		(hl), c
040159 21010006            A   233    	ld		hl, RETURNVALUE
04015D ED1F                A   234    	ld		(hl), de
04015F D5E1                A   235    	ld		hl, de
                           A   236    	
040161 0600                A   237    	ld		b, 0
040163 3E01                A   238    	ld		a, 1
040165 CD 20 00 04         A   239    	call	waitBreakpoint
040169 DDF9                A   240    	ld		sp,ix
04016B DDE1                A   241    	pop		ix
04016D C9                  A   242    	ret


Errors: 0
Warnings: 0
Lines Assembled: 523
