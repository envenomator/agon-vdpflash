Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED22-Oct-23     15:29:32     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\src_fatfs\ff.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "NONAME0",558
                           A     9    .DEFINE "fs_type"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "pdrv"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "n_fats"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 12
                           A    23    .ENDEF
                           A    24    .DEFINE "wflag"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 12
                           A    28    .ENDEF
                           A    29    .DEFINE "fsi_flag"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 12
                           A    33    .ENDEF
                           A    34    .DEFINE "id"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 13
                           A    38    .ENDEF
                           A    39    .DEFINE "n_rootdir"
                           A    40    .VALUE 7
                           A    41    .CLASS 8
                           A    42    .TYPE 13
                           A    43    .ENDEF
                           A    44    .DEFINE "csize"
                           A    45    .VALUE 9
                           A    46    .CLASS 8
                           A    47    .TYPE 13
                           A    48    .ENDEF
                           A    49    .DEFINE "lfnbuf"
                           A    50    .VALUE 11
                           A    51    .CLASS 8
                           A    52    .TYPE 45
                           A    53    .ENDEF
                           A    54    .DEFINE "cdir"
                           A    55    .VALUE 14
                           A    56    .CLASS 8
                           A    57    .TYPE 15
                           A    58    .ENDEF
                           A    59    .DEFINE "n_fatent"
                           A    60    .VALUE 18
                           A    61    .CLASS 8
                           A    62    .TYPE 15
                           A    63    .ENDEF
                           A    64    .DEFINE "fsize"
                           A    65    .VALUE 22
                           A    66    .CLASS 8
                           A    67    .TYPE 15
                           A    68    .ENDEF
                           A    69    .DEFINE "volbase"
                           A    70    .VALUE 26
                           A    71    .CLASS 8
                           A    72    .TYPE 15
                           A    73    .ENDEF
                           A    74    .DEFINE "fatbase"
                           A    75    .VALUE 30
                           A    76    .CLASS 8
                           A    77    .TYPE 15
                           A    78    .ENDEF
                           A    79    .DEFINE "dirbase"
                           A    80    .VALUE 34
                           A    81    .CLASS 8
                           A    82    .TYPE 15
                           A    83    .ENDEF
                           A    84    .DEFINE "database"
                           A    85    .VALUE 38
                           A    86    .CLASS 8
                           A    87    .TYPE 15
                           A    88    .ENDEF
                           A    89    .DEFINE "winsect"
                           A    90    .VALUE 42
                           A    91    .CLASS 8
                           A    92    .TYPE 15
                           A    93    .ENDEF
                           A    94    .DEFINE "win"
                           A    95    .VALUE 46
                           A    96    .CLASS 8
                           A    97    .DIM 512
                           A    98    .TYPE 108
                           A    99    .ENDEF
                           A   100    .ENDREC "NONAME0"
                           A   101    .BEGREC "NONAME1",15
                           A   102    .DEFINE "fs"
                           A   103    .VALUE 0
                           A   104    .CLASS 8
                           A   105    .TAG "NONAME0"
                           A   106    .TYPE 40
                           A   107    .ENDEF
                           A   108    .DEFINE "id"
                           A   109    .VALUE 3
                           A   110    .CLASS 8
                           A   111    .TYPE 13
                           A   112    .ENDEF
                           A   113    .DEFINE "attr"
                           A   114    .VALUE 5
                           A   115    .CLASS 8
                           A   116    .TYPE 12
                           A   117    .ENDEF
                           A   118    .DEFINE "stat"
                           A   119    .VALUE 6
                           A   120    .CLASS 8
                           A   121    .TYPE 12
                           A   122    .ENDEF
                           A   123    .DEFINE "sclust"
                           A   124    .VALUE 7
                           A   125    .CLASS 8
                           A   126    .TYPE 15
                           A   127    .ENDEF
                           A   128    .DEFINE "objsize"
                           A   129    .VALUE 11
                           A   130    .CLASS 8
                           A   131    .TYPE 15
                           A   132    .ENDEF
                           A   133    .ENDREC "NONAME1"
                           A   134    .BEGREC "NONAME2",29
                           A   135    .DEFINE "obj"
                           A   136    .VALUE 0
                           A   137    .CLASS 8
                           A   138    .TAG "NONAME1"
                           A   139    .TYPE 8
                           A   140    .ENDEF
                           A   141    .DEFINE "flag"
                           A   142    .VALUE 15
                           A   143    .CLASS 8
                           A   144    .TYPE 12
                           A   145    .ENDEF
                           A   146    .DEFINE "err"
                           A   147    .VALUE 16
                           A   148    .CLASS 8
                           A   149    .TYPE 12
                           A   150    .ENDEF
                           A   151    .DEFINE "fptr"
                           A   152    .VALUE 17
                           A   153    .CLASS 8
                           A   154    .TYPE 15
                           A   155    .ENDEF
                           A   156    .DEFINE "clust"
                           A   157    .VALUE 21
                           A   158    .CLASS 8
                           A   159    .TYPE 15
                           A   160    .ENDEF
                           A   161    .DEFINE "sect"
                           A   162    .VALUE 25
                           A   163    .CLASS 8
                           A   164    .TYPE 15
                           A   165    .ENDEF
                           A   166    .ENDREC "NONAME2"
                           A   167    .BEGREC "NONAME3",46
                           A   168    .DEFINE "obj"
                           A   169    .VALUE 0
                           A   170    .CLASS 8
                           A   171    .TAG "NONAME1"
                           A   172    .TYPE 8
                           A   173    .ENDEF
                           A   174    .DEFINE "dptr"
                           A   175    .VALUE 15
                           A   176    .CLASS 8
                           A   177    .TYPE 15
                           A   178    .ENDEF
                           A   179    .DEFINE "clust"
                           A   180    .VALUE 19
                           A   181    .CLASS 8
                           A   182    .TYPE 15
                           A   183    .ENDEF
                           A   184    .DEFINE "sect"
                           A   185    .VALUE 23
                           A   186    .CLASS 8
                           A   187    .TYPE 15
                           A   188    .ENDEF
                           A   189    .DEFINE "dir"
                           A   190    .VALUE 27
                           A   191    .CLASS 8
                           A   192    .TYPE 44
                           A   193    .ENDEF
                           A   194    .DEFINE "fn"
                           A   195    .VALUE 30
                           A   196    .CLASS 8
                           A   197    .DIM 12
                           A   198    .TYPE 108
                           A   199    .ENDEF
                           A   200    .DEFINE "blk_ofs"
                           A   201    .VALUE 42
                           A   202    .CLASS 8
                           A   203    .TYPE 15
                           A   204    .ENDEF
                           A   205    .ENDREC "NONAME3"
                           A   206    .BEGREC "NONAME4",278
                           A   207    .DEFINE "fsize"
                           A   208    .VALUE 0
                           A   209    .CLASS 8
                           A   210    .TYPE 15
                           A   211    .ENDEF
                           A   212    .DEFINE "fdate"
                           A   213    .VALUE 4
                           A   214    .CLASS 8
                           A   215    .TYPE 13
                           A   216    .ENDEF
                           A   217    .DEFINE "ftime"
                           A   218    .VALUE 6
                           A   219    .CLASS 8
                           A   220    .TYPE 13
                           A   221    .ENDEF
                           A   222    .DEFINE "fattrib"
                           A   223    .VALUE 8
                           A   224    .CLASS 8
                           A   225    .TYPE 12
                           A   226    .ENDEF
                           A   227    .DEFINE "altname"
                           A   228    .VALUE 9
                           A   229    .CLASS 8
                           A   230    .DIM 13
                           A   231    .TYPE 98
                           A   232    .ENDEF
                           A   233    .DEFINE "fname"
                           A   234    .VALUE 22
                           A   235    .CLASS 8
                           A   236    .DIM 256
                           A   237    .TYPE 98
                           A   238    .ENDEF
                           A   239    .ENDREC "NONAME4"
                           A   240    .BEGREC "NONAME5",12
                           A   241    .DEFINE "fmt"
                           A   242    .VALUE 0
                           A   243    .CLASS 8
                           A   244    .TYPE 12
                           A   245    .ENDEF
                           A   246    .DEFINE "n_fat"
                           A   247    .VALUE 1
                           A   248    .CLASS 8
                           A   249    .TYPE 12
                           A   250    .ENDEF
                           A   251    .DEFINE "align"
                           A   252    .VALUE 2
                           A   253    .CLASS 8
                           A   254    .TYPE 14
                           A   255    .ENDEF
                           A   256    .DEFINE "n_root"
                           A   257    .VALUE 5
                           A   258    .CLASS 8
                           A   259    .TYPE 14
                           A   260    .ENDEF
                           A   261    .DEFINE "au_size"
                           A   262    .VALUE 8
                           A   263    .CLASS 8
                           A   264    .TYPE 15
                           A   265    .ENDEF
                           A   266    .ENDREC "NONAME5"
                           A   267    	SEGMENT BSS
044AB3                     A   268    _FatFs:
044AB3                     A   269    	DS	3
                           A   270    .DEFINE "FatFs"
                           A   271    .ALIAS "_FatFs"
                           A   272    .CLASS 83
                           A   273    .VALUE _FatFs
                           A   274    .DIM 1
                           A   275    .TAG "NONAME0"
                           A   276    .TYPE 360
                           A   277    .ENDEF
044AB6                     A   278    _Fsid:
044AB6                     A   279    	DS	2*1
                           A   280    .DEFINE "Fsid"
                           A   281    .ALIAS "_Fsid"
                           A   282    .CLASS 83
                           A   283    .VALUE _Fsid
                           A   284    .TYPE 13
                           A   285    .ENDEF
044AB8                     A   286    _CurrVol:
044AB8                     A   287    	DS	1
                           A   288    .DEFINE "CurrVol"
                           A   289    .ALIAS "_CurrVol"
                           A   290    .CLASS 83
                           A   291    .VALUE _CurrVol
                           A   292    .TYPE 12
                           A   293    .ENDEF
                           A   294    	SEGMENT TEXT
0453AE                     A   295    _LfnOfs:
0453AE 01                  A   296    	DB	1
0453AF 03                  A   297    	DB	3
0453B0 05                  A   298    	DB	5
0453B1 07                  A   299    	DB	7
0453B2 09                  A   300    	DB	9
0453B3 0E                  A   301    	DB	14
0453B4 10                  A   302    	DB	16
0453B5 12                  A   303    	DB	18
0453B6 14                  A   304    	DB	20
0453B7 16                  A   305    	DB	22
0453B8 18                  A   306    	DB	24
0453B9 1C                  A   307    	DB	28
0453BA 1E                  A   308    	DB	30
                           A   309    .DEFINE "LfnOfs"
                           A   310    .ALIAS "_LfnOfs"
                           A   311    .CLASS 84
                           A   312    .VALUE _LfnOfs
                           A   313    .DIM 13
                           A   314    .TYPE 108
                           A   315    .ENDEF
0453BB                     A   316    _ExCvt:
0453BB 80                  A   317    	DB	128
0453BC 9A                  A   318    	DB	154
0453BD 45                  A   319    	DB	69
0453BE 41                  A   320    	DB	65
0453BF 8E                  A   321    	DB	142
0453C0 41                  A   322    	DB	65
0453C1 8F                  A   323    	DB	143
0453C2 80                  A   324    	DB	128
0453C3 45                  A   325    	DB	69
0453C4 45                  A   326    	DB	69
0453C5 45                  A   327    	DB	69
0453C6 49                  A   328    	DB	73
0453C7 49                  A   329    	DB	73
0453C8 49                  A   330    	DB	73
0453C9 8E                  A   331    	DB	142
0453CA 8F                  A   332    	DB	143
0453CB 90                  A   333    	DB	144
0453CC 92                  A   334    	DB	146
0453CD 92                  A   335    	DB	146
0453CE 4F                  A   336    	DB	79
0453CF 99                  A   337    	DB	153
0453D0 4F                  A   338    	DB	79
0453D1 55                  A   339    	DB	85
0453D2 55                  A   340    	DB	85
0453D3 59                  A   341    	DB	89
0453D4 99                  A   342    	DB	153
0453D5 9A                  A   343    	DB	154
0453D6 9B                  A   344    	DB	155
0453D7 9C                  A   345    	DB	156
0453D8 9D                  A   346    	DB	157
0453D9 9E                  A   347    	DB	158
0453DA 9F                  A   348    	DB	159
0453DB 41                  A   349    	DB	65
0453DC 49                  A   350    	DB	73
0453DD 4F                  A   351    	DB	79
0453DE 55                  A   352    	DB	85
0453DF A5                  A   353    	DB	165
0453E0 A5                  A   354    	DB	165
0453E1 A6                  A   355    	DB	166
0453E2 A7                  A   356    	DB	167
0453E3 A8                  A   357    	DB	168
0453E4 A9                  A   358    	DB	169
0453E5 AA                  A   359    	DB	170
0453E6 AB                  A   360    	DB	171
0453E7 AC                  A   361    	DB	172
0453E8 AD                  A   362    	DB	173
0453E9 AE                  A   363    	DB	174
0453EA AF                  A   364    	DB	175
0453EB B0                  A   365    	DB	176
0453EC B1                  A   366    	DB	177
0453ED B2                  A   367    	DB	178
0453EE B3                  A   368    	DB	179
0453EF B4                  A   369    	DB	180
0453F0 B5                  A   370    	DB	181
0453F1 B6                  A   371    	DB	182
0453F2 B7                  A   372    	DB	183
0453F3 B8                  A   373    	DB	184
0453F4 B9                  A   374    	DB	185
0453F5 BA                  A   375    	DB	186
0453F6 BB                  A   376    	DB	187
0453F7 BC                  A   377    	DB	188
0453F8 BD                  A   378    	DB	189
0453F9 BE                  A   379    	DB	190
0453FA BF                  A   380    	DB	191
0453FB C0                  A   381    	DB	192
0453FC C1                  A   382    	DB	193
0453FD C2                  A   383    	DB	194
0453FE C3                  A   384    	DB	195
0453FF C4                  A   385    	DB	196
045400 C5                  A   386    	DB	197
045401 C6                  A   387    	DB	198
045402 C7                  A   388    	DB	199
045403 C8                  A   389    	DB	200
045404 C9                  A   390    	DB	201
045405 CA                  A   391    	DB	202
045406 CB                  A   392    	DB	203
045407 CC                  A   393    	DB	204
045408 CD                  A   394    	DB	205
045409 CE                  A   395    	DB	206
04540A CF                  A   396    	DB	207
04540B D0                  A   397    	DB	208
04540C D1                  A   398    	DB	209
04540D D2                  A   399    	DB	210
04540E D3                  A   400    	DB	211
04540F D4                  A   401    	DB	212
045410 D5                  A   402    	DB	213
045411 D6                  A   403    	DB	214
045412 D7                  A   404    	DB	215
045413 D8                  A   405    	DB	216
045414 D9                  A   406    	DB	217
045415 DA                  A   407    	DB	218
045416 DB                  A   408    	DB	219
045417 DC                  A   409    	DB	220
045418 DD                  A   410    	DB	221
045419 DE                  A   411    	DB	222
04541A DF                  A   412    	DB	223
04541B E0                  A   413    	DB	224
04541C E1                  A   414    	DB	225
04541D E2                  A   415    	DB	226
04541E E3                  A   416    	DB	227
04541F E4                  A   417    	DB	228
045420 E5                  A   418    	DB	229
045421 E6                  A   419    	DB	230
045422 E7                  A   420    	DB	231
045423 E8                  A   421    	DB	232
045424 E9                  A   422    	DB	233
045425 EA                  A   423    	DB	234
045426 EB                  A   424    	DB	235
045427 EC                  A   425    	DB	236
045428 ED                  A   426    	DB	237
045429 EE                  A   427    	DB	238
04542A EF                  A   428    	DB	239
04542B F0                  A   429    	DB	240
04542C F1                  A   430    	DB	241
04542D F2                  A   431    	DB	242
04542E F3                  A   432    	DB	243
04542F F4                  A   433    	DB	244
045430 F5                  A   434    	DB	245
045431 F6                  A   435    	DB	246
045432 F7                  A   436    	DB	247
045433 F8                  A   437    	DB	248
045434 F9                  A   438    	DB	249
045435 FA                  A   439    	DB	250
045436 FB                  A   440    	DB	251
045437 FC                  A   441    	DB	252
045438 FD                  A   442    	DB	253
045439 FE                  A   443    	DB	254
04543A FF                  A   444    	DB	255
                           A   445    .DEFINE "ExCvt"
                           A   446    .ALIAS "_ExCvt"
                           A   447    .CLASS 84
                           A   448    .VALUE _ExCvt
                           A   449    .DIM 128
                           A   450    .TYPE 108
                           A   451    .ENDEF
                           A   452    ;    1	/*-------------------------------------
                           A   453    ;    2	/  FatFs - Generic FAT Filesystem Modul
                           A   454    ;    3	/--------------------------------------
                           A   455    ;    4	/
                           A   456    ;    5	/ Copyright (C) 2021, ChaN, all right r
                           A   457    ;    6	/
                           A   458    ;    7	/ FatFs module is an open source softwa
                           A   459    ;    8	/ source and binary forms, with or with
                           A   460    ;    9	/ that the following condition is met:
                           A   461    ;   10	/
                           A   462    ;   11	/ 1. Redistributions of source code mus
                           A   463    ;   12	/    this condition and the following d
                           A   464    ;   13	/
                           A   465    ;   14	/ This software is provided by the copy
                           A   466    ;   15	/ and any warranties related to this so
                           A   467    ;   16	/ The copyright owner or contributors b
                           A   468    ;   17	/ by use of this software.
                           A   469    ;   18	/
                           A   470    ;   19	/--------------------------------------
                           A   471    ;   20	
                           A   472    ;   21	#include <string.h>
                           A   473    ;   22	
                           A   474    ;   23	#include "ff.h"			/* Declarations
                           A   475    ;   24	#include "diskio.h"		/* Declarations
                           A   476    ;   25	
                           A   477    ;   26	
                           A   478    ;   27	/*-------------------------------------
                           A   479    ;   28	
                           A   480    ;   29	   Module Private Definitions
                           A   481    ;   30	
                           A   482    ;   31	---------------------------------------
                           A   483    ;   32	
                           A   484    ;   33	#if FF_DEFINED != 86631	/* Revision ID 
                           A   485    ;   34	#error Wrong include file (ff.h).
                           A   486    ;   35	#endif
                           A   487    ;   36	
                           A   488    ;   37	
                           A   489    ;   38	/* Limits and boundaries */
                           A   490    ;   39	#define MAX_DIR		0x200000		/* 
                           A   491    ;   40	#define MAX_DIR_EX	0x10000000		/* 
                           A   492    ;   41	#define MAX_FAT12	0xFF5			/* 
                           A   493    ;   42	#define MAX_FAT16	0xFFF5			/* 
                           A   494    ;   43	#define MAX_FAT32	0x0FFFFFF5		/* 
                           A   495    ;   44	#define MAX_EXFAT	0x7FFFFFFD		/* 
                           A   496    ;   45	
                           A   497    ;   46	
                           A   498    ;   47	/* Character code support macros */
                           A   499    ;   48	#define IsUpper(c)		((c) >= 'A' && 
                           A   500    ;   49	#define IsLower(c)		((c) >= 'a' && 
                           A   501    ;   50	#define IsDigit(c)		((c) >= '0' && 
                           A   502    ;   51	#define IsSeparator(c)	((c) == '/' || 
                           A   503    ;   52	#define IsTerminator(c)	((UINT)(c) < (F
                           A   504    ;   53	#define IsSurrogate(c)	((c) >= 0xD800 
                           A   505    ;   54	#define IsSurrogateH(c)	((c) >= 0xD800 
                           A   506    ;   55	#define IsSurrogateL(c)	((c) >= 0xDC00 
                           A   507    ;   56	
                           A   508    ;   57	
                           A   509    ;   58	/* Additional file access control and f
                           A   510    ;   59	#define FA_SEEKEND	0x20	/* Seek to 
                           A   511    ;   60	#define FA_MODIFIED	0x40	/* File has
                           A   512    ;   61	#define FA_DIRTY	0x80	/* FIL.buf[
                           A   513    ;   62	
                           A   514    ;   63	
                           A   515    ;   64	/* Additional file attribute bits for i
                           A   516    ;   65	#define AM_VOL		0x08	/* Volume l
                           A   517    ;   66	#define AM_LFN		0x0F	/* LFN entr
                           A   518    ;   67	#define AM_MASK		0x3F	/* Mask of 
                           A   519    ;   68	#define AM_MASKX	0x37	/* Mask of 
                           A   520    ;   69	
                           A   521    ;   70	
                           A   522    ;   71	/* Name status flags in fn[11] */
                           A   523    ;   72	#define NSFLAG		11		/* Index of
                           A   524    ;   73	#define NS_LOSS		0x01	/* Out of 8
                           A   525    ;   74	#define NS_LFN		0x02	/* Force to
                           A   526    ;   75	#define NS_LAST		0x04	/* Last seg
                           A   527    ;   76	#define NS_BODY		0x08	/* Lower ca
                           A   528    ;   77	#define NS_EXT		0x10	/* Lower ca
                           A   529    ;   78	#define NS_DOT		0x20	/* Dot entr
                           A   530    ;   79	#define NS_NOLFN	0x40	/* Do not f
                           A   531    ;   80	#define NS_NONAME	0x80	/* Not foll
                           A   532    ;   81	
                           A   533    ;   82	
                           A   534    ;   83	/* exFAT directory entry types */
                           A   535    ;   84	#define	ET_BITMAP	0x81	/* Allocati
                           A   536    ;   85	#define	ET_UPCASE	0x82	/* Up-case 
                           A   537    ;   86	#define	ET_VLABEL	0x83	/* Volume l
                           A   538    ;   87	#define	ET_FILEDIR	0x85	/* File and
                           A   539    ;   88	#define	ET_STREAM	0xC0	/* Stream e
                           A   540    ;   89	#define	ET_FILENAME	0xC1	/* Name ext
                           A   541    ;   90	
                           A   542    ;   91	
                           A   543    ;   92	/* FatFs refers the FAT structure as si
                           A   544    ;   93	/ because the C structure is not binary
                           A   545    ;   94	
                           A   546    ;   95	#define BS_JmpBoot			0		/* 
                           A   547    ;   96	#define BS_OEMName			3		/* 
                           A   548    ;   97	#define BPB_BytsPerSec		11		/* 
                           A   549    ;   98	#define BPB_SecPerClus		13		/* 
                           A   550    ;   99	#define BPB_RsvdSecCnt		14		/* 
                           A   551    ;  100	#define BPB_NumFATs			16		/* 
                           A   552    ;  101	#define BPB_RootEntCnt		17		/* 
                           A   553    ;  102	#define BPB_TotSec16		19		/* 
                           A   554    ;  103	#define BPB_Media			21		/* 
                           A   555    ;  104	#define BPB_FATSz16			22		/* 
                           A   556    ;  105	#define BPB_SecPerTrk		24		/* 
                           A   557    ;  106	#define BPB_NumHeads		26		/* 
                           A   558    ;  107	#define BPB_HiddSec			28		/* 
                           A   559    ;  108	#define BPB_TotSec32		32		/* 
                           A   560    ;  109	#define BS_DrvNum			36		/* 
                           A   561    ;  110	#define BS_NTres			37		/* 
                           A   562    ;  111	#define BS_BootSig			38		/* 
                           A   563    ;  112	#define BS_VolID			39		/* 
                           A   564    ;  113	#define BS_VolLab			43		/* 
                           A   565    ;  114	#define BS_FilSysType		54		/* 
                           A   566    ;  115	#define BS_BootCode			62		/* 
                           A   567    ;  116	#define BS_55AA				510		/* 
                           A   568    ;  117	
                           A   569    ;  118	#define BPB_FATSz32			36		/* 
                           A   570    ;  119	#define BPB_ExtFlags32		40		/* 
                           A   571    ;  120	#define BPB_FSVer32			42		/* 
                           A   572    ;  121	#define BPB_RootClus32		44		/* 
                           A   573    ;  122	#define BPB_FSInfo32		48		/* 
                           A   574    ;  123	#define BPB_BkBootSec32		50		/* 
                           A   575    ;  124	#define BS_DrvNum32			64		/* 
                           A   576    ;  125	#define BS_NTres32			65		/* 
                           A   577    ;  126	#define BS_BootSig32		66		/* 
                           A   578    ;  127	#define BS_VolID32			67		/* 
                           A   579    ;  128	#define BS_VolLab32			71		/* 
                           A   580    ;  129	#define BS_FilSysType32		82		/* 
                           A   581    ;  130	#define BS_BootCode32		90		/* 
                           A   582    ;  131	
                           A   583    ;  132	#define BPB_ZeroedEx		11		/* 
                           A   584    ;  133	#define BPB_VolOfsEx		64		/* 
                           A   585    ;  134	#define BPB_TotSecEx		72		/* 
                           A   586    ;  135	#define BPB_FatOfsEx		80		/* 
                           A   587    ;  136	#define BPB_FatSzEx			84		/* 
                           A   588    ;  137	#define BPB_DataOfsEx		88		/* 
                           A   589    ;  138	#define BPB_NumClusEx		92		/* 
                           A   590    ;  139	#define BPB_RootClusEx		96		/* 
                           A   591    ;  140	#define BPB_VolIDEx			100		/* 
                           A   592    ;  141	#define BPB_FSVerEx			104		/* 
                           A   593    ;  142	#define BPB_VolFlagEx		106		/* 
                           A   594    ;  143	#define BPB_BytsPerSecEx	108		/* 
                           A   595    ;  144	#define BPB_SecPerClusEx	109		/* 
                           A   596    ;  145	#define BPB_NumFATsEx		110		/* 
                           A   597    ;  146	#define BPB_DrvNumEx		111		/* 
                           A   598    ;  147	#define BPB_PercInUseEx		112		/* 
                           A   599    ;  148	#define BPB_RsvdEx			113		/* 
                           A   600    ;  149	#define BS_BootCodeEx		120		/* 
                           A   601    ;  150	
                           A   602    ;  151	#define DIR_Name			0		/* 
                           A   603    ;  152	#define DIR_Attr			11		/* 
                           A   604    ;  153	#define DIR_NTres			12		/* 
                           A   605    ;  154	#define DIR_CrtTime10		13		/* 
                           A   606    ;  155	#define DIR_CrtTime			14		/* 
                           A   607    ;  156	#define DIR_LstAccDate		18		/* 
                           A   608    ;  157	#define DIR_FstClusHI		20		/* 
                           A   609    ;  158	#define DIR_ModTime			22		/* 
                           A   610    ;  159	#define DIR_FstClusLO		26		/* 
                           A   611    ;  160	#define DIR_FileSize		28		/* 
                           A   612    ;  161	#define LDIR_Ord			0		/* 
                           A   613    ;  162	#define LDIR_Attr			11		/* 
                           A   614    ;  163	#define LDIR_Type			12		/* 
                           A   615    ;  164	#define LDIR_Chksum			13		/* 
                           A   616    ;  165	#define LDIR_FstClusLO		26		/* 
                           A   617    ;  166	#define XDIR_Type			0		/* 
                           A   618    ;  167	#define XDIR_NumLabel		1		/* 
                           A   619    ;  168	#define XDIR_Label			2		/* 
                           A   620    ;  169	#define XDIR_CaseSum		4		/* 
                           A   621    ;  170	#define XDIR_NumSec			1		/* 
                           A   622    ;  171	#define XDIR_SetSum			2		/* 
                           A   623    ;  172	#define XDIR_Attr			4		/* 
                           A   624    ;  173	#define XDIR_CrtTime		8		/* 
                           A   625    ;  174	#define XDIR_ModTime		12		/* 
                           A   626    ;  175	#define XDIR_AccTime		16		/* 
                           A   627    ;  176	#define XDIR_CrtTime10		20		/* 
                           A   628    ;  177	#define XDIR_ModTime10		21		/* 
                           A   629    ;  178	#define XDIR_CrtTZ			22		/* 
                           A   630    ;  179	#define XDIR_ModTZ			23		/* 
                           A   631    ;  180	#define XDIR_AccTZ			24		/* 
                           A   632    ;  181	#define XDIR_GenFlags		33		/* 
                           A   633    ;  182	#define XDIR_NumName		35		/* 
                           A   634    ;  183	#define XDIR_NameHash		36		/* 
                           A   635    ;  184	#define XDIR_ValidFileSize	40		/* 
                           A   636    ;  185	#define XDIR_FstClus		52		/* 
                           A   637    ;  186	#define XDIR_FileSize		56		/* 
                           A   638    ;  187	
                           A   639    ;  188	#define SZDIRE				32		/* 
                           A   640    ;  189	#define DDEM				0xE5	/* 
                           A   641    ;  190	#define RDDEM				0x05	/* 
                           A   642    ;  191	#define LLEF				0x40	/* 
                           A   643    ;  192	
                           A   644    ;  193	#define FSI_LeadSig			0		/* 
                           A   645    ;  194	#define FSI_StrucSig		484		/* 
                           A   646    ;  195	#define FSI_Free_Count		488		/* 
                           A   647    ;  196	#define FSI_Nxt_Free		492		/* 
                           A   648    ;  197	
                           A   649    ;  198	#define MBR_Table			446		/* 
                           A   650    ;  199	#define SZ_PTE				16		/* 
                           A   651    ;  200	#define PTE_Boot			0		/* 
                           A   652    ;  201	#define PTE_StHead			1		/* 
                           A   653    ;  202	#define PTE_StSec			2		/* 
                           A   654    ;  203	#define PTE_StCyl			3		/* 
                           A   655    ;  204	#define PTE_System			4		/* 
                           A   656    ;  205	#define PTE_EdHead			5		/* 
                           A   657    ;  206	#define PTE_EdSec			6		/* 
                           A   658    ;  207	#define PTE_EdCyl			7		/* 
                           A   659    ;  208	#define PTE_StLba			8		/* 
                           A   660    ;  209	#define PTE_SizLba			12		/* 
                           A   661    ;  210	
                           A   662    ;  211	#define GPTH_Sign			0		/* 
                           A   663    ;  212	#define GPTH_Rev			8		/* 
                           A   664    ;  213	#define GPTH_Size			12		/* 
                           A   665    ;  214	#define GPTH_Bcc			16		/* 
                           A   666    ;  215	#define GPTH_CurLba			24		/* 
                           A   667    ;  216	#define GPTH_BakLba			32		/* 
                           A   668    ;  217	#define GPTH_FstLba			40		/* 
                           A   669    ;  218	#define GPTH_LstLba			48		/* 
                           A   670    ;  219	#define GPTH_DskGuid		56		/* 
                           A   671    ;  220	#define GPTH_PtOfs			72		/* 
                           A   672    ;  221	#define GPTH_PtNum			80		/* 
                           A   673    ;  222	#define GPTH_PteSize		84		/* 
                           A   674    ;  223	#define GPTH_PtBcc			88		/* 
                           A   675    ;  224	#define SZ_GPTE				128		/* 
                           A   676    ;  225	#define GPTE_PtGuid			0		/* 
                           A   677    ;  226	#define GPTE_UpGuid			16		/* 
                           A   678    ;  227	#define GPTE_FstLba			32		/* 
                           A   679    ;  228	#define GPTE_LstLba			40		/* 
                           A   680    ;  229	#define GPTE_Flags			48		/* 
                           A   681    ;  230	#define GPTE_Name			56		/* 
                           A   682    ;  231	
                           A   683    ;  232	
                           A   684    ;  233	/* Post process on fatal error in the f
                           A   685    ;  234	#define ABORT(fs, res)		{ fp->err =
                           A   686    ;  235	
                           A   687    ;  236	
                           A   688    ;  237	/* Re-entrancy related */
                           A   689    ;  238	#if FF_FS_REENTRANT
                           A   690    ;  239	#if FF_USE_LFN == 1
                           A   691    ;  240	#error Static LFN work area cannot be u
                           A   692    ;  241	#endif
                           A   693    ;  242	#define LEAVE_FF(fs, res)	{ unlock_fs
                           A   694    ;  243	#else
                           A   695    ;  244	#define LEAVE_FF(fs, res)	return res
                           A   696    ;  245	#endif
                           A   697    ;  246	
                           A   698    ;  247	
                           A   699    ;  248	/* Definitions of logical drive - physi
                           A   700    ;  249	#if FF_MULTI_PARTITION
                           A   701    ;  250	#define LD2PD(vol) VolToPart[vol].pd	
                           A   702    ;  251	#define LD2PT(vol) VolToPart[vol].pt	
                           A   703    ;  252	#else
                           A   704    ;  253	#define LD2PD(vol) (BYTE)(vol)	/* Each
                           A   705    ;  254	#define LD2PT(vol) 0			/* Auto
                           A   706    ;  255	#endif
                           A   707    ;  256	
                           A   708    ;  257	
                           A   709    ;  258	/* Definitions of sector size */
                           A   710    ;  259	#if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_
                           A   711    ;  260	#error Wrong sector size configuration
                           A   712    ;  261	#endif
                           A   713    ;  262	#if FF_MAX_SS == FF_MIN_SS
                           A   714    ;  263	#define SS(fs)	((UINT)FF_MAX_SS)	/* 
                           A   715    ;  264	#else
                           A   716    ;  265	#define SS(fs)	((fs)->ssize)	/* Vari
                           A   717    ;  266	#endif
                           A   718    ;  267	
                           A   719    ;  268	
                           A   720    ;  269	/* Timestamp */
                           A   721    ;  270	#if FF_FS_NORTC == 1
                           A   722    ;  271	#if FF_NORTC_YEAR < 1980 || FF_NORTC_YE
                           A   723    ;  272	#error Invalid FF_FS_NORTC settings
                           A   724    ;  273	#endif
                           A   725    ;  274	#define GET_FATTIME()	((DWORD)(FF_NOR
                           A   726    ;  275	#else
                           A   727    ;  276	#define GET_FATTIME()	get_fattime()
                           A   728    ;  277	#endif
                           A   729    ;  278	
                           A   730    ;  279	
                           A   731    ;  280	/* File lock controls */
                           A   732    ;  281	#if FF_FS_LOCK != 0
                           A   733    ;  282	#if FF_FS_READONLY
                           A   734    ;  283	#error FF_FS_LOCK must be 0 at read-onl
                           A   735    ;  284	#endif
                           A   736    ;  285	typedef struct {
                           A   737    ;  286		FATFS *fs;		/* Object ID 1, vol
                           A   738    ;  287		DWORD clu;		/* Object ID 2, con
                           A   739    ;  288		DWORD ofs;		/* Object ID 3, off
                           A   740    ;  289		WORD ctr;		/* Object open coun
                           A   741    ;  290	} FILESEM;
                           A   742    ;  291	#endif
                           A   743    ;  292	
                           A   744    ;  293	
                           A   745    ;  294	/* SBCS up-case tables (\x80-\xFF) */
                           A   746    ;  295	#define TBL_CT437  {0x80,0x9A,0x45,0x41
                           A   747    ;  296						0x90,0x92,0x92,0x4F
                           A   748    ;  297						0x41,0x49,0x4F,0x55
                           A   749    ;  298						0xB0,0xB1,0xB2,0xB3
                           A   750    ;  299						0xC0,0xC1,0xC2,0xC3
                           A   751    ;  300						0xD0,0xD1,0xD2,0xD3
                           A   752    ;  301						0xE0,0xE1,0xE2,0xE3
                           A   753    ;  302						0xF0,0xF1,0xF2,0xF3
                           A   754    ;  303	#define TBL_CT720  {0x80,0x81,0x82,0x83
                           A   755    ;  304						0x90,0x91,0x92,0x93
                           A   756    ;  305						0xA0,0xA1,0xA2,0xA3
                           A   757    ;  306						0xB0,0xB1,0xB2,0xB3
                           A   758    ;  307						0xC0,0xC1,0xC2,0xC3
                           A   759    ;  308						0xD0,0xD1,0xD2,0xD3
                           A   760    ;  309						0xE0,0xE1,0xE2,0xE3
                           A   761    ;  310						0xF0,0xF1,0xF2,0xF3
                           A   762    ;  311	#define TBL_CT737  {0x80,0x81,0x82,0x83
                           A   763    ;  312						0x90,0x92,0x92,0x93
                           A   764    ;  313						0x88,0x89,0x8A,0x8B
                           A   765    ;  314						0xB0,0xB1,0xB2,0xB3
                           A   766    ;  315						0xC0,0xC1,0xC2,0xC3
                           A   767    ;  316						0xD0,0xD1,0xD2,0xD3
                           A   768    ;  317						0x97,0xEA,0xEB,0xEC
                           A   769    ;  318						0xF0,0xF1,0xF2,0xF3
                           A   770    ;  319	#define TBL_CT771  {0x80,0x81,0x82,0x83
                           A   771    ;  320						0x90,0x91,0x92,0x93
                           A   772    ;  321						0x80,0x81,0x82,0x83
                           A   773    ;  322						0xB0,0xB1,0xB2,0xB3
                           A   774    ;  323						0xC0,0xC1,0xC2,0xC3
                           A   775    ;  324						0xD0,0xD1,0xD2,0xD3
                           A   776    ;  325						0x90,0x91,0x92,0x93
                           A   777    ;  326						0xF0,0xF0,0xF2,0xF2
                           A   778    ;  327	#define TBL_CT775  {0x80,0x9A,0x91,0xA0
                           A   779    ;  328						0x90,0x92,0x92,0xE2
                           A   780    ;  329						0xA0,0xA1,0xE0,0xA3
                           A   781    ;  330						0xB0,0xB1,0xB2,0xB3
                           A   782    ;  331						0xC0,0xC1,0xC2,0xC3
                           A   783    ;  332						0xB5,0xB6,0xB7,0xB8
                           A   784    ;  333						0xE0,0xE1,0xE2,0xE3
                           A   785    ;  334						0xF0,0xF1,0xF2,0xF3
                           A   786    ;  335	#define TBL_CT850  {0x43,0x55,0x45,0x41
                           A   787    ;  336						0x45,0x92,0x92,0x4F
                           A   788    ;  337						0x41,0x49,0x4F,0x55
                           A   789    ;  338						0xB0,0xB1,0xB2,0xB3
                           A   790    ;  339						0xC0,0xC1,0xC2,0xC3
                           A   791    ;  340						0xD1,0xD1,0x45,0x45
                           A   792    ;  341						0x4F,0xE1,0x4F,0x4F
                           A   793    ;  342						0xF0,0xF1,0xF2,0xF3
                           A   794    ;  343	#define TBL_CT852  {0x80,0x9A,0x90,0xB6
                           A   795    ;  344						0x90,0x91,0x91,0xE2
                           A   796    ;  345						0xB5,0xD6,0xE0,0xE9
                           A   797    ;  346						0xB0,0xB1,0xB2,0xB3
                           A   798    ;  347						0xC0,0xC1,0xC2,0xC3
                           A   799    ;  348						0xD1,0xD1,0xD2,0xD3
                           A   800    ;  349						0xE0,0xE1,0xE2,0xE3
                           A   801    ;  350						0xF0,0xF1,0xF2,0xF3
                           A   802    ;  351	#define TBL_CT855  {0x81,0x81,0x83,0x83
                           A   803    ;  352						0x91,0x91,0x93,0x93
                           A   804    ;  353						0xA1,0xA1,0xA3,0xA3
                           A   805    ;  354						0xB0,0xB1,0xB2,0xB3
                           A   806    ;  355						0xC0,0xC1,0xC2,0xC3
                           A   807    ;  356						0xD1,0xD1,0xD3,0xD3
                           A   808    ;  357						0xE0,0xE2,0xE2,0xE4
                           A   809    ;  358						0xF0,0xF2,0xF2,0xF4
                           A   810    ;  359	#define TBL_CT857  {0x80,0x9A,0x90,0xB6
                           A   811    ;  360						0x90,0x92,0x92,0xE2
                           A   812    ;  361						0xB5,0xD6,0xE0,0xE9
                           A   813    ;  362						0xB0,0xB1,0xB2,0xB3
                           A   814    ;  363						0xC0,0xC1,0xC2,0xC3
                           A   815    ;  364						0xD0,0xD1,0xD2,0xD3
                           A   816    ;  365						0xE0,0xE1,0xE2,0xE3
                           A   817    ;  366						0xF0,0xF1,0xF2,0xF3
                           A   818    ;  367	#define TBL_CT860  {0x80,0x9A,0x90,0x8F
                           A   819    ;  368						0x90,0x91,0x92,0x8C
                           A   820    ;  369						0x86,0x8B,0x9F,0x96
                           A   821    ;  370						0xB0,0xB1,0xB2,0xB3
                           A   822    ;  371						0xC0,0xC1,0xC2,0xC3
                           A   823    ;  372						0xD0,0xD1,0xD2,0xD3
                           A   824    ;  373						0xE0,0xE1,0xE2,0xE3
                           A   825    ;  374						0xF0,0xF1,0xF2,0xF3
                           A   826    ;  375	#define TBL_CT861  {0x80,0x9A,0x90,0x41
                           A   827    ;  376						0x90,0x92,0x92,0x4F
                           A   828    ;  377						0xA4,0xA5,0xA6,0xA7
                           A   829    ;  378						0xB0,0xB1,0xB2,0xB3
                           A   830    ;  379						0xC0,0xC1,0xC2,0xC3
                           A   831    ;  380						0xD0,0xD1,0xD2,0xD3
                           A   832    ;  381						0xE0,0xE1,0xE2,0xE3
                           A   833    ;  382						0xF0,0xF1,0xF2,0xF3
                           A   834    ;  383	#define TBL_CT862  {0x80,0x81,0x82,0x83
                           A   835    ;  384						0x90,0x91,0x92,0x93
                           A   836    ;  385						0x41,0x49,0x4F,0x55
                           A   837    ;  386						0xB0,0xB1,0xB2,0xB3
                           A   838    ;  387						0xC0,0xC1,0xC2,0xC3
                           A   839    ;  388						0xD0,0xD1,0xD2,0xD3
                           A   840    ;  389						0xE0,0xE1,0xE2,0xE3
                           A   841    ;  390						0xF0,0xF1,0xF2,0xF3
                           A   842    ;  391	#define TBL_CT863  {0x43,0x55,0x45,0x41
                           A   843    ;  392						0x45,0x45,0x45,0x4F
                           A   844    ;  393						0xA0,0xA1,0x4F,0x55
                           A   845    ;  394						0xB0,0xB1,0xB2,0xB3
                           A   846    ;  395						0xC0,0xC1,0xC2,0xC3
                           A   847    ;  396						0xD0,0xD1,0xD2,0xD3
                           A   848    ;  397						0xE0,0xE1,0xE2,0xE3
                           A   849    ;  398						0xF0,0xF1,0xF2,0xF3
                           A   850    ;  399	#define TBL_CT864  {0x80,0x9A,0x45,0x41
                           A   851    ;  400						0x90,0x92,0x92,0x4F
                           A   852    ;  401						0x41,0x49,0x4F,0x55
                           A   853    ;  402						0xB0,0xB1,0xB2,0xB3
                           A   854    ;  403						0xC0,0xC1,0xC2,0xC3
                           A   855    ;  404						0xD0,0xD1,0xD2,0xD3
                           A   856    ;  405						0xE0,0xE1,0xE2,0xE3
                           A   857    ;  406						0xF0,0xF1,0xF2,0xF3
                           A   858    ;  407	#define TBL_CT865  {0x80,0x9A,0x90,0x41
                           A   859    ;  408						0x90,0x92,0x92,0x4F
                           A   860    ;  409						0x41,0x49,0x4F,0x55
                           A   861    ;  410						0xB0,0xB1,0xB2,0xB3
                           A   862    ;  411						0xC0,0xC1,0xC2,0xC3
                           A   863    ;  412						0xD0,0xD1,0xD2,0xD3
                           A   864    ;  413						0xE0,0xE1,0xE2,0xE3
                           A   865    ;  414						0xF0,0xF1,0xF2,0xF3
                           A   866    ;  415	#define TBL_CT866  {0x80,0x81,0x82,0x83
                           A   867    ;  416						0x90,0x91,0x92,0x93
                           A   868    ;  417						0x80,0x81,0x82,0x83
                           A   869    ;  418						0xB0,0xB1,0xB2,0xB3
                           A   870    ;  419						0xC0,0xC1,0xC2,0xC3
                           A   871    ;  420						0xD0,0xD1,0xD2,0xD3
                           A   872    ;  421						0x90,0x91,0x92,0x93
                           A   873    ;  422						0xF0,0xF0,0xF2,0xF2
                           A   874    ;  423	#define TBL_CT869  {0x80,0x81,0x82,0x83
                           A   875    ;  424						0x90,0x91,0x92,0x93
                           A   876    ;  425						0x91,0x90,0x92,0x95
                           A   877    ;  426						0xB0,0xB1,0xB2,0xB3
                           A   878    ;  427						0xC0,0xC1,0xC2,0xC3
                           A   879    ;  428						0xD0,0xD1,0xD2,0xD3
                           A   880    ;  429						0xA9,0xAA,0xAC,0xAD
                           A   881    ;  430						0xF0,0xF1,0xD1,0xD2
                           A   882    ;  431	
                           A   883    ;  432	
                           A   884    ;  433	/* DBCS code range |----- 1st byte ----
                           A   885    ;  434	/*                  <------>    <------
                           A   886    ;  435	#define TBL_DC932 {0x81, 0x9F, 0xE0, 0x
                           A   887    ;  436	#define TBL_DC936 {0x81, 0xFE, 0x00, 0x
                           A   888    ;  437	#define TBL_DC949 {0x81, 0xFE, 0x00, 0x
                           A   889    ;  438	#define TBL_DC950 {0x81, 0xFE, 0x00, 0x
                           A   890    ;  439	
                           A   891    ;  440	
                           A   892    ;  441	/* Macros for table definitions */
                           A   893    ;  442	#define MERGE_2STR(a, b) a ## b
                           A   894    ;  443	#define MKCVTBL(hd, cp) MERGE_2STR(hd, 
                           A   895    ;  444	
                           A   896    ;  445	
                           A   897    ;  446	
                           A   898    ;  447	
                           A   899    ;  448	/*-------------------------------------
                           A   900    ;  449	
                           A   901    ;  450	   Module Private Work Area
                           A   902    ;  451	
                           A   903    ;  452	---------------------------------------
                           A   904    ;  453	/* Remark: Variables defined here witho
                           A   905    ;  454	/  zero/null at start-up. If not, the l
                           A   906    ;  455	/  not compliance with C standard. */
                           A   907    ;  456	
                           A   908    ;  457	/*--------------------------------*/
                           A   909    ;  458	/* File/Volume controls           */
                           A   910    ;  459	/*--------------------------------*/
                           A   911    ;  460	
                           A   912    ;  461	#if FF_VOLUMES < 1 || FF_VOLUMES > 10
                           A   913    ;  462	#error Wrong FF_VOLUMES setting
                           A   914    ;  463	#endif
                           A   915    ;  464	static FATFS* FatFs[FF_VOLUMES];	/* 
                           A   916    ;  465	static WORD Fsid;					/* 
                           A   917    ;  466	
                           A   918    ;  467	#if FF_FS_RPATH != 0
                           A   919    ;  468	static BYTE CurrVol;				/* 
                           A   920    ;  469	#endif
                           A   921    ;  470	
                           A   922    ;  471	#if FF_FS_LOCK != 0
                           A   923    ;  472	static FILESEM Files[FF_FS_LOCK];	/* 
                           A   924    ;  473	#endif
                           A   925    ;  474	
                           A   926    ;  475	#if FF_STR_VOLUME_ID
                           A   927    ;  476	#ifdef FF_VOLUME_STRS
                           A   928    ;  477	static const char* const VolumeStr[FF_V
                           A   929    ;  478	#endif
                           A   930    ;  479	#endif
                           A   931    ;  480	
                           A   932    ;  481	#if FF_LBA64
                           A   933    ;  482	#if FF_MIN_GPT > 0x100000000
                           A   934    ;  483	#error Wrong FF_MIN_GPT setting
                           A   935    ;  484	#endif
                           A   936    ;  485	static const BYTE GUID_MS_Basic[16] = {
                           A   937    ;  486	#endif
                           A   938    ;  487	
                           A   939    ;  488	
                           A   940    ;  489	
                           A   941    ;  490	/*--------------------------------*/
                           A   942    ;  491	/* LFN/Directory working buffer   */
                           A   943    ;  492	/*--------------------------------*/
                           A   944    ;  493	
                           A   945    ;  494	#if FF_USE_LFN == 0		/* Non-LFN conf
                           A   946    ;  495	#if FF_FS_EXFAT
                           A   947    ;  496	#error LFN must be enabled when enable 
                           A   948    ;  497	#endif
                           A   949    ;  498	#define DEF_NAMBUF
                           A   950    ;  499	#define INIT_NAMBUF(fs)
                           A   951    ;  500	#define FREE_NAMBUF()
                           A   952    ;  501	#define LEAVE_MKFS(res)	return res
                           A   953    ;  502	
                           A   954    ;  503	#else					/* LFN configur
                           A   955    ;  504	#if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
                           A   956    ;  505	#error Wrong setting of FF_MAX_LFN
                           A   957    ;  506	#endif
                           A   958    ;  507	#if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_B
                           A   959    ;  508	#error Wrong setting of FF_LFN_BUF or F
                           A   960    ;  509	#endif
                           A   961    ;  510	#if FF_LFN_UNICODE < 0 || FF_LFN_UNICOD
                           A   962    ;  511	#error Wrong setting of FF_LFN_UNICODE
                           A   963    ;  512	#endif
                           A   964    ;  513	static const BYTE LfnOfs[] = {1,3,5,7,9
                           A   965    ;  514	#define MAXDIRB(nc)	((nc + 44U) / 15 * 
                           A   966    ;  515	
                           A   967    ;  516	#if FF_USE_LFN == 1		/* LFN enabled 
                           A   968    ;  517	#if FF_FS_EXFAT
                           A   969    ;  518	static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)]
                           A   970    ;  519	#endif
                           A   971    ;  520	static WCHAR LfnBuf[FF_MAX_LFN + 1];	
                           A   972    ;  521	#define DEF_NAMBUF
                           A   973    ;  522	#define INIT_NAMBUF(fs)
                           A   974    ;  523	#define FREE_NAMBUF()
                           A   975    ;  524	#define LEAVE_MKFS(res)	return res
                           A   976    ;  525	
                           A   977    ;  526	#elif FF_USE_LFN == 2 	/* LFN enabled 
                           A   978    ;  527	#if FF_FS_EXFAT
                           A   979    ;  528	#define DEF_NAMBUF		WCHAR lbuf[FF_M
                           A   980    ;  529	#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf 
                           A   981    ;  530	#define FREE_NAMBUF()
                           A   982    ;  531	#else
                           A   983    ;  532	#define DEF_NAMBUF		WCHAR lbuf[FF_M
                           A   984    ;  533	#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf 
                           A   985    ;  534	#define FREE_NAMBUF()
                           A   986    ;  535	#endif
                           A   987    ;  536	#define LEAVE_MKFS(res)	return res
                           A   988    ;  537	
                           A   989    ;  538	#elif FF_USE_LFN == 3 	/* LFN enabled 
                           A   990    ;  539	#if FF_FS_EXFAT
                           A   991    ;  540	#define DEF_NAMBUF		WCHAR *lfn;	/* 
                           A   992    ;  541	#define INIT_NAMBUF(fs)	{ lfn = ff_mema
                           A   993    ;  542	#define FREE_NAMBUF()	ff_memfree(lfn)
                           A   994    ;  543	#else
                           A   995    ;  544	#define DEF_NAMBUF		WCHAR *lfn;	/* 
                           A   996    ;  545	#define INIT_NAMBUF(fs)	{ lfn = ff_mema
                           A   997    ;  546	#define FREE_NAMBUF()	ff_memfree(lfn)
                           A   998    ;  547	#endif
                           A   999    ;  548	#define LEAVE_MKFS(res)	{ if (!work) ff
                           A  1000    ;  549	#define MAX_MALLOC	0x8000	/* Must be 
                           A  1001    ;  550	
                           A  1002    ;  551	#else
                           A  1003    ;  552	#error Wrong setting of FF_USE_LFN
                           A  1004    ;  553	
                           A  1005    ;  554	#endif	/* FF_USE_LFN == 1 */
                           A  1006    ;  555	#endif	/* FF_USE_LFN == 0 */
                           A  1007    ;  556	
                           A  1008    ;  557	
                           A  1009    ;  558	
                           A  1010    ;  559	/*--------------------------------*/
                           A  1011    ;  560	/* Code conversion tables         */
                           A  1012    ;  561	/*--------------------------------*/
                           A  1013    ;  562	
                           A  1014    ;  563	#if FF_CODE_PAGE == 0	/* Run-time cod
                           A  1015    ;  564	#define CODEPAGE CodePage
                           A  1016    ;  565	static WORD CodePage;	/* Current code
                           A  1017    ;  566	static const BYTE *ExCvt, *DbcTbl;	/* 
                           A  1018    ;  567	
                           A  1019    ;  568	static const BYTE Ct437[] = TBL_CT437;
                           A  1020    ;  569	static const BYTE Ct720[] = TBL_CT720;
                           A  1021    ;  570	static const BYTE Ct737[] = TBL_CT737;
                           A  1022    ;  571	static const BYTE Ct771[] = TBL_CT771;
                           A  1023    ;  572	static const BYTE Ct775[] = TBL_CT775;
                           A  1024    ;  573	static const BYTE Ct850[] = TBL_CT850;
                           A  1025    ;  574	static const BYTE Ct852[] = TBL_CT852;
                           A  1026    ;  575	static const BYTE Ct855[] = TBL_CT855;
                           A  1027    ;  576	static const BYTE Ct857[] = TBL_CT857;
                           A  1028    ;  577	static const BYTE Ct860[] = TBL_CT860;
                           A  1029    ;  578	static const BYTE Ct861[] = TBL_CT861;
                           A  1030    ;  579	static const BYTE Ct862[] = TBL_CT862;
                           A  1031    ;  580	static const BYTE Ct863[] = TBL_CT863;
                           A  1032    ;  581	static const BYTE Ct864[] = TBL_CT864;
                           A  1033    ;  582	static const BYTE Ct865[] = TBL_CT865;
                           A  1034    ;  583	static const BYTE Ct866[] = TBL_CT866;
                           A  1035    ;  584	static const BYTE Ct869[] = TBL_CT869;
                           A  1036    ;  585	static const BYTE Dc932[] = TBL_DC932;
                           A  1037    ;  586	static const BYTE Dc936[] = TBL_DC936;
                           A  1038    ;  587	static const BYTE Dc949[] = TBL_DC949;
                           A  1039    ;  588	static const BYTE Dc950[] = TBL_DC950;
                           A  1040    ;  589	
                           A  1041    ;  590	#elif FF_CODE_PAGE < 900	/* Static c
                           A  1042    ;  591	#define CODEPAGE FF_CODE_PAGE
                           A  1043    ;  592	static const BYTE ExCvt[] = MKCVTBL(TBL
                           A  1044    	SEGMENT CODE
                           A  1045    ;  593	
                           A  1046    ;  594	#else					/* Static code 
                           A  1047    ;  595	#define CODEPAGE FF_CODE_PAGE
                           A  1048    ;  596	static const BYTE DbcTbl[] = MKCVTBL(TB
                           A  1049    ;  597	
                           A  1050    ;  598	#endif
                           A  1051    ;  599	
                           A  1052    ;  600	
                           A  1053    ;  601	
                           A  1054    ;  602	
                           A  1055    ;  603	/*-------------------------------------
                           A  1056    ;  604	
                           A  1057    ;  605	   Module Private Functions
                           A  1058    ;  606	
                           A  1059    ;  607	---------------------------------------
                           A  1060    ;  608	
                           A  1061    ;  609	
                           A  1062    ;  610	/*-------------------------------------
                           A  1063    ;  611	/* Load/Store multi-byte word in the FA
                           A  1064    ;  612	/*-------------------------------------
                           A  1065    ;  613	
                           A  1066    ;  614	static WORD ld_word (const BYTE* ptr)	
                           A  1067    ;  615	{
040E7A                     A  1068    _ld_word:
                           A  1069    .DEFINE "_ld_word"
                           A  1070    
                           A  1071    .VALUE _ld_word
                           A  1072    
                           A  1073    .CLASS 3
                           A  1074    
                           A  1075    .TYPE 77
                           A  1076    
                           A  1077    .ENDEF
                           A  1078    
                           A  1079    .BEGFUNC "ld_word",615,"_ld_word"
                           A  1080    
                           A  1081    .LINE 615
                           A  1082    
                           A  1083    .DEFINE "ptr"
                           A  1084    
                           A  1085    .CLASS 65
                           A  1086    
                           A  1087    .VALUE 6
                           A  1088    
                           A  1089    .TYPE 204
                           A  1090    
                           A  1091    .ENDEF
                           A  1092    
                           A  1093    .DEFINE "rv"
                           A  1094    
                           A  1095    .CLASS 65
                           A  1096    
                           A  1097    .VALUE -2
                           A  1098    
                           A  1099    .TYPE 13
                           A  1100    
                           A  1101    .ENDEF
                           A  1102    
040E7A DDE5                A  1103    	PUSH	IX
040E7C DD210000 00         A  1104    	LD	IX,0
040E81 DD39                A  1105    	ADD	IX,SP
040E83 3B                  A  1106    	DEC	SP
040E84 3B                  A  1107    	DEC	SP
                           A  1108    ;  616		WORD rv;
                           A  1109    ;  617	
                           A  1110    ;  618		rv = ptr[1];
                           A  1111    .LINE 618
                           A  1112    
040E85 DD2706              A  1113    	LD	HL,(IX+%6)
040E88 23                  A  1114    	INC	HL
040E89 4E                  A  1115    	LD	C,(HL)
040E8A 0600                A  1116    	LD	B,%0
040E8C C5E1                A  1117    	LD	HL,BC
040E8E DD75FE              A  1118    	LD	(IX+%FFFFFFFE),L
040E91 DD74FF              A  1119    	LD	(IX+%FFFFFFFF),H
                           A  1120    ;  619		rv = rv << 8 | ptr[0];
                           A  1121    .LINE 619
                           A  1122    
040E94 DD2706              A  1123    	LD	HL,(IX+%6)
040E97 4E                  A  1124    	LD	C,(HL)
040E98 C5D1                A  1125    	LD	DE,BC
040E9A DD27FE              A  1126    	LD	HL,(IX+%FFFFFFFE)
040E9D 65                  A  1127    	LD	H,L
040E9E 2E00                A  1128    	LD	L,%0
040EA0 E5C1                A  1129    	LD	BC,HL
040EA2 D5E1                A  1130    	LD	HL,DE
040EA4 CD 64 47 04         A  1131    	CALL	__sor
040EA8 DD75FE              A  1132    	LD	(IX+%FFFFFFFE),L
040EAB DD74FF              A  1133    	LD	(IX+%FFFFFFFF),H
                           A  1134    ;  620		return rv;
                           A  1135    .LINE 620
                           A  1136    
040EAE DD27FE              A  1137    	LD	HL,(IX+%FFFFFFFE)
                           A  1138    ;  621	}
                           A  1139    .LINE 621
                           A  1140    
040EB1 DDF9                A  1141    	LD	SP,IX
040EB3 DDE1                A  1142    	POP	IX
040EB5 C9                  A  1143    	RET	
                           A  1144    
                           A  1145    
                           A  1146    ;**************************** _ld_word ********
                           A  1147    ;Name                         Addr/Register   S
                           A  1148    ;rv                                    IX-2    
                           A  1149    ;ptr                                   IX+6    
                           A  1150    
                           A  1151    
                           A  1152    ; Stack Frame Size: 11 (bytes)
                           A  1153    ;       Spill Code: 0 (instruction)
                           A  1154    
                           A  1155    
                           A  1156    .ENDFUNC "ld_word",621,"_ld_word"
                           A  1157    ;  622	
                           A  1158    ;  623	static DWORD ld_dword (const BYTE* ptr)
                           A  1159    ;  624	{
040EB6                     A  1160    _ld_dword:
                           A  1161    .DEFINE "_ld_dword"
                           A  1162    
                           A  1163    .VALUE _ld_dword
                           A  1164    
                           A  1165    .CLASS 3
                           A  1166    
                           A  1167    .TYPE 79
                           A  1168    
                           A  1169    .ENDEF
                           A  1170    
                           A  1171    .BEGFUNC "ld_dword",624,"_ld_dword"
                           A  1172    
                           A  1173    .LINE 624
                           A  1174    
                           A  1175    .DEFINE "ptr"
                           A  1176    
                           A  1177    .CLASS 65
                           A  1178    
                           A  1179    .VALUE 6
                           A  1180    
                           A  1181    .TYPE 204
                           A  1182    
                           A  1183    .ENDEF
                           A  1184    
                           A  1185    .DEFINE "rv"
                           A  1186    
                           A  1187    .CLASS 65
                           A  1188    
                           A  1189    .VALUE -4
                           A  1190    
                           A  1191    .TYPE 15
                           A  1192    
                           A  1193    .ENDEF
                           A  1194    
040EB6 DDE5                A  1195    	PUSH	IX
040EB8 DD210000 00         A  1196    	LD	IX,0
040EBD DD39                A  1197    	ADD	IX,SP
040EBF ED22F3              A  1198    	LEA	HL,IX+%FFFFFFF3
040EC2 F9                  A  1199    	LD	SP,HL
                           A  1200    ;  625		DWORD rv;
                           A  1201    ;  626	
                           A  1202    ;  627		rv = ptr[3];
                           A  1203    .LINE 627
                           A  1204    
040EC3 DD3106              A  1205    	LD	IY,(IX+%6)
040EC6 B7ED62              A  1206    	UEXT	HL
040EC9 FD6E03              A  1207    	LD	L,(IY+%3)
040ECC E5C1                A  1208    	LD	BC,HL
040ECE DD0FFC              A  1209    	LD	(IX+%FFFFFFFC),BC
040ED1 DD74FF              A  1210    	LD	(IX+%FFFFFFFF),H
                           A  1211    ;  628		rv = rv << 8 | ptr[2];
                           A  1212    .LINE 628
                           A  1213    
040ED4 B7ED62              A  1214    	UEXT	HL
040ED7 FD6E02              A  1215    	LD	L,(IY+%2)
040EDA DD2FF9              A  1216    	LD	(IX+%FFFFFFF9),HL
040EDD 5C                  A  1217    	LD	E,H
040EDE DD7EFF              A  1218    	LD	A,(IX+%FFFFFFFF)
040EE1 2E08                A  1219    	LD	L,%8
040EE3 CD 07 47 04         A  1220    	CALL	__lshl
040EE7 DD27F9              A  1221    	LD	HL,(IX+%FFFFFFF9)
040EEA CD F5 45 04         A  1222    	CALL	__lor
040EEE E5C1                A  1223    	LD	BC,HL
040EF0 DD0FFC              A  1224    	LD	(IX+%FFFFFFFC),BC
040EF3 DD73FF              A  1225    	LD	(IX+%FFFFFFFF),E
                           A  1226    ;  629		rv = rv << 8 | ptr[1];
                           A  1227    .LINE 629
                           A  1228    
040EF6 B7ED62              A  1229    	UEXT	HL
040EF9 FD6E01              A  1230    	LD	L,(IY+%1)
040EFC DD2FF6              A  1231    	LD	(IX+%FFFFFFF6),HL
040EFF 5C                  A  1232    	LD	E,H
040F00 DD7EFF              A  1233    	LD	A,(IX+%FFFFFFFF)
040F03 2E08                A  1234    	LD	L,%8
040F05 CD 07 47 04         A  1235    	CALL	__lshl
040F09 DD27F6              A  1236    	LD	HL,(IX+%FFFFFFF6)
040F0C CD F5 45 04         A  1237    	CALL	__lor
040F10 DD2FFC              A  1238    	LD	(IX+%FFFFFFFC),HL
040F13 DD73FF              A  1239    	LD	(IX+%FFFFFFFF),E
                           A  1240    ;  630		rv = rv << 8 | ptr[0];
                           A  1241    .LINE 630
                           A  1242    
040F16 E5C1                A  1243    	LD	BC,HL
040F18 DD7EFF              A  1244    	LD	A,(IX+%FFFFFFFF)
040F1B 2E08                A  1245    	LD	L,%8
040F1D CD 07 47 04         A  1246    	CALL	__lshl
040F21 DD0FF3              A  1247    	LD	(IX+%FFFFFFF3),BC
040F24 5F                  A  1248    	LD	E,A
040F25 B7ED62              A  1249    	UEXT	HL
040F28 FD6E00              A  1250    	LD	L,(IY)
040F2B E5C1                A  1251    	LD	BC,HL
040F2D 7C                  A  1252    	LD	A,H
040F2E DD27F3              A  1253    	LD	HL,(IX+%FFFFFFF3)
040F31 CD F5 45 04         A  1254    	CALL	__lor
040F35 DD2FFC              A  1255    	LD	(IX+%FFFFFFFC),HL
040F38 DD73FF              A  1256    	LD	(IX+%FFFFFFFF),E
                           A  1257    ;  631		return rv;
                           A  1258    .LINE 631
                           A  1259    
040F3B DD27FC              A  1260    	LD	HL,(IX+%FFFFFFFC)
040F3E DD5EFF              A  1261    	LD	E,(IX+%FFFFFFFF)
                           A  1262    ;  632	}
                           A  1263    .LINE 632
                           A  1264    
040F41 DDF9                A  1265    	LD	SP,IX
040F43 DDE1                A  1266    	POP	IX
040F45 C9                  A  1267    	RET	
                           A  1268    
                           A  1269    
                           A  1270    ;**************************** _ld_dword *******
                           A  1271    ;Name                         Addr/Register   S
                           A  1272    ;rv                                    IX-4    
                           A  1273    ;ptr                                   IX+6    
                           A  1274    
                           A  1275    
                           A  1276    ; Stack Frame Size: 22 (bytes)
                           A  1277    ;       Spill Code: 0 (instruction)
                           A  1278    
                           A  1279    
                           A  1280    .ENDFUNC "ld_dword",632,"_ld_dword"
                           A  1281    ;  633	
                           A  1282    ;  634	#if FF_FS_EXFAT
                           A  1283    ;  635	static QWORD ld_qword (const BYTE* ptr)
                           A  1284    ;  636	{
                           A  1285    ;  637		QWORD rv;
                           A  1286    ;  638	
                           A  1287    ;  639		rv = ptr[7];
                           A  1288    ;  640		rv = rv << 8 | ptr[6];
                           A  1289    ;  641		rv = rv << 8 | ptr[5];
                           A  1290    ;  642		rv = rv << 8 | ptr[4];
                           A  1291    ;  643		rv = rv << 8 | ptr[3];
                           A  1292    ;  644		rv = rv << 8 | ptr[2];
                           A  1293    ;  645		rv = rv << 8 | ptr[1];
                           A  1294    ;  646		rv = rv << 8 | ptr[0];
                           A  1295    ;  647		return rv;
                           A  1296    ;  648	}
                           A  1297    ;  649	#endif
                           A  1298    ;  650	
                           A  1299    ;  651	#if !FF_FS_READONLY
                           A  1300    ;  652	static void st_word (BYTE* ptr, WORD va
                           A  1301    ;  653	{
                           A  1302    ;  654		*ptr++ = (BYTE)val; val >>= 8;
                           A  1303    ;  655		*ptr++ = (BYTE)val;
                           A  1304    ;  656	}
                           A  1305    ;  657	
                           A  1306    ;  658	static void st_dword (BYTE* ptr, DWORD 
                           A  1307    ;  659	{
                           A  1308    ;  660		*ptr++ = (BYTE)val; val >>= 8;
                           A  1309    ;  661		*ptr++ = (BYTE)val; val >>= 8;
                           A  1310    ;  662		*ptr++ = (BYTE)val; val >>= 8;
                           A  1311    ;  663		*ptr++ = (BYTE)val;
                           A  1312    ;  664	}
                           A  1313    ;  665	
                           A  1314    ;  666	#if FF_FS_EXFAT
                           A  1315    ;  667	static void st_qword (BYTE* ptr, QWORD 
                           A  1316    ;  668	{
                           A  1317    ;  669		*ptr++ = (BYTE)val; val >>= 8;
                           A  1318    ;  670		*ptr++ = (BYTE)val; val >>= 8;
                           A  1319    ;  671		*ptr++ = (BYTE)val; val >>= 8;
                           A  1320    ;  672		*ptr++ = (BYTE)val; val >>= 8;
                           A  1321    ;  673		*ptr++ = (BYTE)val; val >>= 8;
                           A  1322    ;  674		*ptr++ = (BYTE)val; val >>= 8;
                           A  1323    ;  675		*ptr++ = (BYTE)val; val >>= 8;
                           A  1324    ;  676		*ptr++ = (BYTE)val;
                           A  1325    ;  677	}
                           A  1326    ;  678	#endif
                           A  1327    ;  679	#endif	/* !FF_FS_READONLY */
                           A  1328    ;  680	
                           A  1329    ;  681	
                           A  1330    ;  682	
                           A  1331    ;  683	/*-------------------------------------
                           A  1332    ;  684	/* String functions                    
                           A  1333    ;  685	/*-------------------------------------
                           A  1334    ;  686	
                           A  1335    ;  687	/* Test if the byte is DBC 1st byte */
                           A  1336    ;  688	static int dbc_1st (BYTE c)
                           A  1337    ;  689	{
040F46                     A  1338    _dbc_1st:
                           A  1339    .DEFINE "_dbc_1st"
                           A  1340    
                           A  1341    .VALUE _dbc_1st
                           A  1342    
                           A  1343    .CLASS 3
                           A  1344    
                           A  1345    .TYPE 68
                           A  1346    
                           A  1347    .ENDEF
                           A  1348    
                           A  1349    .BEGFUNC "dbc_1st",689,"_dbc_1st"
                           A  1350    
                           A  1351    .LINE 689
                           A  1352    
                           A  1353    .DEFINE "c"
                           A  1354    
                           A  1355    .CLASS 65
                           A  1356    
                           A  1357    .VALUE 6
                           A  1358    
                           A  1359    .TYPE 12
                           A  1360    
                           A  1361    .ENDEF
                           A  1362    
040F46 DDE5                A  1363    	PUSH	IX
040F48 DD210000 00         A  1364    	LD	IX,0
040F4D DD39                A  1365    	ADD	IX,SP
                           A  1366    ;  690	#if FF_CODE_PAGE == 0		/* Variable
                           A  1367    ;  691		if (DbcTbl && c >= DbcTbl[0]) {
                           A  1368    ;  692			if (c <= DbcTbl[1]) return 1;	
                           A  1369    ;  693			if (c >= DbcTbl[2] && c <= DbcT
                           A  1370    ;  694		}
                           A  1371    ;  695	#elif FF_CODE_PAGE >= 900	/* DBCS fix
                           A  1372    ;  696		if (c >= DbcTbl[0]) {
                           A  1373    ;  697			if (c <= DbcTbl[1]) return 1;
                           A  1374    ;  698			if (c >= DbcTbl[2] && c <= DbcT
                           A  1375    ;  699		}
                           A  1376    ;  700	#else						/* SBCS fix
                           A  1377    ;  701		if (c != 0) return 0;	/* Always f
                           A  1378    .LINE 701
                           A  1379    
040F4F DD7E06              A  1380    	LD	A,(IX+%6)
040F52 B7                  A  1381    	OR	A,A
040F53 28 05               A  1382    	JR	Z,L_3
040F55 B7                  A  1383    	OR	A,A
040F56 ED62                A  1384    	SBC	HL,HL
040F58 18 03               A  1385    	JR	L_4
040F5A                     A  1386    L_3:
                           A  1387    ;  702	#endif
                           A  1388    ;  703		return 0;
                           A  1389    .LINE 703
                           A  1390    
040F5A B7                  A  1391    	OR	A,A
040F5B ED62                A  1392    	SBC	HL,HL
                           A  1393    ;  704	}
040F5D                     A  1394    L_4:
                           A  1395    .LINE 704
                           A  1396    
040F5D DDF9                A  1397    	LD	SP,IX
040F5F DDE1                A  1398    	POP	IX
040F61 C9                  A  1399    	RET	
                           A  1400    
                           A  1401    
                           A  1402    ;**************************** _dbc_1st ********
                           A  1403    ;Name                         Addr/Register   S
                           A  1404    ;c                                     IX+6    
                           A  1405    
                           A  1406    
                           A  1407    ; Stack Frame Size: 9 (bytes)
                           A  1408    ;       Spill Code: 0 (instruction)
                           A  1409    
                           A  1410    
                           A  1411    .ENDFUNC "dbc_1st",704,"_dbc_1st"
                           A  1412    ;  705	
                           A  1413    ;  706	
                           A  1414    ;  707	/* Test if the byte is DBC 2nd byte */
                           A  1415    ;  708	static int dbc_2nd (BYTE c)
                           A  1416    ;  709	{
040F62                     A  1417    _dbc_2nd:
                           A  1418    .DEFINE "_dbc_2nd"
                           A  1419    
                           A  1420    .VALUE _dbc_2nd
                           A  1421    
                           A  1422    .CLASS 3
                           A  1423    
                           A  1424    .TYPE 68
                           A  1425    
                           A  1426    .ENDEF
                           A  1427    
                           A  1428    .BEGFUNC "dbc_2nd",709,"_dbc_2nd"
                           A  1429    
                           A  1430    .LINE 709
                           A  1431    
                           A  1432    .DEFINE "c"
                           A  1433    
                           A  1434    .CLASS 65
                           A  1435    
                           A  1436    .VALUE 6
                           A  1437    
                           A  1438    .TYPE 12
                           A  1439    
                           A  1440    .ENDEF
                           A  1441    
040F62 DDE5                A  1442    	PUSH	IX
040F64 DD210000 00         A  1443    	LD	IX,0
040F69 DD39                A  1444    	ADD	IX,SP
                           A  1445    ;  710	#if FF_CODE_PAGE == 0		/* Variable
                           A  1446    ;  711		if (DbcTbl && c >= DbcTbl[4]) {
                           A  1447    ;  712			if (c <= DbcTbl[5]) return 1;	
                           A  1448    ;  713			if (c >= DbcTbl[6] && c <= DbcT
                           A  1449    ;  714			if (c >= DbcTbl[8] && c <= DbcT
                           A  1450    ;  715		}
                           A  1451    ;  716	#elif FF_CODE_PAGE >= 900	/* DBCS fix
                           A  1452    ;  717		if (c >= DbcTbl[4]) {
                           A  1453    ;  718			if (c <= DbcTbl[5]) return 1;
                           A  1454    ;  719			if (c >= DbcTbl[6] && c <= DbcT
                           A  1455    ;  720			if (c >= DbcTbl[8] && c <= DbcT
                           A  1456    ;  721		}
                           A  1457    ;  722	#else						/* SBCS fix
                           A  1458    ;  723		if (c != 0) return 0;	/* Always f
                           A  1459    .LINE 723
                           A  1460    
040F6B DD7E06              A  1461    	LD	A,(IX+%6)
040F6E B7                  A  1462    	OR	A,A
040F6F 28 05               A  1463    	JR	Z,L_6
040F71 B7                  A  1464    	OR	A,A
040F72 ED62                A  1465    	SBC	HL,HL
040F74 18 03               A  1466    	JR	L_7
040F76                     A  1467    L_6:
                           A  1468    ;  724	#endif
                           A  1469    ;  725		return 0;
                           A  1470    .LINE 725
                           A  1471    
040F76 B7                  A  1472    	OR	A,A
040F77 ED62                A  1473    	SBC	HL,HL
                           A  1474    ;  726	}
040F79                     A  1475    L_7:
                           A  1476    .LINE 726
                           A  1477    
040F79 DDF9                A  1478    	LD	SP,IX
040F7B DDE1                A  1479    	POP	IX
040F7D C9                  A  1480    	RET	
                           A  1481    
                           A  1482    
                           A  1483    ;**************************** _dbc_2nd ********
                           A  1484    ;Name                         Addr/Register   S
                           A  1485    ;c                                     IX+6    
                           A  1486    
                           A  1487    
                           A  1488    ; Stack Frame Size: 9 (bytes)
                           A  1489    ;       Spill Code: 0 (instruction)
                           A  1490    
                           A  1491    
                           A  1492    .ENDFUNC "dbc_2nd",726,"_dbc_2nd"
                           A  1493    ;  727	
                           A  1494    ;  728	
                           A  1495    ;  729	#if FF_USE_LFN
                           A  1496    ;  730	
                           A  1497    ;  731	/* Get a Unicode code point from the TC
                           A  1498    ;  732	static DWORD tchar2uni (	/* Returns 
                           A  1499    ;  733		const TCHAR** str		/* Pointer 
                           A  1500    ;  734	)
                           A  1501    ;  735	{
040F7E                     A  1502    _tchar2uni:
                           A  1503    .DEFINE "_tchar2uni"
                           A  1504    
                           A  1505    .VALUE _tchar2uni
                           A  1506    
                           A  1507    .CLASS 3
                           A  1508    
                           A  1509    .TYPE 79
                           A  1510    
                           A  1511    .ENDEF
                           A  1512    
                           A  1513    .BEGFUNC "tchar2uni",735,"_tchar2uni"
                           A  1514    
                           A  1515    .LINE 735
                           A  1516    
                           A  1517    .DEFINE "str"
                           A  1518    
                           A  1519    .CLASS 65
                           A  1520    
                           A  1521    .VALUE 6
                           A  1522    
                           A  1523    .TYPE 1570
                           A  1524    
                           A  1525    .ENDEF
                           A  1526    
                           A  1527    .DEFINE "p"
                           A  1528    
                           A  1529    .CLASS 65
                           A  1530    
                           A  1531    .VALUE -3
                           A  1532    
                           A  1533    .TYPE 194
                           A  1534    
                           A  1535    .ENDEF
                           A  1536    
                           A  1537    .DEFINE "wc"
                           A  1538    
                           A  1539    .CLASS 65
                           A  1540    
                           A  1541    .VALUE -5
                           A  1542    
                           A  1543    .TYPE 13
                           A  1544    
                           A  1545    .ENDEF
                           A  1546    
                           A  1547    .DEFINE "b"
                           A  1548    
                           A  1549    .CLASS 65
                           A  1550    
                           A  1551    .VALUE -6
                           A  1552    
                           A  1553    .TYPE 12
                           A  1554    
                           A  1555    .ENDEF
                           A  1556    
                           A  1557    .DEFINE "uc"
                           A  1558    
                           A  1559    .CLASS 65
                           A  1560    
                           A  1561    .VALUE -10
                           A  1562    
                           A  1563    .TYPE 15
                           A  1564    
                           A  1565    .ENDEF
                           A  1566    
040F7E DDE5                A  1567    	PUSH	IX
040F80 DD210000 00         A  1568    	LD	IX,0
040F85 DD39                A  1569    	ADD	IX,SP
040F87 C5                  A  1570    	PUSH	BC
040F88 C5                  A  1571    	PUSH	BC
040F89 C5                  A  1572    	PUSH	BC
040F8A 3B                  A  1573    	DEC	SP
                           A  1574    ;  736		DWORD uc;
                           A  1575    ;  737		const TCHAR *p = *str;
                           A  1576    .LINE 737
                           A  1577    
040F8B DD2706              A  1578    	LD	HL,(IX+%6)
040F8E ED07                A  1579    	LD	BC,(HL)
040F90 DD0FFD              A  1580    	LD	(IX+%FFFFFFFD),BC
                           A  1581    ;  738	
                           A  1582    ;  739	#if FF_LFN_UNICODE == 1		/* UTF-16 i
                           A  1583    ;  740		WCHAR wc;
                           A  1584    ;  741	
                           A  1585    ;  742		uc = *p++;	/* Get a unit */
                           A  1586    ;  743		if (IsSurrogate(uc)) {	/* Surrogat
                           A  1587    ;  744			wc = *p++;		/* Get low surr
                           A  1588    ;  745			if (!IsSurrogateH(uc) || !IsSur
                           A  1589    ;  746			uc = uc << 16 | wc;
                           A  1590    ;  747		}
                           A  1591    ;  748	
                           A  1592    ;  749	#elif FF_LFN_UNICODE == 2	/* UTF-8 in
                           A  1593    ;  750		BYTE b;
                           A  1594    ;  751		int nf;
                           A  1595    ;  752	
                           A  1596    ;  753		uc = (BYTE)*p++;	/* Get an encod
                           A  1597    ;  754		if (uc & 0x80) {	/* Multiple byt
                           A  1598    ;  755			if        ((uc & 0xE0) == 0xC0)
                           A  1599    ;  756				uc &= 0x1F; nf = 1;
                           A  1600    ;  757			} else if ((uc & 0xF0) == 0xE0)
                           A  1601    ;  758				uc &= 0x0F; nf = 2;
                           A  1602    ;  759			} else if ((uc & 0xF8) == 0xF0)
                           A  1603    ;  760				uc &= 0x07; nf = 3;
                           A  1604    ;  761			} else {						
                           A  1605    ;  762				return 0xFFFFFFFF;
                           A  1606    ;  763			}
                           A  1607    ;  764			do {	/* Get trailing bytes *
                           A  1608    ;  765				b = (BYTE)*p++;
                           A  1609    ;  766				if ((b & 0xC0) != 0x80) ret
                           A  1610    ;  767				uc = uc << 6 | (b & 0x3F);
                           A  1611    ;  768			} while (--nf != 0);
                           A  1612    ;  769			if (uc < 0x80 || IsSurrogate(uc
                           A  1613    ;  770			if (uc >= 0x010000) uc = 0xD800
                           A  1614    ;  771		}
                           A  1615    ;  772	
                           A  1616    ;  773	#elif FF_LFN_UNICODE == 3	/* UTF-32 i
                           A  1617    ;  774		uc = (TCHAR)*p++;	/* Get a unit *
                           A  1618    ;  775		if (uc >= 0x110000 || IsSurrogate(u
                           A  1619    ;  776		if (uc >= 0x010000) uc = 0xD800DC00
                           A  1620    ;  777	
                           A  1621    ;  778	#else		/* ANSI/OEM input */
                           A  1622    ;  779		BYTE b;
                           A  1623    ;  780		WCHAR wc;
                           A  1624    ;  781	
                           A  1625    ;  782		wc = (BYTE)*p++;			/* Get 
                           A  1626    .LINE 782
                           A  1627    
040F93 C5E1                A  1628    	LD	HL,BC
040F95 4E                  A  1629    	LD	C,(HL)
040F96 0600                A  1630    	LD	B,%0
040F98 C5E1                A  1631    	LD	HL,BC
040F9A DD75FB              A  1632    	LD	(IX+%FFFFFFFB),L
040F9D DD74FC              A  1633    	LD	(IX+%FFFFFFFC),H
040FA0 DD07FD              A  1634    	LD	BC,(IX+%FFFFFFFD)
040FA3 03                  A  1635    	INC	BC
040FA4 DD0FFD              A  1636    	LD	(IX+%FFFFFFFD),BC
                           A  1637    ;  783		if (dbc_1st((BYTE)wc)) {	/* Is i
                           A  1638    .LINE 783
                           A  1639    
040FA7 DD4EFB              A  1640    	LD	C,(IX+%FFFFFFFB)
040FAA 0600                A  1641    	LD	B,%0
040FAC C5                  A  1642    	PUSH	BC
040FAD CD 46 0F 04         A  1643    	CALL	_dbc_1st
040FB1 C1                  A  1644    	POP	BC
040FB2 CD 07 46 04         A  1645    	CALL	__icmpzero
040FB6 28 3A               A  1646    	JR	Z,L_15
                           A  1647    ;  784			b = (BYTE)*p++;			/* Get 
                           A  1648    .LINE 784
                           A  1649    
040FB8 DD27FD              A  1650    	LD	HL,(IX+%FFFFFFFD)
040FBB 7E                  A  1651    	LD	A,(HL)
040FBC DD77FA              A  1652    	LD	(IX+%FFFFFFFA),A
040FBF DD07FD              A  1653    	LD	BC,(IX+%FFFFFFFD)
040FC2 03                  A  1654    	INC	BC
040FC3 DD0FFD              A  1655    	LD	(IX+%FFFFFFFD),BC
                           A  1656    ;  785			if (!dbc_2nd(b)) return 0xFFFFF
                           A  1657    .LINE 785
                           A  1658    
040FC6 DD4EFA              A  1659    	LD	C,(IX+%FFFFFFFA)
040FC9 0600                A  1660    	LD	B,%0
040FCB C5                  A  1661    	PUSH	BC
040FCC CD 62 0F 04         A  1662    	CALL	_dbc_2nd
040FD0 C1                  A  1663    	POP	BC
040FD1 CD 07 46 04         A  1664    	CALL	__icmpzero
040FD5 20 08               A  1665    	JR	NZ,L_11
040FD7 21FFFFFF            A  1666    	LD	HL,16777215
040FDB 1EFF                A  1667    	LD	E,%FF
040FDD 18 5E               A  1668    	JR	L_17
040FDF                     A  1669    L_11:
                           A  1670    ;  786			wc = (wc << 8) + b;		/* Make
                           A  1671    .LINE 786
                           A  1672    
040FDF DD27FB              A  1673    	LD	HL,(IX+%FFFFFFFB)
040FE2 65                  A  1674    	LD	H,L
040FE3 2E00                A  1675    	LD	L,%0
040FE5 DD4EFA              A  1676    	LD	C,(IX+%FFFFFFFA)
040FE8 0600                A  1677    	LD	B,%0
040FEA 4009                A  1678    	ADD.SIS	HL,BC
040FEC DD75FB              A  1679    	LD	(IX+%FFFFFFFB),L
040FEF DD74FC              A  1680    	LD	(IX+%FFFFFFFC),H
                           A  1681    ;  787		}
040FF2                     A  1682    L_15:
                           A  1683    .LINE 787
                           A  1684    
                           A  1685    ;  788		if (wc != 0) {
                           A  1686    .LINE 788
                           A  1687    
040FF2 DD27FB              A  1688    	LD	HL,(IX+%FFFFFFFB)
040FF5 CD FA 46 04         A  1689    	CALL	__scmpzero
040FF9 28 26               A  1690    	JR	Z,L_16
                           A  1691    ;  789			wc = ff_oem2uni(wc, CODEPAGE);	
                           A  1692    .LINE 789
                           A  1693    
040FFB 01B50100            A  1694    	LD	BC,437
040FFF C5                  A  1695    	PUSH	BC
041000 DD07FB              A  1696    	LD	BC,(IX+%FFFFFFFB)
041003 C5                  A  1697    	PUSH	BC
041004 CD 25 0C 04         A  1698    	CALL	_ff_oem2uni
041008 C1                  A  1699    	POP	BC
041009 C1                  A  1700    	POP	BC
04100A DD75FB              A  1701    	LD	(IX+%FFFFFFFB),L
04100D DD74FC              A  1702    	LD	(IX+%FFFFFFFC),H
                           A  1703    ;  790			if (wc == 0) return 0xFFFFFFFF;
                           A  1704    .LINE 790
                           A  1705    
041010 DD27FB              A  1706    	LD	HL,(IX+%FFFFFFFB)
041013 CD FA 46 04         A  1707    	CALL	__scmpzero
041017 20 08               A  1708    	JR	NZ,L_16
041019 21FFFFFF            A  1709    	LD	HL,16777215
04101D 1EFF                A  1710    	LD	E,%FF
04101F 18 1C               A  1711    	JR	L_17
                           A  1712    ;  791		}
041021                     A  1713    L_16:
                           A  1714    .LINE 791
                           A  1715    
                           A  1716    ;  792		uc = wc;
                           A  1717    .LINE 792
                           A  1718    
041021 DD07FB              A  1719    	LD	BC,(IX+%FFFFFFFB)
041024 CD 95 44 04         A  1720    	CALL	__stoiu
041028 AF                  A  1721    	XOR	A,A
041029 DD2FF6              A  1722    	LD	(IX+%FFFFFFF6),HL
04102C DD77F9              A  1723    	LD	(IX+%FFFFFFF9),A
                           A  1724    ;  793	
                           A  1725    ;  794	#endif
                           A  1726    ;  795		*str = p;	/* Next read pointer */
                           A  1727    .LINE 795
                           A  1728    
04102F DD2706              A  1729    	LD	HL,(IX+%6)
041032 DD07FD              A  1730    	LD	BC,(IX+%FFFFFFFD)
041035 ED0F                A  1731    	LD	(HL),BC
                           A  1732    ;  796		return uc;
                           A  1733    .LINE 796
                           A  1734    
041037 DD27F6              A  1735    	LD	HL,(IX+%FFFFFFF6)
04103A DD5EF9              A  1736    	LD	E,(IX+%FFFFFFF9)
                           A  1737    ;  797	}
04103D                     A  1738    L_17:
                           A  1739    .LINE 797
                           A  1740    
04103D DDF9                A  1741    	LD	SP,IX
04103F DDE1                A  1742    	POP	IX
041041 C9                  A  1743    	RET	
                           A  1744    
                           A  1745    
                           A  1746    ;**************************** _tchar2uni ******
                           A  1747    ;Name                         Addr/Register   S
                           A  1748    ;_ff_oem2uni                         IMPORT  --
                           A  1749    ;uc                                   IX-10    
                           A  1750    ;b                                     IX-6    
                           A  1751    ;wc                                    IX-5    
                           A  1752    ;p                                     IX-3    
                           A  1753    ;str                                   IX+6    
                           A  1754    
                           A  1755    
                           A  1756    ; Stack Frame Size: 19 (bytes)
                           A  1757    ;       Spill Code: 0 (instruction)
                           A  1758    
                           A  1759    
                           A  1760    .ENDFUNC "tchar2uni",797,"_tchar2uni"
                           A  1761    ;  798	
                           A  1762    ;  799	
                           A  1763    ;  800	/* Store a Unicode char in defined API 
                           A  1764    ;  801	static UINT put_utf (	/* Returns numb
                           A  1765    ;  802		DWORD chr,	/* UTF-16 encoded chara
                           A  1766    ;  803		TCHAR* buf,	/* Output buffer */
                           A  1767    ;  804		UINT szb	/* Size of the buffer *
                           A  1768    ;  805	)
                           A  1769    ;  806	{
041042                     A  1770    _put_utf:
                           A  1771    .DEFINE "_put_utf"
                           A  1772    
                           A  1773    .VALUE _put_utf
                           A  1774    
                           A  1775    .CLASS 3
                           A  1776    
                           A  1777    .TYPE 78
                           A  1778    
                           A  1779    .ENDEF
                           A  1780    
                           A  1781    .BEGFUNC "put_utf",806,"_put_utf"
                           A  1782    
                           A  1783    .LINE 806
                           A  1784    
                           A  1785    .DEFINE "chr"
                           A  1786    
                           A  1787    .CLASS 65
                           A  1788    
                           A  1789    .VALUE 6
                           A  1790    
                           A  1791    .TYPE 15
                           A  1792    
                           A  1793    .ENDEF
                           A  1794    
                           A  1795    .DEFINE "buf"
                           A  1796    
                           A  1797    .CLASS 65
                           A  1798    
                           A  1799    .VALUE 12
                           A  1800    
                           A  1801    .TYPE 34
                           A  1802    
                           A  1803    .ENDEF
                           A  1804    
                           A  1805    .DEFINE "szb"
                           A  1806    
                           A  1807    .CLASS 65
                           A  1808    
                           A  1809    .VALUE 15
                           A  1810    
                           A  1811    .TYPE 14
                           A  1812    
                           A  1813    .ENDEF
                           A  1814    
                           A  1815    .DEFINE "wc"
                           A  1816    
                           A  1817    .CLASS 65
                           A  1818    
                           A  1819    .VALUE -2
                           A  1820    
                           A  1821    .TYPE 13
                           A  1822    
                           A  1823    .ENDEF
                           A  1824    
041042 DDE5                A  1825    	PUSH	IX
041044 DD210000 00         A  1826    	LD	IX,0
041049 DD39                A  1827    	ADD	IX,SP
04104B 3B                  A  1828    	DEC	SP
04104C 3B                  A  1829    	DEC	SP
                           A  1830    ;  807	#if FF_LFN_UNICODE == 1	/* UTF-16 outpu
                           A  1831    ;  808		WCHAR hs, wc;
                           A  1832    ;  809	
                           A  1833    ;  810		hs = (WCHAR)(chr >> 16);
                           A  1834    ;  811		wc = (WCHAR)chr;
                           A  1835    ;  812		if (hs == 0) {	/* Single encoding 
                           A  1836    ;  813			if (szb < 1 || IsSurrogate(wc))
                           A  1837    ;  814			*buf = wc;
                           A  1838    ;  815			return 1;
                           A  1839    ;  816		}
                           A  1840    ;  817		if (szb < 2 || !IsSurrogateH(hs) ||
                           A  1841    ;  818		*buf++ = hs;
                           A  1842    ;  819		*buf++ = wc;
                           A  1843    ;  820		return 2;
                           A  1844    ;  821	
                           A  1845    ;  822	#elif FF_LFN_UNICODE == 2	/* UTF-8 ou
                           A  1846    ;  823		DWORD hc;
                           A  1847    ;  824	
                           A  1848    ;  825		if (chr < 0x80) {	/* Single byte 
                           A  1849    ;  826			if (szb < 1) return 0;	/* Buff
                           A  1850    ;  827			*buf = (TCHAR)chr;
                           A  1851    ;  828			return 1;
                           A  1852    ;  829		}
                           A  1853    ;  830		if (chr < 0x800) {	/* 2-byte seque
                           A  1854    ;  831			if (szb < 2) return 0;	/* Buff
                           A  1855    ;  832			*buf++ = (TCHAR)(0xC0 | (chr >>
                           A  1856    ;  833			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  1857    ;  834			return 2;
                           A  1858    ;  835		}
                           A  1859    ;  836		if (chr < 0x10000) {	/* 3-byte s
                           A  1860    ;  837			if (szb < 3 || IsSurrogate(chr)
                           A  1861    ;  838			*buf++ = (TCHAR)(0xE0 | (chr >>
                           A  1862    ;  839			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  1863    ;  840			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  1864    ;  841			return 3;
                           A  1865    ;  842		}
                           A  1866    ;  843		/* 4-byte sequence */
                           A  1867    ;  844		if (szb < 4) return 0;	/* Buffer o
                           A  1868    ;  845		hc = ((chr & 0xFFFF0000) - 0xD80000
                           A  1869    ;  846		chr = (chr & 0xFFFF) - 0xDC00;		
                           A  1870    ;  847		if (hc >= 0x100000 || chr >= 0x400)
                           A  1871    ;  848		chr = (hc | chr) + 0x10000;
                           A  1872    ;  849		*buf++ = (TCHAR)(0xF0 | (chr >> 18 
                           A  1873    ;  850		*buf++ = (TCHAR)(0x80 | (chr >> 12 
                           A  1874    ;  851		*buf++ = (TCHAR)(0x80 | (chr >> 6 &
                           A  1875    ;  852		*buf++ = (TCHAR)(0x80 | (chr >> 0 &
                           A  1876    ;  853		return 4;
                           A  1877    ;  854	
                           A  1878    ;  855	#elif FF_LFN_UNICODE == 3	/* UTF-32 o
                           A  1879    ;  856		DWORD hc;
                           A  1880    ;  857	
                           A  1881    ;  858		if (szb < 1) return 0;	/* Buffer o
                           A  1882    ;  859		if (chr >= 0x10000) {	/* Out of B
                           A  1883    ;  860			hc = ((chr & 0xFFFF0000) - 0xD8
                           A  1884    ;  861			chr = (chr & 0xFFFF) - 0xDC00;	
                           A  1885    ;  862			if (hc >= 0x100000 || chr >= 0x
                           A  1886    ;  863			chr = (hc | chr) + 0x10000;
                           A  1887    ;  864		}
                           A  1888    ;  865		*buf++ = (TCHAR)chr;
                           A  1889    ;  866		return 1;
                           A  1890    ;  867	
                           A  1891    ;  868	#else						/* ANSI/OEM
                           A  1892    ;  869		WCHAR wc;
                           A  1893    ;  870	
                           A  1894    ;  871		wc = ff_uni2oem(chr, CODEPAGE);
                           A  1895    .LINE 871
                           A  1896    
04104D 01B50100            A  1897    	LD	BC,437
041051 C5                  A  1898    	PUSH	BC
041052 DD4E09              A  1899    	LD	C,(IX+%9)
041055 0600                A  1900    	LD	B,%0
041057 C5                  A  1901    	PUSH	BC
041058 DD0706              A  1902    	LD	BC,(IX+%6)
04105B C5                  A  1903    	PUSH	BC
04105C CD 7A 0B 04         A  1904    	CALL	_ff_uni2oem
041060 C1                  A  1905    	POP	BC
041061 C1                  A  1906    	POP	BC
041062 C1                  A  1907    	POP	BC
041063 DD75FE              A  1908    	LD	(IX+%FFFFFFFE),L
041066 DD74FF              A  1909    	LD	(IX+%FFFFFFFF),H
                           A  1910    ;  872		if (wc >= 0x100) {	/* Is this a DB
                           A  1911    .LINE 872
                           A  1912    
041069 49010001            A  1913    	LD.LIS	BC,256
04106D DD27FE              A  1914    	LD	HL,(IX+%FFFFFFFE)
041070 B7                  A  1915    	OR	A,A
041071 40ED42              A  1916    	SBC.SIS	HL,BC
041074 38 37               A  1917    	JR	C,L_25
                           A  1918    ;  873			if (szb < 2) return 0;
                           A  1919    .LINE 873
                           A  1920    
041076 01020000            A  1921    	LD	BC,2
04107A DD270F              A  1922    	LD	HL,(IX+%F)
04107D B7                  A  1923    	OR	A,A
04107E ED42                A  1924    	SBC	HL,BC
041080 30 05               A  1925    	JR	NC,L_20
041082 B7                  A  1926    	OR	A,A
041083 ED62                A  1927    	SBC	HL,HL
041085 18 4B               A  1928    	JR	L_28
041087                     A  1929    L_20:
                           A  1930    ;  874			*buf++ = (char)(wc >> 8);	/* 
                           A  1931    .LINE 874
                           A  1932    
041087 DD07FE              A  1933    	LD	BC,(IX+%FFFFFFFE)
04108A CD 95 44 04         A  1934    	CALL	__stoiu
04108E 3E08                A  1935    	LD	A,%8
041090 CD 05 44 04         A  1936    	CALL	__ishrs_b
041094 DD310C              A  1937    	LD	IY,(IX+%C)
041097 FD7500              A  1938    	LD	(IY),L
04109A DD070C              A  1939    	LD	BC,(IX+%C)
04109D 03                  A  1940    	INC	BC
04109E DD0F0C              A  1941    	LD	(IX+%C),BC
                           A  1942    ;  875			*buf++ = (TCHAR)wc;			/* 
                           A  1943    .LINE 875
                           A  1944    
0410A1 DD7EFE              A  1945    	LD	A,(IX+%FFFFFFFE)
0410A4 C5E1                A  1946    	LD	HL,BC
0410A6 77                  A  1947    	LD	(HL),A
                           A  1948    ;  876			return 2;
                           A  1949    .LINE 876
                           A  1950    
0410A7 21020000            A  1951    	LD	HL,2
0410AB 18 25               A  1952    	JR	L_28
                           A  1953    ;  877		}
0410AD                     A  1954    L_25:
                           A  1955    .LINE 877
                           A  1956    
                           A  1957    ;  878		if (wc == 0 || szb < 1) return 0;	
                           A  1958    .LINE 878
                           A  1959    
0410AD DD27FE              A  1960    	LD	HL,(IX+%FFFFFFFE)
0410B0 CD FA 46 04         A  1961    	CALL	__scmpzero
0410B4 28 0C               A  1962    	JR	Z,L_24
0410B6 01010000            A  1963    	LD	BC,1
0410BA DD270F              A  1964    	LD	HL,(IX+%F)
0410BD B7                  A  1965    	OR	A,A
0410BE ED42                A  1966    	SBC	HL,BC
0410C0 30 05               A  1967    	JR	NC,L_27
0410C2                     A  1968    L_24:
0410C2 B7                  A  1969    	OR	A,A
0410C3 ED62                A  1970    	SBC	HL,HL
0410C5 18 0B               A  1971    	JR	L_28
0410C7                     A  1972    L_27:
                           A  1973    ;  879		*buf++ = (TCHAR)wc;					
                           A  1974    .LINE 879
                           A  1975    
0410C7 DD7EFE              A  1976    	LD	A,(IX+%FFFFFFFE)
0410CA DD270C              A  1977    	LD	HL,(IX+%C)
0410CD 77                  A  1978    	LD	(HL),A
                           A  1979    ;  880		return 1;
                           A  1980    .LINE 880
                           A  1981    
0410CE 21010000            A  1982    	LD	HL,1
                           A  1983    ;  881	#endif
                           A  1984    ;  882	}
0410D2                     A  1985    L_28:
                           A  1986    .LINE 882
                           A  1987    
0410D2 DDF9                A  1988    	LD	SP,IX
0410D4 DDE1                A  1989    	POP	IX
0410D6 C9                  A  1990    	RET	
                           A  1991    
                           A  1992    
                           A  1993    ;**************************** _put_utf ********
                           A  1994    ;Name                         Addr/Register   S
                           A  1995    ;_ff_uni2oem                         IMPORT  --
                           A  1996    ;wc                                    IX-2    
                           A  1997    ;szb                                  IX+15    
                           A  1998    ;buf                                  IX+12    
                           A  1999    ;chr                                   IX+6    
                           A  2000    
                           A  2001    
                           A  2002    ; Stack Frame Size: 20 (bytes)
                           A  2003    ;       Spill Code: 0 (instruction)
                           A  2004    
                           A  2005    
                           A  2006    .ENDFUNC "put_utf",882,"_put_utf"
                           A  2007    ;  883	#endif	/* FF_USE_LFN */
                           A  2008    ;  884	
                           A  2009    ;  885	
                           A  2010    ;  886	#if FF_FS_REENTRANT
                           A  2011    ;  887	/*-------------------------------------
                           A  2012    ;  888	/* Request/Release grant to access the 
                           A  2013    ;  889	/*-------------------------------------
                           A  2014    ;  890	static int lock_fs (		/* 1:Ok, 0:
                           A  2015    ;  891		FATFS* fs		/* Filesystem objec
                           A  2016    ;  892	)
                           A  2017    ;  893	{
                           A  2018    ;  894		return ff_req_grant(fs->sobj);
                           A  2019    ;  895	}
                           A  2020    ;  896	
                           A  2021    ;  897	
                           A  2022    ;  898	static void unlock_fs (
                           A  2023    ;  899		FATFS* fs,		/* Filesystem objec
                           A  2024    ;  900		FRESULT res		/* Result code to b
                           A  2025    ;  901	)
                           A  2026    ;  902	{
                           A  2027    ;  903		if (fs && res != FR_NOT_ENABLED && 
                           A  2028    ;  904			ff_rel_grant(fs->sobj);
                           A  2029    ;  905		}
                           A  2030    ;  906	}
                           A  2031    ;  907	
                           A  2032    ;  908	#endif
                           A  2033    ;  909	
                           A  2034    ;  910	
                           A  2035    ;  911	
                           A  2036    ;  912	#if FF_FS_LOCK != 0
                           A  2037    ;  913	/*-------------------------------------
                           A  2038    ;  914	/* File lock control functions         
                           A  2039    ;  915	/*-------------------------------------
                           A  2040    ;  916	
                           A  2041    ;  917	static FRESULT chk_lock (	/* Check if
                           A  2042    ;  918		DIR* dp,		/* Directory object
                           A  2043    ;  919		int acc			/* Desired access t
                           A  2044    ;  920	)
                           A  2045    ;  921	{
                           A  2046    ;  922		UINT i, be;
                           A  2047    ;  923	
                           A  2048    ;  924		/* Search open object table for the
                           A  2049    ;  925		be = 0;
                           A  2050    ;  926		for (i = 0; i < FF_FS_LOCK; i++) {
                           A  2051    ;  927			if (Files[i].fs) {	/* Existing
                           A  2052    ;  928				if (Files[i].fs == dp->obj.
                           A  2053    ;  929					Files[i].clu == dp->obj
                           A  2054    ;  930					Files[i].ofs == dp->dpt
                           A  2055    ;  931			} else {			/* Blank en
                           A  2056    ;  932				be = 1;
                           A  2057    ;  933			}
                           A  2058    ;  934		}
                           A  2059    ;  935		if (i == FF_FS_LOCK) {	/* The obje
                           A  2060    ;  936			return (!be && acc != 2) ? FR_T
                           A  2061    ;  937		}
                           A  2062    ;  938	
                           A  2063    ;  939		/* The object was opened. Reject an
                           A  2064    ;  940		return (acc != 0 || Files[i].ctr ==
                           A  2065    ;  941	}
                           A  2066    ;  942	
                           A  2067    ;  943	
                           A  2068    ;  944	static int enq_lock (void)	/* Check if
                           A  2069    ;  945	{
                           A  2070    ;  946		UINT i;
                           A  2071    ;  947	
                           A  2072    ;  948		for (i = 0; i < FF_FS_LOCK && Files
                           A  2073    ;  949		return (i == FF_FS_LOCK) ? 0 : 1;
                           A  2074    ;  950	}
                           A  2075    ;  951	
                           A  2076    ;  952	
                           A  2077    ;  953	static UINT inc_lock (	/* Increment ob
                           A  2078    ;  954		DIR* dp,	/* Directory object poi
                           A  2079    ;  955		int acc		/* Desired access (0:Re
                           A  2080    ;  956	)
                           A  2081    ;  957	{
                           A  2082    ;  958		UINT i;
                           A  2083    ;  959	
                           A  2084    ;  960	
                           A  2085    ;  961		for (i = 0; i < FF_FS_LOCK; i++) {	
                           A  2086    ;  962			if (Files[i].fs == dp->obj.fs
                           A  2087    ;  963			 && Files[i].clu == dp->obj.scl
                           A  2088    ;  964			 && Files[i].ofs == dp->dptr) b
                           A  2089    ;  965		}
                           A  2090    ;  966	
                           A  2091    ;  967		if (i == FF_FS_LOCK) {			/* 
                           A  2092    ;  968			for (i = 0; i < FF_FS_LOCK && F
                           A  2093    ;  969			if (i == FF_FS_LOCK) return 0;	
                           A  2094    ;  970			Files[i].fs = dp->obj.fs;
                           A  2095    ;  971			Files[i].clu = dp->obj.sclust;
                           A  2096    ;  972			Files[i].ofs = dp->dptr;
                           A  2097    ;  973			Files[i].ctr = 0;
                           A  2098    ;  974		}
                           A  2099    ;  975	
                           A  2100    ;  976		if (acc >= 1 && Files[i].ctr) retur
                           A  2101    ;  977	
                           A  2102    ;  978		Files[i].ctr = acc ? 0x100 : Files[
                           A  2103    ;  979	
                           A  2104    ;  980		return i + 1;	/* Index number ori
                           A  2105    ;  981	}
                           A  2106    ;  982	
                           A  2107    ;  983	
                           A  2108    ;  984	static FRESULT dec_lock (	/* Decremen
                           A  2109    ;  985		UINT i			/* Semaphore index 
                           A  2110    ;  986	)
                           A  2111    ;  987	{
                           A  2112    ;  988		WORD n;
                           A  2113    ;  989		FRESULT res;
                           A  2114    ;  990	
                           A  2115    ;  991	
                           A  2116    ;  992		if (--i < FF_FS_LOCK) {	/* Index nu
                           A  2117    ;  993			n = Files[i].ctr;
                           A  2118    ;  994			if (n == 0x100) n = 0;	/* If w
                           A  2119    ;  995			if (n > 0) n--;			/* Decr
                           A  2120    ;  996			Files[i].ctr = n;
                           A  2121    ;  997			if (n == 0) Files[i].fs = 0;	
                           A  2122    ;  998			res = FR_OK;
                           A  2123    ;  999		} else {
                           A  2124    ; 1000			res = FR_INT_ERR;		/* Inva
                           A  2125    ; 1001		}
                           A  2126    ; 1002		return res;
                           A  2127    ; 1003	}
                           A  2128    ; 1004	
                           A  2129    ; 1005	
                           A  2130    ; 1006	static void clear_lock (	/* Clear lo
                           A  2131    ; 1007		FATFS *fs
                           A  2132    ; 1008	)
                           A  2133    ; 1009	{
                           A  2134    ; 1010		UINT i;
                           A  2135    ; 1011	
                           A  2136    ; 1012		for (i = 0; i < FF_FS_LOCK; i++) {
                           A  2137    ; 1013			if (Files[i].fs == fs) Files[i]
                           A  2138    ; 1014		}
                           A  2139    ; 1015	}
                           A  2140    ; 1016	
                           A  2141    ; 1017	#endif	/* FF_FS_LOCK != 0 */
                           A  2142    ; 1018	
                           A  2143    ; 1019	
                           A  2144    ; 1020	
                           A  2145    ; 1021	/*-------------------------------------
                           A  2146    ; 1022	/* Move/Flush disk access window in the
                           A  2147    ; 1023	/*-------------------------------------
                           A  2148    ; 1024	#if !FF_FS_READONLY
                           A  2149    ; 1025	static FRESULT sync_window (	/* Retu
                           A  2150    ; 1026		FATFS* fs			/* Filesystem o
                           A  2151    ; 1027	)
                           A  2152    ; 1028	{
                           A  2153    ; 1029		FRESULT res = FR_OK;
                           A  2154    ; 1030	
                           A  2155    ; 1031	
                           A  2156    ; 1032		if (fs->wflag) {	/* Is the disk 
                           A  2157    ; 1033			if (disk_write(fs->pdrv, fs->wi
                           A  2158    ; 1034				fs->wflag = 0;	/* Clear wi
                           A  2159    ; 1035				if (fs->winsect - fs->fatba
                           A  2160    ; 1036					if (fs->n_fats == 2) di
                           A  2161    ; 1037				}
                           A  2162    ; 1038			} else {
                           A  2163    ; 1039				res = FR_DISK_ERR;
                           A  2164    ; 1040			}
                           A  2165    ; 1041		}
                           A  2166    ; 1042		return res;
                           A  2167    ; 1043	}
                           A  2168    ; 1044	#endif
                           A  2169    ; 1045	
                           A  2170    ; 1046	
                           A  2171    ; 1047	static FRESULT move_window (	/* Retu
                           A  2172    ; 1048		FATFS* fs,		/* Filesystem objec
                           A  2173    ; 1049		LBA_t sect		/* Sector LBA to ma
                           A  2174    ; 1050	)
                           A  2175    ; 1051	{
0410D7                     A  2176    _move_window:
                           A  2177    .DEFINE "_move_window"
                           A  2178    
                           A  2179    .VALUE _move_window
                           A  2180    
                           A  2181    .CLASS 3
                           A  2182    
                           A  2183    .TYPE 68
                           A  2184    
                           A  2185    .ENDEF
                           A  2186    
                           A  2187    .BEGFUNC "move_window",1051,"_move_window"
                           A  2188    
                           A  2189    .LINE 1051
                           A  2190    
                           A  2191    .DEFINE "fs"
                           A  2192    
                           A  2193    .CLASS 65
                           A  2194    
                           A  2195    .VALUE 6
                           A  2196    
                           A  2197    .TAG "NONAME0"
                           A  2198    
                           A  2199    .TYPE 40
                           A  2200    
                           A  2201    .ENDEF
                           A  2202    
                           A  2203    .DEFINE "sect"
                           A  2204    
                           A  2205    .CLASS 65
                           A  2206    
                           A  2207    .VALUE 9
                           A  2208    
                           A  2209    .TYPE 15
                           A  2210    
                           A  2211    .ENDEF
                           A  2212    
                           A  2213    .DEFINE "res"
                           A  2214    
                           A  2215    .CLASS 65
                           A  2216    
                           A  2217    .VALUE -3
                           A  2218    
                           A  2219    .TYPE 4
                           A  2220    
                           A  2221    .ENDEF
                           A  2222    
0410D7 DDE5                A  2223    	PUSH	IX
0410D9 DD210000 00         A  2224    	LD	IX,0
0410DE DD39                A  2225    	ADD	IX,SP
0410E0 C5                  A  2226    	PUSH	BC
                           A  2227    ; 1052		FRESULT res = FR_OK;
                           A  2228    .LINE 1052
                           A  2229    
0410E1 01000000            A  2230    	LD	BC,0
0410E5 DD0FFD              A  2231    	LD	(IX+%FFFFFFFD),BC
                           A  2232    ; 1053	
                           A  2233    ; 1054	
                           A  2234    ; 1055		if (sect != fs->winsect) {	/* Wind
                           A  2235    .LINE 1055
                           A  2236    
0410E8 DD3106              A  2237    	LD	IY,(IX+%6)
0410EB FD272A              A  2238    	LD	HL,(IY+%2A)
0410EE FD5E2D              A  2239    	LD	E,(IY+%2D)
0410F1 DD0709              A  2240    	LD	BC,(IX+%9)
0410F4 DD7E0C              A  2241    	LD	A,(IX+%C)
0410F7 CD AA 46 04         A  2242    	CALL	__lcmpu
0410FB 28 4C               A  2243    	JR	Z,L_33
                           A  2244    ; 1056	#if !FF_FS_READONLY
                           A  2245    ; 1057			res = sync_window(fs);		/* 
                           A  2246    ; 1058	#endif
                           A  2247    ; 1059			if (res == FR_OK) {			/* 
                           A  2248    ; 1060				if (disk_read(fs->pdrv, fs-
                           A  2249    .LINE 1060
                           A  2250    
0410FD 01010000            A  2251    	LD	BC,1
041101 C5                  A  2252    	PUSH	BC
041102 DD4E0C              A  2253    	LD	C,(IX+%C)
041105 0600                A  2254    	LD	B,%0
041107 C5                  A  2255    	PUSH	BC
041108 DD0709              A  2256    	LD	BC,(IX+%9)
04110B C5                  A  2257    	PUSH	BC
04110C DD3106              A  2258    	LD	IY,(IX+%6)
04110F ED662E              A  2259    	PEA	IY+%2E
041112 FD4E01              A  2260    	LD	C,(IY+%1)
041115 0600                A  2261    	LD	B,%0
041117 C5                  A  2262    	PUSH	BC
041118 CD 20 3E 04         A  2263    	CALL	_disk_read
04111C C1                  A  2264    	POP	BC
04111D C1                  A  2265    	POP	BC
04111E C1                  A  2266    	POP	BC
04111F C1                  A  2267    	POP	BC
041120 C1                  A  2268    	POP	BC
041121 CD 07 46 04         A  2269    	CALL	__icmpzero
041125 28 13               A  2270    	JR	Z,L_30
                           A  2271    ; 1061					sect = (LBA_t)0 - 1;	
                           A  2272    .LINE 1061
                           A  2273    
041127 01FFFFFF            A  2274    	LD	BC,16777215
04112B 3EFF                A  2275    	LD	A,%FF
04112D DD0F09              A  2276    	LD	(IX+%9),BC
041130 DD770C              A  2277    	LD	(IX+%C),A
                           A  2278    ; 1062					res = FR_DISK_ERR;
                           A  2279    .LINE 1062
                           A  2280    
041133 01010000            A  2281    	LD	BC,1
041137 DD0FFD              A  2282    	LD	(IX+%FFFFFFFD),BC
                           A  2283    ; 1063				}
04113A                     A  2284    L_30:
                           A  2285    .LINE 1063
                           A  2286    
                           A  2287    ; 1064				fs->winsect = sect;
                           A  2288    .LINE 1064
                           A  2289    
04113A DD0709              A  2290    	LD	BC,(IX+%9)
04113D DD7E0C              A  2291    	LD	A,(IX+%C)
041140 DD3106              A  2292    	LD	IY,(IX+%6)
041143 FD0F2A              A  2293    	LD	(IY+%2A),BC
041146 FD772D              A  2294    	LD	(IY+%2D),A
                           A  2295    ; 1065			}
                           A  2296    ; 1066		}
041149                     A  2297    L_33:
                           A  2298    .LINE 1066
                           A  2299    
                           A  2300    ; 1067		return res;
                           A  2301    .LINE 1067
                           A  2302    
041149 DD27FD              A  2303    	LD	HL,(IX+%FFFFFFFD)
                           A  2304    ; 1068	}
                           A  2305    .LINE 1068
                           A  2306    
04114C DDF9                A  2307    	LD	SP,IX
04114E DDE1                A  2308    	POP	IX
041150 C9                  A  2309    	RET	
                           A  2310    
                           A  2311    
                           A  2312    ;**************************** _move_window ****
                           A  2313    ;Name                         Addr/Register   S
                           A  2314    ;_disk_read                          IMPORT  --
                           A  2315    ;res                                   IX-3    
                           A  2316    ;sect                                  IX+9    
                           A  2317    ;fs                                    IX+6    
                           A  2318    
                           A  2319    
                           A  2320    ; Stack Frame Size: 18 (bytes)
                           A  2321    ;       Spill Code: 0 (instruction)
                           A  2322    
                           A  2323    
                           A  2324    .ENDFUNC "move_window",1068,"_move_window"
                           A  2325    ; 1069	
                           A  2326    ; 1070	
                           A  2327    ; 1071	
                           A  2328    ; 1072	
                           A  2329    ; 1073	#if !FF_FS_READONLY
                           A  2330    ; 1074	/*-------------------------------------
                           A  2331    ; 1075	/* Synchronize filesystem and data on t
                           A  2332    ; 1076	/*-------------------------------------
                           A  2333    ; 1077	
                           A  2334    ; 1078	static FRESULT sync_fs (	/* Returns 
                           A  2335    ; 1079		FATFS* fs		/* Filesystem objec
                           A  2336    ; 1080	)
                           A  2337    ; 1081	{
                           A  2338    ; 1082		FRESULT res;
                           A  2339    ; 1083	
                           A  2340    ; 1084	
                           A  2341    ; 1085		res = sync_window(fs);
                           A  2342    ; 1086		if (res == FR_OK) {
                           A  2343    ; 1087			if (fs->fs_type == FS_FAT32 && 
                           A  2344    ; 1088				/* Create FSInfo structure 
                           A  2345    ; 1089				memset(fs->win, 0, sizeof f
                           A  2346    ; 1090				st_word(fs->win + BS_55AA, 
                           A  2347    ; 1091				st_dword(fs->win + FSI_Lead
                           A  2348    ; 1092				st_dword(fs->win + FSI_Stru
                           A  2349    ; 1093				st_dword(fs->win + FSI_Free
                           A  2350    ; 1094				st_dword(fs->win + FSI_Nxt_
                           A  2351    ; 1095				fs->winsect = fs->volbase +
                           A  2352    ; 1096				disk_write(fs->pdrv, fs->wi
                           A  2353    ; 1097				fs->fsi_flag = 0;
                           A  2354    ; 1098			}
                           A  2355    ; 1099			/* Make sure that no pending wr
                           A  2356    ; 1100			if (disk_ioctl(fs->pdrv, CTRL_S
                           A  2357    ; 1101		}
                           A  2358    ; 1102	
                           A  2359    ; 1103		return res;
                           A  2360    ; 1104	}
                           A  2361    ; 1105	
                           A  2362    ; 1106	#endif
                           A  2363    ; 1107	
                           A  2364    ; 1108	
                           A  2365    ; 1109	
                           A  2366    ; 1110	/*-------------------------------------
                           A  2367    ; 1111	/* Get physical sector number from clus
                           A  2368    ; 1112	/*-------------------------------------
                           A  2369    ; 1113	
                           A  2370    ; 1114	static LBA_t clst2sect (	/* !=0:Sect
                           A  2371    ; 1115		FATFS* fs,		/* Filesystem objec
                           A  2372    ; 1116		DWORD clst		/* Cluster# to be c
                           A  2373    ; 1117	)
                           A  2374    ; 1118	{
041151                     A  2375    _clst2sect:
                           A  2376    .DEFINE "_clst2sect"
                           A  2377    
                           A  2378    .VALUE _clst2sect
                           A  2379    
                           A  2380    .CLASS 3
                           A  2381    
                           A  2382    .TYPE 79
                           A  2383    
                           A  2384    .ENDEF
                           A  2385    
                           A  2386    .BEGFUNC "clst2sect",1118,"_clst2sect"
                           A  2387    
                           A  2388    .LINE 1118
                           A  2389    
                           A  2390    .DEFINE "fs"
                           A  2391    
                           A  2392    .CLASS 65
                           A  2393    
                           A  2394    .VALUE 6
                           A  2395    
                           A  2396    .TAG "NONAME0"
                           A  2397    
                           A  2398    .TYPE 40
                           A  2399    
                           A  2400    .ENDEF
                           A  2401    
                           A  2402    .DEFINE "clst"
                           A  2403    
                           A  2404    .CLASS 65
                           A  2405    
                           A  2406    .VALUE 9
                           A  2407    
                           A  2408    .TYPE 15
                           A  2409    
                           A  2410    .ENDEF
                           A  2411    
041151 DDE5                A  2412    	PUSH	IX
041153 DD210000 00         A  2413    	LD	IX,0
041158 DD39                A  2414    	ADD	IX,SP
                           A  2415    ; 1119		clst -= 2;		/* Cluster number i
                           A  2416    .LINE 1119
                           A  2417    
04115A DD2709              A  2418    	LD	HL,(IX+%9)
04115D DD5E0C              A  2419    	LD	E,(IX+%C)
041160 01020000            A  2420    	LD	BC,2
041164 AF                  A  2421    	XOR	A,A
041165 CD 9D 45 04         A  2422    	CALL	__lsub
041169 DD2F09              A  2423    	LD	(IX+%9),HL
04116C DD730C              A  2424    	LD	(IX+%C),E
                           A  2425    ; 1120		if (clst >= fs->n_fatent - 2) retur
                           A  2426    .LINE 1120
                           A  2427    
04116F DD3106              A  2428    	LD	IY,(IX+%6)
041172 FD2712              A  2429    	LD	HL,(IY+%12)
041175 FD5E15              A  2430    	LD	E,(IY+%15)
041178 01020000            A  2431    	LD	BC,2
04117C AF                  A  2432    	XOR	A,A
04117D CD 9D 45 04         A  2433    	CALL	__lsub
041181 7B                  A  2434    	LD	A,E
041182 E5C1                A  2435    	LD	BC,HL
041184 DD2709              A  2436    	LD	HL,(IX+%9)
041187 DD5E0C              A  2437    	LD	E,(IX+%C)
04118A CD AA 46 04         A  2438    	CALL	__lcmpu
04118E 38 07               A  2439    	JR	C,L_36
041190 B7                  A  2440    	OR	A,A
041191 ED62                A  2441    	SBC	HL,HL
041193 1E00                A  2442    	LD	E,%0
041195 18 20               A  2443    	JR	L_37
041197                     A  2444    L_36:
                           A  2445    ; 1121		return fs->database + (LBA_t)fs->cs
                           A  2446    .LINE 1121
                           A  2447    
041197 DD3106              A  2448    	LD	IY,(IX+%6)
04119A FD0709              A  2449    	LD	BC,(IY+%9)
04119D CD 95 44 04         A  2450    	CALL	__stoiu
0411A1 1E00                A  2451    	LD	E,%0
0411A3 DD0709              A  2452    	LD	BC,(IX+%9)
0411A6 DD7E0C              A  2453    	LD	A,(IX+%C)
0411A9 CD DF 47 04         A  2454    	CALL	__lmulu
0411AD FD0726              A  2455    	LD	BC,(IY+%26)
0411B0 FD7E29              A  2456    	LD	A,(IY+%29)
0411B3 CD C7 43 04         A  2457    	CALL	__ladd
                           A  2458    ; 1122	}
0411B7                     A  2459    L_37:
                           A  2460    .LINE 1122
                           A  2461    
0411B7 DDF9                A  2462    	LD	SP,IX
0411B9 DDE1                A  2463    	POP	IX
0411BB C9                  A  2464    	RET	
                           A  2465    
                           A  2466    
                           A  2467    ;**************************** _clst2sect ******
                           A  2468    ;Name                         Addr/Register   S
                           A  2469    ;clst                                  IX+9    
                           A  2470    ;fs                                    IX+6    
                           A  2471    
                           A  2472    
                           A  2473    ; Stack Frame Size: 15 (bytes)
                           A  2474    ;       Spill Code: 0 (instruction)
                           A  2475    
                           A  2476    
                           A  2477    .ENDFUNC "clst2sect",1122,"_clst2sect"
                           A  2478    ; 1123	
                           A  2479    ; 1124	
                           A  2480    ; 1125	
                           A  2481    ; 1126	
                           A  2482    ; 1127	/*-------------------------------------
                           A  2483    ; 1128	/* FAT access - Read value of an FAT en
                           A  2484    ; 1129	/*-------------------------------------
                           A  2485    ; 1130	
                           A  2486    ; 1131	static DWORD get_fat (		/* 0xFFFFFF
                           A  2487    ; 1132		FFOBJID* obj,	/* Corresponding ob
                           A  2488    ; 1133		DWORD clst		/* Cluster number t
                           A  2489    ; 1134	)
                           A  2490    ; 1135	{
0411BC                     A  2491    _get_fat:
                           A  2492    .DEFINE "_get_fat"
                           A  2493    
                           A  2494    .VALUE _get_fat
                           A  2495    
                           A  2496    .CLASS 3
                           A  2497    
                           A  2498    .TYPE 79
                           A  2499    
                           A  2500    .ENDEF
                           A  2501    
                           A  2502    .BEGFUNC "get_fat",1135,"_get_fat"
                           A  2503    
                           A  2504    .LINE 1135
                           A  2505    
                           A  2506    .DEFINE "obj"
                           A  2507    
                           A  2508    .CLASS 65
                           A  2509    
                           A  2510    .VALUE 6
                           A  2511    
                           A  2512    .TAG "NONAME1"
                           A  2513    
                           A  2514    .TYPE 40
                           A  2515    
                           A  2516    .ENDEF
                           A  2517    
                           A  2518    .DEFINE "clst"
                           A  2519    
                           A  2520    .CLASS 65
                           A  2521    
                           A  2522    .VALUE 9
                           A  2523    
                           A  2524    .TYPE 15
                           A  2525    
                           A  2526    .ENDEF
                           A  2527    
                           A  2528    .DEFINE "fs"
                           A  2529    
                           A  2530    .CLASS 65
                           A  2531    
                           A  2532    .VALUE -3
                           A  2533    
                           A  2534    .TAG "NONAME0"
                           A  2535    
                           A  2536    .TYPE 40
                           A  2537    
                           A  2538    .ENDEF
                           A  2539    
                           A  2540    .DEFINE "bc"
                           A  2541    
                           A  2542    .CLASS 65
                           A  2543    
                           A  2544    .VALUE -6
                           A  2545    
                           A  2546    .TYPE 14
                           A  2547    
                           A  2548    .ENDEF
                           A  2549    
                           A  2550    .DEFINE "val"
                           A  2551    
                           A  2552    .CLASS 65
                           A  2553    
                           A  2554    .VALUE -10
                           A  2555    
                           A  2556    .TYPE 15
                           A  2557    
                           A  2558    .ENDEF
                           A  2559    
                           A  2560    .DEFINE "wc"
                           A  2561    
                           A  2562    .CLASS 65
                           A  2563    
                           A  2564    .VALUE -13
                           A  2565    
                           A  2566    .TYPE 14
                           A  2567    
                           A  2568    .ENDEF
                           A  2569    
0411BC DDE5                A  2570    	PUSH	IX
0411BE DD210000 00         A  2571    	LD	IX,0
0411C3 DD39                A  2572    	ADD	IX,SP
0411C5 ED22F0              A  2573    	LEA	HL,IX+%FFFFFFF0
0411C8 F9                  A  2574    	LD	SP,HL
                           A  2575    ; 1136		UINT wc, bc;
                           A  2576    ; 1137		DWORD val;
                           A  2577    ; 1138		FATFS *fs = obj->fs;
                           A  2578    .LINE 1138
                           A  2579    
0411C9 DD3106              A  2580    	LD	IY,(IX+%6)
0411CC FD0700              A  2581    	LD	BC,(IY+%0)
0411CF DD0FFD              A  2582    	LD	(IX+%FFFFFFFD),BC
                           A  2583    ; 1139	
                           A  2584    ; 1140	
                           A  2585    ; 1141		if (clst < 2 || clst >= fs->n_faten
                           A  2586    .LINE 1141
                           A  2587    
0411D2 DD2709              A  2588    	LD	HL,(IX+%9)
0411D5 DD5E0C              A  2589    	LD	E,(IX+%C)
0411D8 01020000            A  2590    	LD	BC,2
0411DC AF                  A  2591    	XOR	A,A
0411DD CD AA 46 04         A  2592    	CALL	__lcmpu
0411E1 38 15               A  2593    	JR	C,L_56
0411E3 DD2709              A  2594    	LD	HL,(IX+%9)
0411E6 DD5E0C              A  2595    	LD	E,(IX+%C)
0411E9 DD31FD              A  2596    	LD	IY,(IX+%FFFFFFFD)
0411EC FD0712              A  2597    	LD	BC,(IY+%12)
0411EF FD7E15              A  2598    	LD	A,(IY+%15)
0411F2 CD AA 46 04         A  2599    	CALL	__lcmpu
0411F6 38 0F               A  2600    	JR	C,L_57
0411F8                     A  2601    L_56:
                           A  2602    ; 1142			val = 1;	/* Internal error *
                           A  2603    .LINE 1142
                           A  2604    
0411F8 01010000            A  2605    	LD	BC,1
0411FC AF                  A  2606    	XOR	A,A
0411FD DD0FF6              A  2607    	LD	(IX+%FFFFFFF6),BC
041200 DD77F9              A  2608    	LD	(IX+%FFFFFFF9),A
                           A  2609    ; 1143	
                           A  2610    ; 1144		} else {
                           A  2611    .LINE 1144
                           A  2612    
041203 C3 FE 13 04         A  2613    	JR	L_58
041207                     A  2614    L_57:
                           A  2615    ; 1145			val = 0xFFFFFFFF;	/* Default 
                           A  2616    .LINE 1145
                           A  2617    
041207 01FFFFFF            A  2618    	LD	BC,16777215
04120B 3EFF                A  2619    	LD	A,%FF
04120D DD0FF6              A  2620    	LD	(IX+%FFFFFFF6),BC
041210 DD77F9              A  2621    	LD	(IX+%FFFFFFF9),A
                           A  2622    ; 1146	
                           A  2623    ; 1147			switch (fs->fs_type) {
                           A  2624    .LINE 1147
                           A  2625    
041213 DD31FD              A  2626    	LD	IY,(IX+%FFFFFFFD)
041216 FD7E00              A  2627    	LD	A,(IY+%0)
041219 B7ED62              A  2628    	UEXT	HL
04121C 6F                  A  2629    	LD	L,A
04121D CD 2A 44 04         A  2630    	CALL	__seqcaseD
041221 E9                  A  2631    	JP	(HL)
041222                     A  2632    L__23:
041222 0300                A  2633    	DW	3
041224 0100                A  2634    	DW	1
041226 00                  A  2635    	DB	0
041227 331204              A  2636    	DW24	L_39	
                           A  2637    
04122A 241304              A  2638    	DW24	L_49	
                           A  2639    
04122D 8B1304              A  2640    	DW24	L_52	
                           A  2641    
041230 F31304              A  2642    	DW24	L_55	
                           A  2643    
                           A  2644    ; 1148			case FS_FAT12 :
041233                     A  2645    L_39:
                           A  2646    .LINE 1148
                           A  2647    
                           A  2648    ; 1149				bc = (UINT)clst; bc += bc /
                           A  2649    .LINE 1149
                           A  2650    
041233 DD2709              A  2651    	LD	HL,(IX+%9)
041236 3E01                A  2652    	LD	A,%1
041238 CD 7E 46 04         A  2653    	CALL	__ishru_b
04123C DD0709              A  2654    	LD	BC,(IX+%9)
04123F 09                  A  2655    	ADD	HL,BC
041240 DD2FFA              A  2656    	LD	(IX+%FFFFFFFA),HL
                           A  2657    ; 1150				if (move_window(fs, fs->fat
                           A  2658    .LINE 1150
                           A  2659    
041243 3E09                A  2660    	LD	A,%9
041245 CD 7E 46 04         A  2661    	CALL	__ishru_b
041249 E5C1                A  2662    	LD	BC,HL
04124B AF                  A  2663    	XOR	A,A
04124C DD31FD              A  2664    	LD	IY,(IX+%FFFFFFFD)
04124F FD271E              A  2665    	LD	HL,(IY+%1E)
041252 FD5E21              A  2666    	LD	E,(IY+%21)
041255 CD C7 43 04         A  2667    	CALL	__ladd
041259 4B                  A  2668    	LD	C,E
04125A 0600                A  2669    	LD	B,%0
04125C C5                  A  2670    	PUSH	BC
04125D E5                  A  2671    	PUSH	HL
04125E DD07FD              A  2672    	LD	BC,(IX+%FFFFFFFD)
041261 C5                  A  2673    	PUSH	BC
041262 CD D7 10 04         A  2674    	CALL	_move_window
041266 C1                  A  2675    	POP	BC
041267 C1                  A  2676    	POP	BC
041268 C1                  A  2677    	POP	BC
041269 CD 07 46 04         A  2678    	CALL	__icmpzero
04126D C2 FE 13 04         A  2679    	JR	NZ,L_58
                           A  2680    ; 1151				wc = fs->win[bc++ % SS(fs)]
                           A  2681    .LINE 1151
                           A  2682    
041271 01FF0100            A  2683    	LD	BC,511
041275 DD27FA              A  2684    	LD	HL,(IX+%FFFFFFFA)
041278 CD 16 47 04         A  2685    	CALL	__iand
04127C E5C1                A  2686    	LD	BC,HL
04127E DD31FD              A  2687    	LD	IY,(IX+%FFFFFFFD)
041281 ED232E              A  2688    	LEA	HL,IY+%2E
041284 09                  A  2689    	ADD	HL,BC
041285 7E                  A  2690    	LD	A,(HL)
041286 B7ED62              A  2691    	UEXT	HL
041289 6F                  A  2692    	LD	L,A
04128A DD2FF3              A  2693    	LD	(IX+%FFFFFFF3),HL
04128D DD07FA              A  2694    	LD	BC,(IX+%FFFFFFFA)
041290 03                  A  2695    	INC	BC
041291 DD0FFA              A  2696    	LD	(IX+%FFFFFFFA),BC
                           A  2697    ; 1152				if (move_window(fs, fs->fat
                           A  2698    .LINE 1152
                           A  2699    
041294 C5E1                A  2700    	LD	HL,BC
041296 3E09                A  2701    	LD	A,%9
041298 CD 7E 46 04         A  2702    	CALL	__ishru_b
04129C E5C1                A  2703    	LD	BC,HL
04129E AF                  A  2704    	XOR	A,A
04129F FD271E              A  2705    	LD	HL,(IY+%1E)
0412A2 FD5E21              A  2706    	LD	E,(IY+%21)
0412A5 CD C7 43 04         A  2707    	CALL	__ladd
0412A9 4B                  A  2708    	LD	C,E
0412AA 0600                A  2709    	LD	B,%0
0412AC C5                  A  2710    	PUSH	BC
0412AD E5                  A  2711    	PUSH	HL
0412AE DD07FD              A  2712    	LD	BC,(IX+%FFFFFFFD)
0412B1 C5                  A  2713    	PUSH	BC
0412B2 CD D7 10 04         A  2714    	CALL	_move_window
0412B6 C1                  A  2715    	POP	BC
0412B7 C1                  A  2716    	POP	BC
0412B8 C1                  A  2717    	POP	BC
0412B9 CD 07 46 04         A  2718    	CALL	__icmpzero
0412BD C2 FE 13 04         A  2719    	JR	NZ,L_58
                           A  2720    ; 1153				wc |= fs->win[bc % SS(fs)] 
                           A  2721    .LINE 1153
                           A  2722    
0412C1 01FF0100            A  2723    	LD	BC,511
0412C5 DD27FA              A  2724    	LD	HL,(IX+%FFFFFFFA)
0412C8 CD 16 47 04         A  2725    	CALL	__iand
0412CC E5C1                A  2726    	LD	BC,HL
0412CE DD31FD              A  2727    	LD	IY,(IX+%FFFFFFFD)
0412D1 ED232E              A  2728    	LEA	HL,IY+%2E
0412D4 09                  A  2729    	ADD	HL,BC
0412D5 7E                  A  2730    	LD	A,(HL)
0412D6 B7ED62              A  2731    	UEXT	HL
0412D9 6F                  A  2732    	LD	L,A
0412DA 3E08                A  2733    	LD	A,%8
0412DC CD 52 47 04         A  2734    	CALL	__ishl_b
0412E0 DD07F3              A  2735    	LD	BC,(IX+%FFFFFFF3)
0412E3 CD 7A 44 04         A  2736    	CALL	__ior
0412E7 DD2FF3              A  2737    	LD	(IX+%FFFFFFF3),HL
                           A  2738    ; 1154				val = (clst & 1) ? (wc >> 4
                           A  2739    .LINE 1154
                           A  2740    
0412EA DD7E09              A  2741    	LD	A,(IX+%9)
0412ED E601                A  2742    	AND	A,%1
0412EF B7ED62              A  2743    	UEXT	HL
0412F2 6F                  A  2744    	LD	L,A
0412F3 5C                  A  2745    	LD	E,H
0412F4 CD DA 44 04         A  2746    	CALL	__lcmpzero
0412F8 28 0E               A  2747    	JR	Z,L_47
0412FA DD27F3              A  2748    	LD	HL,(IX+%FFFFFFF3)
0412FD 3E04                A  2749    	LD	A,%4
0412FF CD 7E 46 04         A  2750    	CALL	__ishru_b
041303 DD2FF0              A  2751    	LD	(IX+%FFFFFFF0),HL
041306 18 0E               A  2752    	JR	L_48
041308                     A  2753    L_47:
041308 01FF0F00            A  2754    	LD	BC,4095
04130C DD27F3              A  2755    	LD	HL,(IX+%FFFFFFF3)
04130F CD 16 47 04         A  2756    	CALL	__iand
041313 DD2FF0              A  2757    	LD	(IX+%FFFFFFF0),HL
041316                     A  2758    L_48:
041316 DD07F0              A  2759    	LD	BC,(IX+%FFFFFFF0)
041319 AF                  A  2760    	XOR	A,A
04131A DD0FF6              A  2761    	LD	(IX+%FFFFFFF6),BC
04131D DD77F9              A  2762    	LD	(IX+%FFFFFFF9),A
                           A  2763    ; 1155				break;
                           A  2764    .LINE 1155
                           A  2765    
041320 C3 FE 13 04         A  2766    	JR	L_58
                           A  2767    ; 1156	
                           A  2768    ; 1157			case FS_FAT16 :
041324                     A  2769    L_49:
                           A  2770    .LINE 1157
                           A  2771    
                           A  2772    ; 1158				if (move_window(fs, fs->fat
                           A  2773    .LINE 1158
                           A  2774    
041324 DD0709              A  2775    	LD	BC,(IX+%9)
041327 DD7E0C              A  2776    	LD	A,(IX+%C)
04132A 2E08                A  2777    	LD	L,%8
04132C CD A9 45 04         A  2778    	CALL	__lshru
041330 DD31FD              A  2779    	LD	IY,(IX+%FFFFFFFD)
041333 FD271E              A  2780    	LD	HL,(IY+%1E)
041336 FD5E21              A  2781    	LD	E,(IY+%21)
041339 CD C7 43 04         A  2782    	CALL	__ladd
04133D 4B                  A  2783    	LD	C,E
04133E 0600                A  2784    	LD	B,%0
041340 C5                  A  2785    	PUSH	BC
041341 E5                  A  2786    	PUSH	HL
041342 DD07FD              A  2787    	LD	BC,(IX+%FFFFFFFD)
041345 C5                  A  2788    	PUSH	BC
041346 CD D7 10 04         A  2789    	CALL	_move_window
04134A C1                  A  2790    	POP	BC
04134B C1                  A  2791    	POP	BC
04134C C1                  A  2792    	POP	BC
04134D CD 07 46 04         A  2793    	CALL	__icmpzero
041351 C2 FE 13 04         A  2794    	JR	NZ,L_58
                           A  2795    ; 1159				val = ld_word(fs->win + cls
                           A  2796    .LINE 1159
                           A  2797    
041355 DD2709              A  2798    	LD	HL,(IX+%9)
041358 DD5E0C              A  2799    	LD	E,(IX+%C)
04135B 01020000            A  2800    	LD	BC,2
04135F AF                  A  2801    	XOR	A,A
041360 CD DF 47 04         A  2802    	CALL	__lmulu
041364 01FF0100            A  2803    	LD	BC,511
041368 AF                  A  2804    	XOR	A,A
041369 CD D6 47 04         A  2805    	CALL	__land
04136D E5C1                A  2806    	LD	BC,HL
04136F DD31FD              A  2807    	LD	IY,(IX+%FFFFFFFD)
041372 ED232E              A  2808    	LEA	HL,IY+%2E
041375 09                  A  2809    	ADD	HL,BC
041376 E5                  A  2810    	PUSH	HL
041377 CD 7A 0E 04         A  2811    	CALL	_ld_word
04137B C1                  A  2812    	POP	BC
04137C E5C1                A  2813    	LD	BC,HL
04137E CD 95 44 04         A  2814    	CALL	__stoiu
041382 AF                  A  2815    	XOR	A,A
041383 DD2FF6              A  2816    	LD	(IX+%FFFFFFF6),HL
041386 DD77F9              A  2817    	LD	(IX+%FFFFFFF9),A
                           A  2818    ; 1160				break;
                           A  2819    .LINE 1160
                           A  2820    
041389 18 73               A  2821    	JR	L_58
                           A  2822    ; 1161	
                           A  2823    ; 1162			case FS_FAT32 :
04138B                     A  2824    L_52:
                           A  2825    .LINE 1162
                           A  2826    
                           A  2827    ; 1163				if (move_window(fs, fs->fat
                           A  2828    .LINE 1163
                           A  2829    
04138B DD0709              A  2830    	LD	BC,(IX+%9)
04138E DD7E0C              A  2831    	LD	A,(IX+%C)
041391 2E07                A  2832    	LD	L,%7
041393 CD A9 45 04         A  2833    	CALL	__lshru
041397 DD31FD              A  2834    	LD	IY,(IX+%FFFFFFFD)
04139A FD271E              A  2835    	LD	HL,(IY+%1E)
04139D FD5E21              A  2836    	LD	E,(IY+%21)
0413A0 CD C7 43 04         A  2837    	CALL	__ladd
0413A4 4B                  A  2838    	LD	C,E
0413A5 0600                A  2839    	LD	B,%0
0413A7 C5                  A  2840    	PUSH	BC
0413A8 E5                  A  2841    	PUSH	HL
0413A9 DD07FD              A  2842    	LD	BC,(IX+%FFFFFFFD)
0413AC C5                  A  2843    	PUSH	BC
0413AD CD D7 10 04         A  2844    	CALL	_move_window
0413B1 C1                  A  2845    	POP	BC
0413B2 C1                  A  2846    	POP	BC
0413B3 C1                  A  2847    	POP	BC
0413B4 CD 07 46 04         A  2848    	CALL	__icmpzero
0413B8 20 44               A  2849    	JR	NZ,L_58
                           A  2850    ; 1164				val = ld_dword(fs->win + cl
                           A  2851    .LINE 1164
                           A  2852    
0413BA DD2709              A  2853    	LD	HL,(IX+%9)
0413BD DD5E0C              A  2854    	LD	E,(IX+%C)
0413C0 01040000            A  2855    	LD	BC,4
0413C4 AF                  A  2856    	XOR	A,A
0413C5 CD DF 47 04         A  2857    	CALL	__lmulu
0413C9 01FF0100            A  2858    	LD	BC,511
0413CD AF                  A  2859    	XOR	A,A
0413CE CD D6 47 04         A  2860    	CALL	__land
0413D2 E5C1                A  2861    	LD	BC,HL
0413D4 DD31FD              A  2862    	LD	IY,(IX+%FFFFFFFD)
0413D7 ED232E              A  2863    	LEA	HL,IY+%2E
0413DA 09                  A  2864    	ADD	HL,BC
0413DB E5                  A  2865    	PUSH	HL
0413DC CD B6 0E 04         A  2866    	CALL	_ld_dword
0413E0 C1                  A  2867    	POP	BC
0413E1 01FFFFFF            A  2868    	LD	BC,16777215
0413E5 3E0F                A  2869    	LD	A,%F
0413E7 CD D6 47 04         A  2870    	CALL	__land
0413EB DD2FF6              A  2871    	LD	(IX+%FFFFFFF6),HL
0413EE DD73F9              A  2872    	LD	(IX+%FFFFFFF9),E
                           A  2873    ; 1165				break;
                           A  2874    .LINE 1165
                           A  2875    
0413F1 18 0B               A  2876    	JR	L_58
                           A  2877    ; 1166	#if FF_FS_EXFAT
                           A  2878    ; 1167			case FS_EXFAT :
                           A  2879    ; 1168				if ((obj->objsize != 0 && o
                           A  2880    ; 1169					DWORD cofs = clst - obj
                           A  2881    ; 1170					DWORD clen = (DWORD)((L
                           A  2882    ; 1171	
                           A  2883    ; 1172					if (obj->stat == 2 && c
                           A  2884    ; 1173						val = (cofs == clen
                           A  2885    ; 1174						break;
                           A  2886    ; 1175					}
                           A  2887    ; 1176					if (obj->stat == 3 && c
                           A  2888    ; 1177						val = clst + 1; 	
                           A  2889    ; 1178						break;
                           A  2890    ; 1179					}
                           A  2891    ; 1180					if (obj->stat != 2) {	
                           A  2892    ; 1181						if (obj->n_frag != 
                           A  2893    ; 1182							val = 0x7FFFFFF
                           A  2894    ; 1183						} else {
                           A  2895    ; 1184							if (move_window
                           A  2896    ; 1185							val = ld_dword(
                           A  2897    ; 1186						}
                           A  2898    ; 1187						break;
                           A  2899    ; 1188					}
                           A  2900    ; 1189				}
                           A  2901    ; 1190				val = 1;	/* Internal err
                           A  2902    ; 1191				break;
                           A  2903    ; 1192	#endif
                           A  2904    ; 1193			default:
0413F3                     A  2905    L_55:
                           A  2906    .LINE 1193
                           A  2907    
                           A  2908    ; 1194				val = 1;	/* Internal err
                           A  2909    .LINE 1194
                           A  2910    
0413F3 01010000            A  2911    	LD	BC,1
0413F7 AF                  A  2912    	XOR	A,A
0413F8 DD0FF6              A  2913    	LD	(IX+%FFFFFFF6),BC
0413FB DD77F9              A  2914    	LD	(IX+%FFFFFFF9),A
                           A  2915    ; 1195			}
                           A  2916    ; 1196		}
0413FE                     A  2917    L_58:
                           A  2918    .LINE 1196
                           A  2919    
                           A  2920    ; 1197	
                           A  2921    ; 1198		return val;
                           A  2922    .LINE 1198
                           A  2923    
0413FE DD27F6              A  2924    	LD	HL,(IX+%FFFFFFF6)
041401 DD5EF9              A  2925    	LD	E,(IX+%FFFFFFF9)
                           A  2926    ; 1199	}
                           A  2927    .LINE 1199
                           A  2928    
041404 DDF9                A  2929    	LD	SP,IX
041406 DDE1                A  2930    	POP	IX
041408 C9                  A  2931    	RET	
                           A  2932    
                           A  2933    
                           A  2934    ;**************************** _get_fat ********
                           A  2935    ;Name                         Addr/Register   S
                           A  2936    ;temp45                               IX-16    
                           A  2937    ;wc                                   IX-13    
                           A  2938    ;val                                  IX-10    
                           A  2939    ;bc                                    IX-6    
                           A  2940    ;fs                                    IX-3    
                           A  2941    ;clst                                  IX+9    
                           A  2942    ;obj                                   IX+6    
                           A  2943    
                           A  2944    
                           A  2945    ; Stack Frame Size: 31 (bytes)
                           A  2946    ;       Spill Code: 0 (instruction)
                           A  2947    
                           A  2948    
                           A  2949    .ENDFUNC "get_fat",1199,"_get_fat"
                           A  2950    ; 1200	
                           A  2951    ; 1201	
                           A  2952    ; 1202	
                           A  2953    ; 1203	
                           A  2954    ; 1204	#if !FF_FS_READONLY
                           A  2955    ; 1205	/*-------------------------------------
                           A  2956    ; 1206	/* FAT access - Change value of an FAT 
                           A  2957    ; 1207	/*-------------------------------------
                           A  2958    ; 1208	
                           A  2959    ; 1209	static FRESULT put_fat (	/* FR_OK(0)
                           A  2960    ; 1210		FATFS* fs,		/* Corresponding fi
                           A  2961    ; 1211		DWORD clst,		/* FAT index number
                           A  2962    ; 1212		DWORD val		/* New value to be 
                           A  2963    ; 1213	)
                           A  2964    ; 1214	{
                           A  2965    ; 1215		UINT bc;
                           A  2966    ; 1216		BYTE *p;
                           A  2967    ; 1217		FRESULT res = FR_INT_ERR;
                           A  2968    ; 1218	
                           A  2969    ; 1219	
                           A  2970    ; 1220		if (clst >= 2 && clst < fs->n_faten
                           A  2971    ; 1221			switch (fs->fs_type) {
                           A  2972    ; 1222			case FS_FAT12:
                           A  2973    ; 1223				bc = (UINT)clst; bc += bc /
                           A  2974    ; 1224				res = move_window(fs, fs->f
                           A  2975    ; 1225				if (res != FR_OK) break;
                           A  2976    ; 1226				p = fs->win + bc++ % SS(fs)
                           A  2977    ; 1227				*p = (clst & 1) ? ((*p & 0x
                           A  2978    ; 1228				fs->wflag = 1;
                           A  2979    ; 1229				res = move_window(fs, fs->f
                           A  2980    ; 1230				if (res != FR_OK) break;
                           A  2981    ; 1231				p = fs->win + bc % SS(fs);
                           A  2982    ; 1232				*p = (clst & 1) ? (BYTE)(va
                           A  2983    ; 1233				fs->wflag = 1;
                           A  2984    ; 1234				break;
                           A  2985    ; 1235	
                           A  2986    ; 1236			case FS_FAT16:
                           A  2987    ; 1237				res = move_window(fs, fs->f
                           A  2988    ; 1238				if (res != FR_OK) break;
                           A  2989    ; 1239				st_word(fs->win + clst * 2 
                           A  2990    ; 1240				fs->wflag = 1;
                           A  2991    ; 1241				break;
                           A  2992    ; 1242	
                           A  2993    ; 1243			case FS_FAT32:
                           A  2994    ; 1244	#if FF_FS_EXFAT
                           A  2995    ; 1245			case FS_EXFAT:
                           A  2996    ; 1246	#endif
                           A  2997    ; 1247				res = move_window(fs, fs->f
                           A  2998    ; 1248				if (res != FR_OK) break;
                           A  2999    ; 1249				if (!FF_FS_EXFAT || fs->fs_
                           A  3000    ; 1250					val = (val & 0x0FFFFFFF
                           A  3001    ; 1251				}
                           A  3002    ; 1252				st_dword(fs->win + clst * 4
                           A  3003    ; 1253				fs->wflag = 1;
                           A  3004    ; 1254				break;
                           A  3005    ; 1255			}
                           A  3006    ; 1256		}
                           A  3007    ; 1257		return res;
                           A  3008    ; 1258	}
                           A  3009    ; 1259	
                           A  3010    ; 1260	#endif /* !FF_FS_READONLY */
                           A  3011    ; 1261	
                           A  3012    ; 1262	
                           A  3013    ; 1263	
                           A  3014    ; 1264	
                           A  3015    ; 1265	#if FF_FS_EXFAT && !FF_FS_READONLY
                           A  3016    ; 1266	/*-------------------------------------
                           A  3017    ; 1267	/* exFAT: Accessing FAT and Allocation 
                           A  3018    ; 1268	/*-------------------------------------
                           A  3019    ; 1269	
                           A  3020    ; 1270	/*-------------------------------------
                           A  3021    ; 1271	/* Find a contiguous free cluster block
                           A  3022    ; 1272	/*-------------------------------------
                           A  3023    ; 1273	
                           A  3024    ; 1274	static DWORD find_bitmap (	/* 0:Not fo
                           A  3025    ; 1275		FATFS* fs,	/* Filesystem object */
                           A  3026    ; 1276		DWORD clst,	/* Cluster number to sc
                           A  3027    ; 1277		DWORD ncl	/* Number of contiguous
                           A  3028    ; 1278	)
                           A  3029    ; 1279	{
                           A  3030    ; 1280		BYTE bm, bv;
                           A  3031    ; 1281		UINT i;
                           A  3032    ; 1282		DWORD val, scl, ctr;
                           A  3033    ; 1283	
                           A  3034    ; 1284	
                           A  3035    ; 1285		clst -= 2;	/* The first bit in the
                           A  3036    ; 1286		if (clst >= fs->n_fatent - 2) clst 
                           A  3037    ; 1287		scl = val = clst; ctr = 0;
                           A  3038    ; 1288		for (;;) {
                           A  3039    ; 1289			if (move_window(fs, fs->bitbase
                           A  3040    ; 1290			i = val / 8 % SS(fs); bm = 1 <<
                           A  3041    ; 1291			do {
                           A  3042    ; 1292				do {
                           A  3043    ; 1293					bv = fs->win[i] & bm; b
                           A  3044    ; 1294					if (++val >= fs->n_fate
                           A  3045    ; 1295						val = 0; bm = 0; i 
                           A  3046    ; 1296					}
                           A  3047    ; 1297					if (bv == 0) {	/* Is i
                           A  3048    ; 1298						if (++ctr == ncl) r
                           A  3049    ; 1299					} else {
                           A  3050    ; 1300						scl = val; ctr = 0;
                           A  3051    ; 1301					}
                           A  3052    ; 1302					if (val == clst) return
                           A  3053    ; 1303				} while (bm != 0);
                           A  3054    ; 1304				bm = 1;
                           A  3055    ; 1305			} while (++i < SS(fs));
                           A  3056    ; 1306		}
                           A  3057    ; 1307	}
                           A  3058    ; 1308	
                           A  3059    ; 1309	
                           A  3060    ; 1310	/*-------------------------------------
                           A  3061    ; 1311	/* Set/Clear a block of allocation bitm
                           A  3062    ; 1312	/*-------------------------------------
                           A  3063    ; 1313	
                           A  3064    ; 1314	static FRESULT change_bitmap (
                           A  3065    ; 1315		FATFS* fs,	/* Filesystem object */
                           A  3066    ; 1316		DWORD clst,	/* Cluster number to ch
                           A  3067    ; 1317		DWORD ncl,	/* Number of clusters t
                           A  3068    ; 1318		int bv		/* bit value to be set 
                           A  3069    ; 1319	)
                           A  3070    ; 1320	{
                           A  3071    ; 1321		BYTE bm;
                           A  3072    ; 1322		UINT i;
                           A  3073    ; 1323		LBA_t sect;
                           A  3074    ; 1324	
                           A  3075    ; 1325	
                           A  3076    ; 1326		clst -= 2;	/* The first bit corres
                           A  3077    ; 1327		sect = fs->bitbase + clst / 8 / SS(
                           A  3078    ; 1328		i = clst / 8 % SS(fs);				
                           A  3079    ; 1329		bm = 1 << (clst % 8);				
                           A  3080    ; 1330		for (;;) {
                           A  3081    ; 1331			if (move_window(fs, sect++) != 
                           A  3082    ; 1332			do {
                           A  3083    ; 1333				do {
                           A  3084    ; 1334					if (bv == (int)((fs->wi
                           A  3085    ; 1335					fs->win[i] ^= bm;	/* 
                           A  3086    ; 1336					fs->wflag = 1;
                           A  3087    ; 1337					if (--ncl == 0) return 
                           A  3088    ; 1338				} while (bm <<= 1);		/* 
                           A  3089    ; 1339				bm = 1;
                           A  3090    ; 1340			} while (++i < SS(fs));		/* 
                           A  3091    ; 1341			i = 0;
                           A  3092    ; 1342		}
                           A  3093    ; 1343	}
                           A  3094    ; 1344	
                           A  3095    ; 1345	
                           A  3096    ; 1346	/*-------------------------------------
                           A  3097    ; 1347	/* Fill the first fragment of the FAT c
                           A  3098    ; 1348	/*-------------------------------------
                           A  3099    ; 1349	
                           A  3100    ; 1350	static FRESULT fill_first_frag (
                           A  3101    ; 1351		FFOBJID* obj	/* Pointer to the c
                           A  3102    ; 1352	)
                           A  3103    ; 1353	{
                           A  3104    ; 1354		FRESULT res;
                           A  3105    ; 1355		DWORD cl, n;
                           A  3106    ; 1356	
                           A  3107    ; 1357	
                           A  3108    ; 1358		if (obj->stat == 3) {	/* Has the 
                           A  3109    ; 1359			for (cl = obj->sclust, n = obj-
                           A  3110    ; 1360				res = put_fat(obj->fs, cl, 
                           A  3111    ; 1361				if (res != FR_OK) return re
                           A  3112    ; 1362			}
                           A  3113    ; 1363			obj->stat = 0;	/* Change statu
                           A  3114    ; 1364		}
                           A  3115    ; 1365		return FR_OK;
                           A  3116    ; 1366	}
                           A  3117    ; 1367	
                           A  3118    ; 1368	
                           A  3119    ; 1369	/*-------------------------------------
                           A  3120    ; 1370	/* Fill the last fragment of the FAT ch
                           A  3121    ; 1371	/*-------------------------------------
                           A  3122    ; 1372	
                           A  3123    ; 1373	static FRESULT fill_last_frag (
                           A  3124    ; 1374		FFOBJID* obj,	/* Pointer to the c
                           A  3125    ; 1375		DWORD lcl,		/* Last cluster of 
                           A  3126    ; 1376		DWORD term		/* Value to set the
                           A  3127    ; 1377	)
                           A  3128    ; 1378	{
                           A  3129    ; 1379		FRESULT res;
                           A  3130    ; 1380	
                           A  3131    ; 1381	
                           A  3132    ; 1382		while (obj->n_frag > 0) {	/* Crea
                           A  3133    ; 1383			res = put_fat(obj->fs, lcl - ob
                           A  3134    ; 1384			if (res != FR_OK) return res;
                           A  3135    ; 1385			obj->n_frag--;
                           A  3136    ; 1386		}
                           A  3137    ; 1387		return FR_OK;
                           A  3138    ; 1388	}
                           A  3139    ; 1389	
                           A  3140    ; 1390	#endif	/* FF_FS_EXFAT && !FF_FS_READON
                           A  3141    ; 1391	
                           A  3142    ; 1392	
                           A  3143    ; 1393	
                           A  3144    ; 1394	#if !FF_FS_READONLY
                           A  3145    ; 1395	/*-------------------------------------
                           A  3146    ; 1396	/* FAT handling - Remove a cluster chai
                           A  3147    ; 1397	/*-------------------------------------
                           A  3148    ; 1398	
                           A  3149    ; 1399	static FRESULT remove_chain (	/* FR_O
                           A  3150    ; 1400		FFOBJID* obj,		/* Correspondin
                           A  3151    ; 1401		DWORD clst,			/* Cluster to r
                           A  3152    ; 1402		DWORD pclst			/* Previous clu
                           A  3153    ; 1403	)
                           A  3154    ; 1404	{
                           A  3155    ; 1405		FRESULT res = FR_OK;
                           A  3156    ; 1406		DWORD nxt;
                           A  3157    ; 1407		FATFS *fs = obj->fs;
                           A  3158    ; 1408	#if FF_FS_EXFAT || FF_USE_TRIM
                           A  3159    ; 1409		DWORD scl = clst, ecl = clst;
                           A  3160    ; 1410	#endif
                           A  3161    ; 1411	#if FF_USE_TRIM
                           A  3162    ; 1412		LBA_t rt[2];
                           A  3163    ; 1413	#endif
                           A  3164    ; 1414	
                           A  3165    ; 1415		if (clst < 2 || clst >= fs->n_faten
                           A  3166    ; 1416	
                           A  3167    ; 1417		/* Mark the previous cluster 'EOC' 
                           A  3168    ; 1418		if (pclst != 0 && (!FF_FS_EXFAT || 
                           A  3169    ; 1419			res = put_fat(fs, pclst, 0xFFFF
                           A  3170    ; 1420			if (res != FR_OK) return res;
                           A  3171    ; 1421		}
                           A  3172    ; 1422	
                           A  3173    ; 1423		/* Remove the chain */
                           A  3174    ; 1424		do {
                           A  3175    ; 1425			nxt = get_fat(obj, clst);		
                           A  3176    ; 1426			if (nxt == 0) break;			
                           A  3177    ; 1427			if (nxt == 1) return FR_INT_ERR
                           A  3178    ; 1428			if (nxt == 0xFFFFFFFF) return F
                           A  3179    ; 1429			if (!FF_FS_EXFAT || fs->fs_type
                           A  3180    ; 1430				res = put_fat(fs, clst, 0);
                           A  3181    ; 1431				if (res != FR_OK) return re
                           A  3182    ; 1432			}
                           A  3183    ; 1433			if (fs->free_clst < fs->n_faten
                           A  3184    ; 1434				fs->free_clst++;
                           A  3185    ; 1435				fs->fsi_flag |= 1;
                           A  3186    ; 1436			}
                           A  3187    ; 1437	#if FF_FS_EXFAT || FF_USE_TRIM
                           A  3188    ; 1438			if (ecl + 1 == nxt) {	/* Is n
                           A  3189    ; 1439				ecl = nxt;
                           A  3190    ; 1440			} else {				/* End 
                           A  3191    ; 1441	#if FF_FS_EXFAT
                           A  3192    ; 1442				if (fs->fs_type == FS_EXFAT
                           A  3193    ; 1443					res = change_bitmap(fs,
                           A  3194    ; 1444					if (res != FR_OK) retur
                           A  3195    ; 1445				}
                           A  3196    ; 1446	#endif
                           A  3197    ; 1447	#if FF_USE_TRIM
                           A  3198    ; 1448				rt[0] = clst2sect(fs, scl);
                           A  3199    ; 1449				rt[1] = clst2sect(fs, ecl) 
                           A  3200    ; 1450				disk_ioctl(fs->pdrv, CTRL_T
                           A  3201    ; 1451	#endif
                           A  3202    ; 1452				scl = ecl = nxt;
                           A  3203    ; 1453			}
                           A  3204    ; 1454	#endif
                           A  3205    ; 1455			clst = nxt;					/* 
                           A  3206    ; 1456		} while (clst < fs->n_fatent);	/* 
                           A  3207    ; 1457	
                           A  3208    ; 1458	#if FF_FS_EXFAT
                           A  3209    ; 1459		/* Some post processes for chain st
                           A  3210    ; 1460		if (fs->fs_type == FS_EXFAT) {
                           A  3211    ; 1461			if (pclst == 0) {	/* Has the 
                           A  3212    ; 1462				obj->stat = 0;		/* Chan
                           A  3213    ; 1463			} else {
                           A  3214    ; 1464				if (obj->stat == 0) {	/* 
                           A  3215    ; 1465					clst = obj->sclust;		
                           A  3216    ; 1466					while (clst != pclst) {
                           A  3217    ; 1467						nxt = get_fat(obj, 
                           A  3218    ; 1468						if (nxt < 2) return
                           A  3219    ; 1469						if (nxt == 0xFFFFFF
                           A  3220    ; 1470						if (nxt != clst + 1
                           A  3221    ; 1471						clst++;
                           A  3222    ; 1472					}
                           A  3223    ; 1473					if (clst == pclst) {	
                           A  3224    ; 1474						obj->stat = 2;		
                           A  3225    ; 1475					}
                           A  3226    ; 1476				} else {
                           A  3227    ; 1477					if (obj->stat == 3 && p
                           A  3228    ; 1478						obj->stat = 2;	/* 
                           A  3229    ; 1479					}
                           A  3230    ; 1480				}
                           A  3231    ; 1481			}
                           A  3232    ; 1482		}
                           A  3233    ; 1483	#endif
                           A  3234    ; 1484		return FR_OK;
                           A  3235    ; 1485	}
                           A  3236    ; 1486	
                           A  3237    ; 1487	
                           A  3238    ; 1488	
                           A  3239    ; 1489	
                           A  3240    ; 1490	/*-------------------------------------
                           A  3241    ; 1491	/* FAT handling - Stretch a chain or Cr
                           A  3242    ; 1492	/*-------------------------------------
                           A  3243    ; 1493	
                           A  3244    ; 1494	static DWORD create_chain (	/* 0:No fre
                           A  3245    ; 1495		FFOBJID* obj,		/* Correspondin
                           A  3246    ; 1496		DWORD clst			/* Cluster# to 
                           A  3247    ; 1497	)
                           A  3248    ; 1498	{
                           A  3249    ; 1499		DWORD cs, ncl, scl;
                           A  3250    ; 1500		FRESULT res;
                           A  3251    ; 1501		FATFS *fs = obj->fs;
                           A  3252    ; 1502	
                           A  3253    ; 1503	
                           A  3254    ; 1504		if (clst == 0) {	/* Create a new
                           A  3255    ; 1505			scl = fs->last_clst;			
                           A  3256    ; 1506			if (scl == 0 || scl >= fs->n_fa
                           A  3257    ; 1507		}
                           A  3258    ; 1508		else {				/* Stretch a ch
                           A  3259    ; 1509			cs = get_fat(obj, clst);		
                           A  3260    ; 1510			if (cs < 2) return 1;			
                           A  3261    ; 1511			if (cs == 0xFFFFFFFF) return cs
                           A  3262    ; 1512			if (cs < fs->n_fatent) return c
                           A  3263    ; 1513			scl = clst;						
                           A  3264    ; 1514		}
                           A  3265    ; 1515		if (fs->free_clst == 0) return 0;	
                           A  3266    ; 1516	
                           A  3267    ; 1517	#if FF_FS_EXFAT
                           A  3268    ; 1518		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  3269    ; 1519			ncl = find_bitmap(fs, scl, 1);	
                           A  3270    ; 1520			if (ncl == 0 || ncl == 0xFFFFFF
                           A  3271    ; 1521			res = change_bitmap(fs, ncl, 1,
                           A  3272    ; 1522			if (res == FR_INT_ERR) return 1
                           A  3273    ; 1523			if (res == FR_DISK_ERR) return 
                           A  3274    ; 1524			if (clst == 0) {				
                           A  3275    ; 1525				obj->stat = 2;				
                           A  3276    ; 1526			} else {						
                           A  3277    ; 1527				if (obj->stat == 2 && ncl !
                           A  3278    ; 1528					obj->n_cont = scl - obj
                           A  3279    ; 1529					obj->stat = 3;			
                           A  3280    ; 1530				}
                           A  3281    ; 1531			}
                           A  3282    ; 1532			if (obj->stat != 2) {	/* Is t
                           A  3283    ; 1533				if (ncl == clst + 1) {	/* 
                           A  3284    ; 1534					obj->n_frag = obj->n_fr
                           A  3285    ; 1535				} else {				/* 
                           A  3286    ; 1536					if (obj->n_frag == 0) o
                           A  3287    ; 1537					res = fill_last_frag(ob
                           A  3288    ; 1538					if (res == FR_OK) obj->
                           A  3289    ; 1539				}
                           A  3290    ; 1540			}
                           A  3291    ; 1541		} else
                           A  3292    ; 1542	#endif
                           A  3293    ; 1543		{	/* On the FAT/FAT32 volume */
                           A  3294    ; 1544			ncl = 0;
                           A  3295    ; 1545			if (scl == clst) {				
                           A  3296    ; 1546				ncl = scl + 1;				
                           A  3297    ; 1547				if (ncl >= fs->n_fatent) nc
                           A  3298    ; 1548				cs = get_fat(obj, ncl);		
                           A  3299    ; 1549				if (cs == 1 || cs == 0xFFFF
                           A  3300    ; 1550				if (cs != 0) {				
                           A  3301    ; 1551					cs = fs->last_clst;		
                           A  3302    ; 1552					if (cs >= 2 && cs < fs-
                           A  3303    ; 1553					ncl = 0;
                           A  3304    ; 1554				}
                           A  3305    ; 1555			}
                           A  3306    ; 1556			if (ncl == 0) {	/* The new clus
                           A  3307    ; 1557				ncl = scl;	/* Start cluste
                           A  3308    ; 1558				for (;;) {
                           A  3309    ; 1559					ncl++;					
                           A  3310    ; 1560					if (ncl >= fs->n_fatent
                           A  3311    ; 1561						ncl = 2;
                           A  3312    ; 1562						if (ncl > scl) retu
                           A  3313    ; 1563					}
                           A  3314    ; 1564					cs = get_fat(obj, ncl);
                           A  3315    ; 1565					if (cs == 0) break;		
                           A  3316    ; 1566					if (cs == 1 || cs == 0x
                           A  3317    ; 1567					if (ncl == scl) return 
                           A  3318    ; 1568				}
                           A  3319    ; 1569			}
                           A  3320    ; 1570			res = put_fat(fs, ncl, 0xFFFFFF
                           A  3321    ; 1571			if (res == FR_OK && clst != 0) 
                           A  3322    ; 1572				res = put_fat(fs, clst, ncl
                           A  3323    ; 1573			}
                           A  3324    ; 1574		}
                           A  3325    ; 1575	
                           A  3326    ; 1576		if (res == FR_OK) {			/* Upda
                           A  3327    ; 1577			fs->last_clst = ncl;
                           A  3328    ; 1578			if (fs->free_clst <= fs->n_fate
                           A  3329    ; 1579			fs->fsi_flag |= 1;
                           A  3330    ; 1580		} else {
                           A  3331    ; 1581			ncl = (res == FR_DISK_ERR) ? 0x
                           A  3332    ; 1582		}
                           A  3333    ; 1583	
                           A  3334    ; 1584		return ncl;		/* Return new clust
                           A  3335    ; 1585	}
                           A  3336    ; 1586	
                           A  3337    ; 1587	#endif /* !FF_FS_READONLY */
                           A  3338    ; 1588	
                           A  3339    ; 1589	
                           A  3340    ; 1590	
                           A  3341    ; 1591	
                           A  3342    ; 1592	#if FF_USE_FASTSEEK
                           A  3343    ; 1593	/*-------------------------------------
                           A  3344    ; 1594	/* FAT handling - Convert offset into c
                           A  3345    ; 1595	/*-------------------------------------
                           A  3346    ; 1596	
                           A  3347    ; 1597	static DWORD clmt_clust (	/* <2:Error
                           A  3348    ; 1598		FIL* fp,		/* Pointer to the f
                           A  3349    ; 1599		FSIZE_t ofs		/* File offset to b
                           A  3350    ; 1600	)
                           A  3351    ; 1601	{
                           A  3352    ; 1602		DWORD cl, ncl, *tbl;
                           A  3353    ; 1603		FATFS *fs = fp->obj.fs;
                           A  3354    ; 1604	
                           A  3355    ; 1605	
                           A  3356    ; 1606		tbl = fp->cltbl + 1;	/* Top of C
                           A  3357    ; 1607		cl = (DWORD)(ofs / SS(fs) / fs->csi
                           A  3358    ; 1608		for (;;) {
                           A  3359    ; 1609			ncl = *tbl++;			/* Numb
                           A  3360    ; 1610			if (ncl == 0) return 0;	/* End 
                           A  3361    ; 1611			if (cl < ncl) break;	/* In t
                           A  3362    ; 1612			cl -= ncl; tbl++;		/* Next
                           A  3363    ; 1613		}
                           A  3364    ; 1614		return cl + *tbl;	/* Return the c
                           A  3365    ; 1615	}
                           A  3366    ; 1616	
                           A  3367    ; 1617	#endif	/* FF_USE_FASTSEEK */
                           A  3368    ; 1618	
                           A  3369    ; 1619	
                           A  3370    ; 1620	
                           A  3371    ; 1621	
                           A  3372    ; 1622	/*-------------------------------------
                           A  3373    ; 1623	/* Directory handling - Fill a cluster 
                           A  3374    ; 1624	/*-------------------------------------
                           A  3375    ; 1625	
                           A  3376    ; 1626	#if !FF_FS_READONLY
                           A  3377    ; 1627	static FRESULT dir_clear (	/* Returns 
                           A  3378    ; 1628		FATFS *fs,		/* Filesystem objec
                           A  3379    ; 1629		DWORD clst		/* Directory table 
                           A  3380    ; 1630	)
                           A  3381    ; 1631	{
                           A  3382    ; 1632		LBA_t sect;
                           A  3383    ; 1633		UINT n, szb;
                           A  3384    ; 1634		BYTE *ibuf;
                           A  3385    ; 1635	
                           A  3386    ; 1636	
                           A  3387    ; 1637		if (sync_window(fs) != FR_OK) retur
                           A  3388    ; 1638		sect = clst2sect(fs, clst);		/* 
                           A  3389    ; 1639		fs->winsect = sect;				/* 
                           A  3390    ; 1640		memset(fs->win, 0, sizeof fs->win);
                           A  3391    ; 1641	#if FF_USE_LFN == 3		/* Quick table 
                           A  3392    ; 1642		/* Allocate a temporary buffer */
                           A  3393    ; 1643		for (szb = ((DWORD)fs->csize * SS(f
                           A  3394    ; 1644		if (szb > SS(fs)) {		/* Buffer a
                           A  3395    ; 1645			memset(ibuf, 0, szb);
                           A  3396    ; 1646			szb /= SS(fs);		/* Bytes ->
                           A  3397    ; 1647			for (n = 0; n < fs->csize && di
                           A  3398    ; 1648			ff_memfree(ibuf);
                           A  3399    ; 1649		} else
                           A  3400    ; 1650	#endif
                           A  3401    ; 1651		{
                           A  3402    ; 1652			ibuf = fs->win; szb = 1;	/* 
                           A  3403    ; 1653			for (n = 0; n < fs->csize && di
                           A  3404    ; 1654		}
                           A  3405    ; 1655		return (n == fs->csize) ? FR_OK : F
                           A  3406    ; 1656	}
                           A  3407    ; 1657	#endif	/* !FF_FS_READONLY */
                           A  3408    ; 1658	
                           A  3409    ; 1659	
                           A  3410    ; 1660	
                           A  3411    ; 1661	
                           A  3412    ; 1662	/*-------------------------------------
                           A  3413    ; 1663	/* Directory handling - Set directory i
                           A  3414    ; 1664	/*-------------------------------------
                           A  3415    ; 1665	
                           A  3416    ; 1666	static FRESULT dir_sdi (	/* FR_OK(0)
                           A  3417    ; 1667		DIR* dp,		/* Pointer to direc
                           A  3418    ; 1668		DWORD ofs		/* Offset of direct
                           A  3419    ; 1669	)
                           A  3420    ; 1670	{
041409                     A  3421    _dir_sdi:
                           A  3422    .DEFINE "_dir_sdi"
                           A  3423    
                           A  3424    .VALUE _dir_sdi
                           A  3425    
                           A  3426    .CLASS 3
                           A  3427    
                           A  3428    .TYPE 68
                           A  3429    
                           A  3430    .ENDEF
                           A  3431    
                           A  3432    .BEGFUNC "dir_sdi",1670,"_dir_sdi"
                           A  3433    
                           A  3434    .LINE 1670
                           A  3435    
                           A  3436    .DEFINE "dp"
                           A  3437    
                           A  3438    .CLASS 65
                           A  3439    
                           A  3440    .VALUE 6
                           A  3441    
                           A  3442    .TAG "NONAME3"
                           A  3443    
                           A  3444    .TYPE 40
                           A  3445    
                           A  3446    .ENDEF
                           A  3447    
                           A  3448    .DEFINE "ofs"
                           A  3449    
                           A  3450    .CLASS 65
                           A  3451    
                           A  3452    .VALUE 9
                           A  3453    
                           A  3454    .TYPE 15
                           A  3455    
                           A  3456    .ENDEF
                           A  3457    
                           A  3458    .DEFINE "clst"
                           A  3459    
                           A  3460    .CLASS 65
                           A  3461    
                           A  3462    .VALUE -4
                           A  3463    
                           A  3464    .TYPE 15
                           A  3465    
                           A  3466    .ENDEF
                           A  3467    
                           A  3468    .DEFINE "fs"
                           A  3469    
                           A  3470    .CLASS 65
                           A  3471    
                           A  3472    .VALUE -7
                           A  3473    
                           A  3474    .TAG "NONAME0"
                           A  3475    
                           A  3476    .TYPE 40
                           A  3477    
                           A  3478    .ENDEF
                           A  3479    
                           A  3480    .DEFINE "csz"
                           A  3481    
                           A  3482    .CLASS 65
                           A  3483    
                           A  3484    .VALUE -11
                           A  3485    
                           A  3486    .TYPE 15
                           A  3487    
                           A  3488    .ENDEF
                           A  3489    
041409 DDE5                A  3490    	PUSH	IX
04140B DD210000 00         A  3491    	LD	IX,0
041410 DD39                A  3492    	ADD	IX,SP
041412 ED22F0              A  3493    	LEA	HL,IX+%FFFFFFF0
041415 F9                  A  3494    	LD	SP,HL
                           A  3495    ; 1671		DWORD csz, clst;
                           A  3496    ; 1672		FATFS *fs = dp->obj.fs;
                           A  3497    .LINE 1672
                           A  3498    
041416 DD3106              A  3499    	LD	IY,(IX+%6)
041419 FD0700              A  3500    	LD	BC,(IY+%0)
04141C DD0FF9              A  3501    	LD	(IX+%FFFFFFF9),BC
                           A  3502    ; 1673	
                           A  3503    ; 1674	
                           A  3504    ; 1675		if (ofs >= (DWORD)((FF_FS_EXFAT && 
                           A  3505    .LINE 1675
                           A  3506    
04141F DD2709              A  3507    	LD	HL,(IX+%9)
041422 DD5E0C              A  3508    	LD	E,(IX+%C)
041425 01000020            A  3509    	LD	BC,2097152
041429 AF                  A  3510    	XOR	A,A
04142A CD AA 46 04         A  3511    	CALL	__lcmpu
04142E 30 10               A  3512    	JR	NC,L_61
041430 DD7E09              A  3513    	LD	A,(IX+%9)
041433 E61F                A  3514    	AND	A,%1F
041435 B7ED62              A  3515    	UEXT	HL
041438 6F                  A  3516    	LD	L,A
041439 5C                  A  3517    	LD	E,H
04143A CD DA 44 04         A  3518    	CALL	__lcmpzero
04143E 28 08               A  3519    	JR	Z,L_62
041440                     A  3520    L_61:
                           A  3521    ; 1676			return FR_INT_ERR;
                           A  3522    .LINE 1676
                           A  3523    
041440 21020000            A  3524    	LD	HL,2
041444 C3 0A 16 04         A  3525    	JR	L_82
                           A  3526    ; 1677		}
041448                     A  3527    L_62:
                           A  3528    .LINE 1677
                           A  3529    
                           A  3530    ; 1678		dp->dptr = ofs;				/* Set 
                           A  3531    .LINE 1678
                           A  3532    
041448 DD0709              A  3533    	LD	BC,(IX+%9)
04144B DD7E0C              A  3534    	LD	A,(IX+%C)
04144E DD3106              A  3535    	LD	IY,(IX+%6)
041451 FD0F0F              A  3536    	LD	(IY+%F),BC
041454 FD7712              A  3537    	LD	(IY+%12),A
                           A  3538    ; 1679		clst = dp->obj.sclust;		/* Tabl
                           A  3539    .LINE 1679
                           A  3540    
041457 FD0707              A  3541    	LD	BC,(IY+%7)
04145A FD7E0A              A  3542    	LD	A,(IY+%A)
04145D DD0FFC              A  3543    	LD	(IX+%FFFFFFFC),BC
041460 DD77FF              A  3544    	LD	(IX+%FFFFFFFF),A
                           A  3545    ; 1680		if (clst == 0 && fs->fs_type >= FS_
                           A  3546    .LINE 1680
                           A  3547    
041463 C5E1                A  3548    	LD	HL,BC
041465 DD5EFF              A  3549    	LD	E,(IX+%FFFFFFFF)
041468 CD DA 44 04         A  3550    	CALL	__lcmpzero
04146C 20 19               A  3551    	JR	NZ,L_78
04146E DD31F9              A  3552    	LD	IY,(IX+%FFFFFFF9)
041471 FD7E00              A  3553    	LD	A,(IY+%0)
041474 FE03                A  3554    	CP	A,%3
041476 38 0F               A  3555    	JR	C,L_78
                           A  3556    ; 1681			clst = (DWORD)fs->dirbase;
                           A  3557    .LINE 1681
                           A  3558    
041478 DD31F9              A  3559    	LD	IY,(IX+%FFFFFFF9)
04147B FD0722              A  3560    	LD	BC,(IY+%22)
04147E FD7E25              A  3561    	LD	A,(IY+%25)
041481 DD0FFC              A  3562    	LD	(IX+%FFFFFFFC),BC
041484 DD77FF              A  3563    	LD	(IX+%FFFFFFFF),A
                           A  3564    ; 1682			if (FF_FS_EXFAT) dp->obj.stat =
                           A  3565    ; 1683		}
041487                     A  3566    L_78:
                           A  3567    .LINE 1683
                           A  3568    
                           A  3569    ; 1684	
                           A  3570    ; 1685		if (clst == 0) {	/* Static table
                           A  3571    .LINE 1685
                           A  3572    
041487 DD27FC              A  3573    	LD	HL,(IX+%FFFFFFFC)
04148A DD5EFF              A  3574    	LD	E,(IX+%FFFFFFFF)
04148D CD DA 44 04         A  3575    	CALL	__lcmpzero
041491 20 4C               A  3576    	JR	NZ,L_77
                           A  3577    ; 1686			if (ofs / SZDIRE >= fs->n_rootd
                           A  3578    .LINE 1686
                           A  3579    
041493 DD31F9              A  3580    	LD	IY,(IX+%FFFFFFF9)
041496 FD0707              A  3581    	LD	BC,(IY+%7)
041499 CD 95 44 04         A  3582    	CALL	__stoiu
04149D DD2FF2              A  3583    	LD	(IX+%FFFFFFF2),HL
0414A0 0600                A  3584    	LD	B,%0
0414A2 DD70F0              A  3585    	LD	(IX+%FFFFFFF0),B	; spill
0414A5 DD0709              A  3586    	LD	BC,(IX+%9)
0414A8 DD7E0C              A  3587    	LD	A,(IX+%C)
0414AB 2E05                A  3588    	LD	L,%5
0414AD CD A9 45 04         A  3589    	CALL	__lshru
0414B1 5F                  A  3590    	LD	E,A
0414B2 C5E1                A  3591    	LD	HL,BC
0414B4 DD46F0              A  3592    	LD	B,(IX+%FFFFFFF0)	; unspill
0414B7 78                  A  3593    	LD	A,B
0414B8 DD07F2              A  3594    	LD	BC,(IX+%FFFFFFF2)
0414BB CD AA 46 04         A  3595    	CALL	__lcmpu
0414BF 38 08               A  3596    	JR	C,L_67
0414C1 21020000            A  3597    	LD	HL,2
0414C5 C3 0A 16 04         A  3598    	JR	L_82
0414C9                     A  3599    L_67:
                           A  3600    ; 1687			dp->sect = fs->dirbase;
                           A  3601    .LINE 1687
                           A  3602    
0414C9 DD31F9              A  3603    	LD	IY,(IX+%FFFFFFF9)
0414CC FD0722              A  3604    	LD	BC,(IY+%22)
0414CF FD7E25              A  3605    	LD	A,(IY+%25)
0414D2 DD3106              A  3606    	LD	IY,(IX+%6)
0414D5 FD0F17              A  3607    	LD	(IY+%17),BC
0414D8 FD771A              A  3608    	LD	(IY+%1A),A
                           A  3609    ; 1688	
                           A  3610    ; 1689		} else {			/* Dynamic tabl
                           A  3611    .LINE 1689
                           A  3612    
0414DB C3 A9 15 04         A  3613    	JR	L_79
0414DF                     A  3614    L_77:
                           A  3615    ; 1690			csz = (DWORD)fs->csize * SS(fs)
                           A  3616    .LINE 1690
                           A  3617    
0414DF DD31F9              A  3618    	LD	IY,(IX+%FFFFFFF9)
0414E2 FD0709              A  3619    	LD	BC,(IY+%9)
0414E5 CD 95 44 04         A  3620    	CALL	__stoiu
0414E9 1E00                A  3621    	LD	E,%0
0414EB 01000200            A  3622    	LD	BC,512
0414EF AF                  A  3623    	XOR	A,A
0414F0 CD DF 47 04         A  3624    	CALL	__lmulu
0414F4 DD2FF5              A  3625    	LD	(IX+%FFFFFFF5),HL
0414F7 DD73F8              A  3626    	LD	(IX+%FFFFFFF8),E
                           A  3627    ; 1691			while (ofs >= csz) {			
                           A  3628    .LINE 1691
                           A  3629    
0414FA 18 7B               A  3630    	JR	L_73
0414FC                     A  3631    L_74:
                           A  3632    ; 1692				clst = get_fat(&dp->obj, cl
                           A  3633    .LINE 1692
                           A  3634    
0414FC DD4EFF              A  3635    	LD	C,(IX+%FFFFFFFF)
0414FF 0600                A  3636    	LD	B,%0
041501 C5                  A  3637    	PUSH	BC
041502 DD07FC              A  3638    	LD	BC,(IX+%FFFFFFFC)
041505 C5                  A  3639    	PUSH	BC
041506 DD3106              A  3640    	LD	IY,(IX+%6)
041509 ED6600              A  3641    	PEA	IY+%0
04150C CD BC 11 04         A  3642    	CALL	_get_fat
041510 C1                  A  3643    	POP	BC
041511 C1                  A  3644    	POP	BC
041512 C1                  A  3645    	POP	BC
041513 DD2FFC              A  3646    	LD	(IX+%FFFFFFFC),HL
041516 DD73FF              A  3647    	LD	(IX+%FFFFFFFF),E
                           A  3648    ; 1693				if (clst == 0xFFFFFFFF) ret
                           A  3649    .LINE 1693
                           A  3650    
041519 DD27FC              A  3651    	LD	HL,(IX+%FFFFFFFC)
04151C DD5EFF              A  3652    	LD	E,(IX+%FFFFFFFF)
04151F 01FFFFFF            A  3653    	LD	BC,16777215
041523 3EFF                A  3654    	LD	A,%FF
041525 CD AA 46 04         A  3655    	CALL	__lcmpu
041529 20 08               A  3656    	JR	NZ,L_71
04152B 21010000            A  3657    	LD	HL,1
04152F C3 0A 16 04         A  3658    	JR	L_82
041533                     A  3659    L_71:
                           A  3660    ; 1694				if (clst < 2 || clst >= fs-
                           A  3661    .LINE 1694
                           A  3662    
041533 DD27FC              A  3663    	LD	HL,(IX+%FFFFFFFC)
041536 DD5EFF              A  3664    	LD	E,(IX+%FFFFFFFF)
041539 01020000            A  3665    	LD	BC,2
04153D AF                  A  3666    	XOR	A,A
04153E CD AA 46 04         A  3667    	CALL	__lcmpu
041542 38 15               A  3668    	JR	C,L_70
041544 DD27FC              A  3669    	LD	HL,(IX+%FFFFFFFC)
041547 DD5EFF              A  3670    	LD	E,(IX+%FFFFFFFF)
04154A DD31F9              A  3671    	LD	IY,(IX+%FFFFFFF9)
04154D FD0712              A  3672    	LD	BC,(IY+%12)
041550 FD7E15              A  3673    	LD	A,(IY+%15)
041553 CD AA 46 04         A  3674    	CALL	__lcmpu
041557 38 08               A  3675    	JR	C,L_72
041559                     A  3676    L_70:
041559 21020000            A  3677    	LD	HL,2
04155D C3 0A 16 04         A  3678    	JR	L_82
041561                     A  3679    L_72:
                           A  3680    ; 1695				ofs -= csz;
                           A  3681    .LINE 1695
                           A  3682    
041561 DD2709              A  3683    	LD	HL,(IX+%9)
041564 DD5E0C              A  3684    	LD	E,(IX+%C)
041567 DD07F5              A  3685    	LD	BC,(IX+%FFFFFFF5)
04156A DD7EF8              A  3686    	LD	A,(IX+%FFFFFFF8)
04156D CD 9D 45 04         A  3687    	CALL	__lsub
041571 DD2F09              A  3688    	LD	(IX+%9),HL
041574 DD730C              A  3689    	LD	(IX+%C),E
                           A  3690    ; 1696			}
041577                     A  3691    L_73:
                           A  3692    .LINE 1696
                           A  3693    
041577 DD2709              A  3694    	LD	HL,(IX+%9)
04157A DD5E0C              A  3695    	LD	E,(IX+%C)
04157D DD07F5              A  3696    	LD	BC,(IX+%FFFFFFF5)
041580 DD7EF8              A  3697    	LD	A,(IX+%FFFFFFF8)
041583 CD AA 46 04         A  3698    	CALL	__lcmpu
041587 D2 FC 14 04         A  3699    	JR	NC,L_74
                           A  3700    ; 1697			dp->sect = clst2sect(fs, clst);
                           A  3701    .LINE 1697
                           A  3702    
04158B DD4EFF              A  3703    	LD	C,(IX+%FFFFFFFF)
04158E 0600                A  3704    	LD	B,%0
041590 C5                  A  3705    	PUSH	BC
041591 DD07FC              A  3706    	LD	BC,(IX+%FFFFFFFC)
041594 C5                  A  3707    	PUSH	BC
041595 DD07F9              A  3708    	LD	BC,(IX+%FFFFFFF9)
041598 C5                  A  3709    	PUSH	BC
041599 CD 51 11 04         A  3710    	CALL	_clst2sect
04159D C1                  A  3711    	POP	BC
04159E C1                  A  3712    	POP	BC
04159F C1                  A  3713    	POP	BC
0415A0 DD3106              A  3714    	LD	IY,(IX+%6)
0415A3 FD2F17              A  3715    	LD	(IY+%17),HL
0415A6 FD731A              A  3716    	LD	(IY+%1A),E
                           A  3717    ; 1698		}
0415A9                     A  3718    L_79:
                           A  3719    .LINE 1698
                           A  3720    
                           A  3721    ; 1699		dp->clust = clst;					
                           A  3722    .LINE 1699
                           A  3723    
0415A9 DD07FC              A  3724    	LD	BC,(IX+%FFFFFFFC)
0415AC DD7EFF              A  3725    	LD	A,(IX+%FFFFFFFF)
0415AF DD3106              A  3726    	LD	IY,(IX+%6)
0415B2 FD0F13              A  3727    	LD	(IY+%13),BC
0415B5 FD7716              A  3728    	LD	(IY+%16),A
                           A  3729    ; 1700		if (dp->sect == 0) return FR_INT_ER
                           A  3730    .LINE 1700
                           A  3731    
0415B8 FD2717              A  3732    	LD	HL,(IY+%17)
0415BB FD5E1A              A  3733    	LD	E,(IY+%1A)
0415BE CD DA 44 04         A  3734    	CALL	__lcmpzero
0415C2 20 06               A  3735    	JR	NZ,L_81
0415C4 21020000            A  3736    	LD	HL,2
0415C8 18 40               A  3737    	JR	L_82
0415CA                     A  3738    L_81:
                           A  3739    ; 1701		dp->sect += ofs / SS(fs);			
                           A  3740    .LINE 1701
                           A  3741    
0415CA DD0709              A  3742    	LD	BC,(IX+%9)
0415CD DD7E0C              A  3743    	LD	A,(IX+%C)
0415D0 2E09                A  3744    	LD	L,%9
0415D2 CD A9 45 04         A  3745    	CALL	__lshru
0415D6 DD3106              A  3746    	LD	IY,(IX+%6)
0415D9 FD2717              A  3747    	LD	HL,(IY+%17)
0415DC FD5E1A              A  3748    	LD	E,(IY+%1A)
0415DF CD C7 43 04         A  3749    	CALL	__ladd
0415E3 FD2F17              A  3750    	LD	(IY+%17),HL
0415E6 FD731A              A  3751    	LD	(IY+%1A),E
                           A  3752    ; 1702		dp->dir = fs->win + (ofs % SS(fs));
                           A  3753    .LINE 1702
                           A  3754    
0415E9 DD2709              A  3755    	LD	HL,(IX+%9)
0415EC DD5E0C              A  3756    	LD	E,(IX+%C)
0415EF 01FF0100            A  3757    	LD	BC,511
0415F3 AF                  A  3758    	XOR	A,A
0415F4 CD D6 47 04         A  3759    	CALL	__land
0415F8 E5C1                A  3760    	LD	BC,HL
0415FA DD31F9              A  3761    	LD	IY,(IX+%FFFFFFF9)
0415FD ED232E              A  3762    	LEA	HL,IY+%2E
041600 09                  A  3763    	ADD	HL,BC
041601 DD3106              A  3764    	LD	IY,(IX+%6)
041604 FD2F1B              A  3765    	LD	(IY+%1B),HL
                           A  3766    ; 1703	
                           A  3767    ; 1704		return FR_OK;
                           A  3768    .LINE 1704
                           A  3769    
041607 B7                  A  3770    	OR	A,A
041608 ED62                A  3771    	SBC	HL,HL
                           A  3772    ; 1705	}
04160A                     A  3773    L_82:
                           A  3774    .LINE 1705
                           A  3775    
04160A DDF9                A  3776    	LD	SP,IX
04160C DDE1                A  3777    	POP	IX
04160E C9                  A  3778    	RET	
                           A  3779    
                           A  3780    
                           A  3781    ;**************************** _dir_sdi ********
                           A  3782    ;Name                         Addr/Register   S
                           A  3783    ;csz                                  IX-11    
                           A  3784    ;fs                                    IX-7    
                           A  3785    ;clst                                  IX-4    
                           A  3786    ;ofs                                   IX+9    
                           A  3787    ;dp                                    IX+6    
                           A  3788    
                           A  3789    
                           A  3790    ; Stack Frame Size: 31 (bytes)
                           A  3791    ;       Spill Code: 0 (instruction)
                           A  3792    
                           A  3793    
                           A  3794    .ENDFUNC "dir_sdi",1705,"_dir_sdi"
                           A  3795    ; 1706	
                           A  3796    ; 1707	
                           A  3797    ; 1708	
                           A  3798    ; 1709	
                           A  3799    ; 1710	/*-------------------------------------
                           A  3800    ; 1711	/* Directory handling - Move directory 
                           A  3801    ; 1712	/*-------------------------------------
                           A  3802    ; 1713	
                           A  3803    ; 1714	static FRESULT dir_next (	/* FR_OK(0)
                           A  3804    ; 1715		DIR* dp,				/* Pointer 
                           A  3805    ; 1716		int stretch				/* 0: Do no
                           A  3806    ; 1717	)
                           A  3807    ; 1718	{
04160F                     A  3808    _dir_next:
                           A  3809    .DEFINE "_dir_next"
                           A  3810    
                           A  3811    .VALUE _dir_next
                           A  3812    
                           A  3813    .CLASS 3
                           A  3814    
                           A  3815    .TYPE 68
                           A  3816    
                           A  3817    .ENDEF
                           A  3818    
                           A  3819    .BEGFUNC "dir_next",1718,"_dir_next"
                           A  3820    
                           A  3821    .LINE 1718
                           A  3822    
                           A  3823    .DEFINE "dp"
                           A  3824    
                           A  3825    .CLASS 65
                           A  3826    
                           A  3827    .VALUE 6
                           A  3828    
                           A  3829    .TAG "NONAME3"
                           A  3830    
                           A  3831    .TYPE 40
                           A  3832    
                           A  3833    .ENDEF
                           A  3834    
                           A  3835    .DEFINE "stretch"
                           A  3836    
                           A  3837    .CLASS 65
                           A  3838    
                           A  3839    .VALUE 9
                           A  3840    
                           A  3841    .TYPE 4
                           A  3842    
                           A  3843    .ENDEF
                           A  3844    
                           A  3845    .DEFINE "fs"
                           A  3846    
                           A  3847    .CLASS 65
                           A  3848    
                           A  3849    .VALUE -3
                           A  3850    
                           A  3851    .TAG "NONAME0"
                           A  3852    
                           A  3853    .TYPE 40
                           A  3854    
                           A  3855    .ENDEF
                           A  3856    
                           A  3857    .DEFINE "clst"
                           A  3858    
                           A  3859    .CLASS 65
                           A  3860    
                           A  3861    .VALUE -7
                           A  3862    
                           A  3863    .TYPE 15
                           A  3864    
                           A  3865    .ENDEF
                           A  3866    
                           A  3867    .DEFINE "ofs"
                           A  3868    
                           A  3869    .CLASS 65
                           A  3870    
                           A  3871    .VALUE -11
                           A  3872    
                           A  3873    .TYPE 15
                           A  3874    
                           A  3875    .ENDEF
                           A  3876    
04160F DDE5                A  3877    	PUSH	IX
041611 DD210000 00         A  3878    	LD	IX,0
041616 DD39                A  3879    	ADD	IX,SP
041618 ED22E1              A  3880    	LEA	HL,IX+%FFFFFFE1
04161B F9                  A  3881    	LD	SP,HL
                           A  3882    ; 1719		DWORD ofs, clst;
                           A  3883    ; 1720		FATFS *fs = dp->obj.fs;
                           A  3884    .LINE 1720
                           A  3885    
04161C DD3106              A  3886    	LD	IY,(IX+%6)
04161F FD0700              A  3887    	LD	BC,(IY+%0)
041622 DD0FFD              A  3888    	LD	(IX+%FFFFFFFD),BC
                           A  3889    ; 1721	
                           A  3890    ; 1722	
                           A  3891    ; 1723		ofs = dp->dptr + SZDIRE;	/* Next
                           A  3892    .LINE 1723
                           A  3893    
041625 FD270F              A  3894    	LD	HL,(IY+%F)
041628 FD5E12              A  3895    	LD	E,(IY+%12)
04162B 3E20                A  3896    	LD	A,%20
04162D CD B8 43 04         A  3897    	CALL	__ladd_b
041631 DD2FF5              A  3898    	LD	(IX+%FFFFFFF5),HL
041634 DD73F8              A  3899    	LD	(IX+%FFFFFFF8),E
                           A  3900    ; 1724		if (ofs >= (DWORD)((FF_FS_EXFAT && 
                           A  3901    .LINE 1724
                           A  3902    
041637 DD27F5              A  3903    	LD	HL,(IX+%FFFFFFF5)
04163A DD5EF8              A  3904    	LD	E,(IX+%FFFFFFF8)
04163D 01000020            A  3905    	LD	BC,2097152
041641 AF                  A  3906    	XOR	A,A
041642 CD AA 46 04         A  3907    	CALL	__lcmpu
041646 38 0E               A  3908    	JR	C,L_85
041648 01000000            A  3909    	LD	BC,0
04164C DD3106              A  3910    	LD	IY,(IX+%6)
04164F FD0F17              A  3911    	LD	(IY+%17),BC
041652 FD361A00            A  3912    	LD	(IY+%1A),%0
041656                     A  3913    L_85:
                           A  3914    ; 1725		if (dp->sect == 0) return FR_NO_FIL
                           A  3915    .LINE 1725
                           A  3916    
041656 DD3106              A  3917    	LD	IY,(IX+%6)
041659 FD0717              A  3918    	LD	BC,(IY+%17)
04165C FD7E1A              A  3919    	LD	A,(IY+%1A)
04165F DD0FF1              A  3920    	LD	(IX+%FFFFFFF1),BC
041662 DD77F4              A  3921    	LD	(IX+%FFFFFFF4),A
041665 C5E1                A  3922    	LD	HL,BC
041667 DD5EF4              A  3923    	LD	E,(IX+%FFFFFFF4)
04166A CD DA 44 04         A  3924    	CALL	__lcmpzero
04166E 20 08               A  3925    	JR	NZ,L_100
041670 21040000            A  3926    	LD	HL,4
041674 C3 1C 18 04         A  3927    	JR	L_102
041678                     A  3928    L_100:
                           A  3929    ; 1726	
                           A  3930    ; 1727		if (ofs % SS(fs) == 0) {	/* Sect
                           A  3931    .LINE 1727
                           A  3932    
041678 DD27F5              A  3933    	LD	HL,(IX+%FFFFFFF5)
04167B DD5EF8              A  3934    	LD	E,(IX+%FFFFFFF8)
04167E 01FF0100            A  3935    	LD	BC,511
041682 AF                  A  3936    	XOR	A,A
041683 CD D6 47 04         A  3937    	CALL	__land
041687 DD2FED              A  3938    	LD	(IX+%FFFFFFED),HL
04168A DD73F0              A  3939    	LD	(IX+%FFFFFFF0),E
04168D DD27ED              A  3940    	LD	HL,(IX+%FFFFFFED)
041690 DD5EF0              A  3941    	LD	E,(IX+%FFFFFFF0)
041693 CD DA 44 04         A  3942    	CALL	__lcmpzero
041697 C2 FA 17 04         A  3943    	JR	NZ,L_101
                           A  3944    ; 1728			dp->sect++;				/* Next
                           A  3945    .LINE 1728
                           A  3946    
04169B DD27F1              A  3947    	LD	HL,(IX+%FFFFFFF1)
04169E DD5EF4              A  3948    	LD	E,(IX+%FFFFFFF4)
0416A1 3E01                A  3949    	LD	A,%1
0416A3 CD B8 43 04         A  3950    	CALL	__ladd_b
0416A7 DD3106              A  3951    	LD	IY,(IX+%6)
0416AA FD2F17              A  3952    	LD	(IY+%17),HL
0416AD FD731A              A  3953    	LD	(IY+%1A),E
                           A  3954    ; 1729	
                           A  3955    ; 1730			if (dp->clust == 0) {	/* Stat
                           A  3956    .LINE 1730
                           A  3957    
0416B0 FD0713              A  3958    	LD	BC,(IY+%13)
0416B3 FD7E16              A  3959    	LD	A,(IY+%16)
0416B6 DD0FE9              A  3960    	LD	(IX+%FFFFFFE9),BC
0416B9 DD77EC              A  3961    	LD	(IX+%FFFFFFEC),A
0416BC C5E1                A  3962    	LD	HL,BC
0416BE DD5EEC              A  3963    	LD	E,(IX+%FFFFFFEC)
0416C1 CD DA 44 04         A  3964    	CALL	__lcmpzero
0416C5 20 46               A  3965    	JR	NZ,L_98
                           A  3966    ; 1731				if (ofs / SZDIRE >= fs->n_r
                           A  3967    .LINE 1731
                           A  3968    
0416C7 DD31FD              A  3969    	LD	IY,(IX+%FFFFFFFD)
0416CA FD0707              A  3970    	LD	BC,(IY+%7)
0416CD CD 95 44 04         A  3971    	CALL	__stoiu
0416D1 DD2FE3              A  3972    	LD	(IX+%FFFFFFE3),HL
0416D4 0600                A  3973    	LD	B,%0
0416D6 DD70E1              A  3974    	LD	(IX+%FFFFFFE1),B	; spill
0416D9 DD07F5              A  3975    	LD	BC,(IX+%FFFFFFF5)
0416DC DD7EF8              A  3976    	LD	A,(IX+%FFFFFFF8)
0416DF 2E05                A  3977    	LD	L,%5
0416E1 CD A9 45 04         A  3978    	CALL	__lshru
0416E5 5F                  A  3979    	LD	E,A
0416E6 C5E1                A  3980    	LD	HL,BC
0416E8 DD46E1              A  3981    	LD	B,(IX+%FFFFFFE1)	; unspill
0416EB 78                  A  3982    	LD	A,B
0416EC DD07E3              A  3983    	LD	BC,(IX+%FFFFFFE3)
0416EF CD AA 46 04         A  3984    	CALL	__lcmpu
0416F3 DA FA 17 04         A  3985    	JR	C,L_101
                           A  3986    ; 1732					dp->sect = 0; return FR
                           A  3987    .LINE 1732
                           A  3988    
0416F7 01000000            A  3989    	LD	BC,0
0416FB DD3106              A  3990    	LD	IY,(IX+%6)
0416FE FD0F17              A  3991    	LD	(IY+%17),BC
041701 FD361A00            A  3992    	LD	(IY+%1A),%0
041705 21040000            A  3993    	LD	HL,4
041709 C3 1C 18 04         A  3994    	JR	L_102
                           A  3995    ; 1733				}
                           A  3996    ; 1734			}
                           A  3997    ; 1735			else {					/* Dyna
04170D                     A  3998    L_98:
                           A  3999    .LINE 1735
                           A  4000    
                           A  4001    ; 1736				if ((ofs / SS(fs) & (fs->cs
                           A  4002    .LINE 1736
                           A  4003    
04170D DD31FD              A  4004    	LD	IY,(IX+%FFFFFFFD)
041710 FD0709              A  4005    	LD	BC,(IY+%9)
041713 CD 95 44 04         A  4006    	CALL	__stoiu
041717 2B                  A  4007    	DEC	HL
041718 E5C1                A  4008    	LD	BC,HL
04171A CD A3 46 04         A  4009    	CALL	__itol
04171E DD0FE6              A  4010    	LD	(IX+%FFFFFFE6),BC
041721 5F                  A  4011    	LD	E,A
041722 DD07F5              A  4012    	LD	BC,(IX+%FFFFFFF5)
041725 DD7EF8              A  4013    	LD	A,(IX+%FFFFFFF8)
041728 2E09                A  4014    	LD	L,%9
04172A CD A9 45 04         A  4015    	CALL	__lshru
04172E DD27E6              A  4016    	LD	HL,(IX+%FFFFFFE6)
041731 CD D6 47 04         A  4017    	CALL	__land
041735 CD DA 44 04         A  4018    	CALL	__lcmpzero
041739 C2 FA 17 04         A  4019    	JR	NZ,L_101
                           A  4020    ; 1737					clst = get_fat(&dp->obj
                           A  4021    .LINE 1737
                           A  4022    
04173D DD4EEC              A  4023    	LD	C,(IX+%FFFFFFEC)
041740 0600                A  4024    	LD	B,%0
041742 C5                  A  4025    	PUSH	BC
041743 DD07E9              A  4026    	LD	BC,(IX+%FFFFFFE9)
041746 C5                  A  4027    	PUSH	BC
041747 DD3106              A  4028    	LD	IY,(IX+%6)
04174A ED6600              A  4029    	PEA	IY+%0
04174D CD BC 11 04         A  4030    	CALL	_get_fat
041751 C1                  A  4031    	POP	BC
041752 C1                  A  4032    	POP	BC
041753 C1                  A  4033    	POP	BC
041754 E5C1                A  4034    	LD	BC,HL
041756 DD0FF9              A  4035    	LD	(IX+%FFFFFFF9),BC
041759 DD73FC              A  4036    	LD	(IX+%FFFFFFFC),E
                           A  4037    ; 1738					if (clst <= 1) return F
                           A  4038    .LINE 1738
                           A  4039    
04175C 21010000            A  4040    	LD	HL,1
041760 1E00                A  4041    	LD	E,%0
041762 DD7EFC              A  4042    	LD	A,(IX+%FFFFFFFC)
041765 CD AA 46 04         A  4043    	CALL	__lcmpu
041769 38 08               A  4044    	JR	C,L_90
04176B 21020000            A  4045    	LD	HL,2
04176F C3 1C 18 04         A  4046    	JR	L_102
041773                     A  4047    L_90:
                           A  4048    ; 1739					if (clst == 0xFFFFFFFF)
                           A  4049    .LINE 1739
                           A  4050    
041773 DD27F9              A  4051    	LD	HL,(IX+%FFFFFFF9)
041776 DD5EFC              A  4052    	LD	E,(IX+%FFFFFFFC)
041779 01FFFFFF            A  4053    	LD	BC,16777215
04177D 3EFF                A  4054    	LD	A,%FF
04177F CD AA 46 04         A  4055    	CALL	__lcmpu
041783 20 08               A  4056    	JR	NZ,L_94
041785 21010000            A  4057    	LD	HL,1
041789 C3 1C 18 04         A  4058    	JR	L_102
04178D                     A  4059    L_94:
                           A  4060    ; 1740					if (clst >= fs->n_faten
                           A  4061    .LINE 1740
                           A  4062    
04178D DD27F9              A  4063    	LD	HL,(IX+%FFFFFFF9)
041790 DD5EFC              A  4064    	LD	E,(IX+%FFFFFFFC)
041793 DD31FD              A  4065    	LD	IY,(IX+%FFFFFFFD)
041796 FD0712              A  4066    	LD	BC,(IY+%12)
041799 FD7E15              A  4067    	LD	A,(IY+%15)
04179C CD AA 46 04         A  4068    	CALL	__lcmpu
0417A0 38 2B               A  4069    	JR	C,L_95
                           A  4070    ; 1741	#if !FF_FS_READONLY
                           A  4071    ; 1742						if (!stretch) {		
                           A  4072    ; 1743							dp->sect = 0; r
                           A  4073    ; 1744						}
                           A  4074    ; 1745						clst = create_chain
                           A  4075    ; 1746						if (clst == 0) retu
                           A  4076    ; 1747						if (clst == 1) retu
                           A  4077    ; 1748						if (clst == 0xFFFFF
                           A  4078    ; 1749						if (dir_clear(fs, c
                           A  4079    ; 1750						if (FF_FS_EXFAT) dp
                           A  4080    ; 1751	#else
                           A  4081    ; 1752						if (!stretch) dp->s
                           A  4082    .LINE 1752
                           A  4083    
0417A2 DD2709              A  4084    	LD	HL,(IX+%9)
0417A5 CD 07 46 04         A  4085    	CALL	__icmpzero
0417A9 20 0E               A  4086    	JR	NZ,L_92
0417AB 01000000            A  4087    	LD	BC,0
0417AF DD3106              A  4088    	LD	IY,(IX+%6)
0417B2 FD0F17              A  4089    	LD	(IY+%17),BC
0417B5 FD361A00            A  4090    	LD	(IY+%1A),%0
0417B9                     A  4091    L_92:
                           A  4092    ; 1753						dp->sect = 0; retur
                           A  4093    .LINE 1753
                           A  4094    
0417B9 01000000            A  4095    	LD	BC,0
0417BD DD3106              A  4096    	LD	IY,(IX+%6)
0417C0 FD0F17              A  4097    	LD	(IY+%17),BC
0417C3 FD361A00            A  4098    	LD	(IY+%1A),%0
0417C7 21040000            A  4099    	LD	HL,4
0417CB 18 4F               A  4100    	JR	L_102
                           A  4101    ; 1754	#endif
                           A  4102    ; 1755					}
0417CD                     A  4103    L_95:
                           A  4104    .LINE 1755
                           A  4105    
                           A  4106    ; 1756					dp->clust = clst;		
                           A  4107    .LINE 1756
                           A  4108    
0417CD DD07F9              A  4109    	LD	BC,(IX+%FFFFFFF9)
0417D0 DD7EFC              A  4110    	LD	A,(IX+%FFFFFFFC)
0417D3 DD3106              A  4111    	LD	IY,(IX+%6)
0417D6 FD0F13              A  4112    	LD	(IY+%13),BC
0417D9 FD7716              A  4113    	LD	(IY+%16),A
                           A  4114    ; 1757					dp->sect = clst2sect(fs
                           A  4115    .LINE 1757
                           A  4116    
0417DC DD4EFC              A  4117    	LD	C,(IX+%FFFFFFFC)
0417DF 0600                A  4118    	LD	B,%0
0417E1 C5                  A  4119    	PUSH	BC
0417E2 DD07F9              A  4120    	LD	BC,(IX+%FFFFFFF9)
0417E5 C5                  A  4121    	PUSH	BC
0417E6 DD07FD              A  4122    	LD	BC,(IX+%FFFFFFFD)
0417E9 C5                  A  4123    	PUSH	BC
0417EA CD 51 11 04         A  4124    	CALL	_clst2sect
0417EE C1                  A  4125    	POP	BC
0417EF C1                  A  4126    	POP	BC
0417F0 C1                  A  4127    	POP	BC
0417F1 DD3106              A  4128    	LD	IY,(IX+%6)
0417F4 FD2F17              A  4129    	LD	(IY+%17),HL
0417F7 FD731A              A  4130    	LD	(IY+%1A),E
                           A  4131    ; 1758				}
                           A  4132    ; 1759			}
                           A  4133    ; 1760		}
0417FA                     A  4134    L_101:
                           A  4135    .LINE 1760
                           A  4136    
                           A  4137    ; 1761		dp->dptr = ofs;						
                           A  4138    .LINE 1761
                           A  4139    
0417FA DD07F5              A  4140    	LD	BC,(IX+%FFFFFFF5)
0417FD DD7EF8              A  4141    	LD	A,(IX+%FFFFFFF8)
041800 DD3106              A  4142    	LD	IY,(IX+%6)
041803 FD0F0F              A  4143    	LD	(IY+%F),BC
041806 FD7712              A  4144    	LD	(IY+%12),A
                           A  4145    ; 1762		dp->dir = fs->win + ofs % SS(fs);	
                           A  4146    .LINE 1762
                           A  4147    
041809 DD07ED              A  4148    	LD	BC,(IX+%FFFFFFED)
04180C DD31FD              A  4149    	LD	IY,(IX+%FFFFFFFD)
04180F ED232E              A  4150    	LEA	HL,IY+%2E
041812 09                  A  4151    	ADD	HL,BC
041813 DD3106              A  4152    	LD	IY,(IX+%6)
041816 FD2F1B              A  4153    	LD	(IY+%1B),HL
                           A  4154    ; 1763	
                           A  4155    ; 1764		return FR_OK;
                           A  4156    .LINE 1764
                           A  4157    
041819 B7                  A  4158    	OR	A,A
04181A ED62                A  4159    	SBC	HL,HL
                           A  4160    ; 1765	}
04181C                     A  4161    L_102:
                           A  4162    .LINE 1765
                           A  4163    
04181C DDF9                A  4164    	LD	SP,IX
04181E DDE1                A  4165    	POP	IX
041820 C9                  A  4166    	RET	
                           A  4167    
                           A  4168    
                           A  4169    ;**************************** _dir_next *******
                           A  4170    ;Name                         Addr/Register   S
                           A  4171    ;G_1                                  IX-23    
                           A  4172    ;G_2                                  IX-19    
                           A  4173    ;G_0                                  IX-15    
                           A  4174    ;ofs                                  IX-11    
                           A  4175    ;clst                                  IX-7    
                           A  4176    ;fs                                    IX-3    
                           A  4177    ;stretch                               IX+9    
                           A  4178    ;dp                                    IX+6    
                           A  4179    
                           A  4180    
                           A  4181    ; Stack Frame Size: 43 (bytes)
                           A  4182    ;       Spill Code: 0 (instruction)
                           A  4183    
                           A  4184    
                           A  4185    .ENDFUNC "dir_next",1765,"_dir_next"
                           A  4186    ; 1766	
                           A  4187    ; 1767	
                           A  4188    ; 1768	
                           A  4189    ; 1769	
                           A  4190    ; 1770	#if !FF_FS_READONLY
                           A  4191    ; 1771	/*-------------------------------------
                           A  4192    ; 1772	/* Directory handling - Reserve a block
                           A  4193    ; 1773	/*-------------------------------------
                           A  4194    ; 1774	
                           A  4195    ; 1775	static FRESULT dir_alloc (	/* FR_OK(0)
                           A  4196    ; 1776		DIR* dp,				/* Pointer 
                           A  4197    ; 1777		UINT n_ent				/* Number o
                           A  4198    ; 1778	)
                           A  4199    ; 1779	{
                           A  4200    ; 1780		FRESULT res;
                           A  4201    ; 1781		UINT n;
                           A  4202    ; 1782		FATFS *fs = dp->obj.fs;
                           A  4203    ; 1783	
                           A  4204    ; 1784	
                           A  4205    ; 1785		res = dir_sdi(dp, 0);
                           A  4206    ; 1786		if (res == FR_OK) {
                           A  4207    ; 1787			n = 0;
                           A  4208    ; 1788			do {
                           A  4209    ; 1789				res = move_window(fs, dp->s
                           A  4210    ; 1790				if (res != FR_OK) break;
                           A  4211    ; 1791	#if FF_FS_EXFAT
                           A  4212    ; 1792				if ((fs->fs_type == FS_EXFA
                           A  4213    ; 1793	#else
                           A  4214    ; 1794				if (dp->dir[DIR_Name] == DD
                           A  4215    ; 1795	#endif
                           A  4216    ; 1796					if (++n == n_ent) break
                           A  4217    ; 1797				} else {
                           A  4218    ; 1798					n = 0;				/* 
                           A  4219    ; 1799				}
                           A  4220    ; 1800				res = dir_next(dp, 1);	/* 
                           A  4221    ; 1801			} while (res == FR_OK);
                           A  4222    ; 1802		}
                           A  4223    ; 1803	
                           A  4224    ; 1804		if (res == FR_NO_FILE) res = FR_DEN
                           A  4225    ; 1805		return res;
                           A  4226    ; 1806	}
                           A  4227    ; 1807	
                           A  4228    ; 1808	#endif	/* !FF_FS_READONLY */
                           A  4229    ; 1809	
                           A  4230    ; 1810	
                           A  4231    ; 1811	
                           A  4232    ; 1812	
                           A  4233    ; 1813	/*-------------------------------------
                           A  4234    ; 1814	/* FAT: Directory handling - Load/Store
                           A  4235    ; 1815	/*-------------------------------------
                           A  4236    ; 1816	
                           A  4237    ; 1817	static DWORD ld_clust (	/* Returns the 
                           A  4238    ; 1818		FATFS* fs,			/* Pointer to t
                           A  4239    ; 1819		const BYTE* dir		/* Pointer to t
                           A  4240    ; 1820	)
                           A  4241    ; 1821	{
041821                     A  4242    _ld_clust:
                           A  4243    .DEFINE "_ld_clust"
                           A  4244    
                           A  4245    .VALUE _ld_clust
                           A  4246    
                           A  4247    .CLASS 3
                           A  4248    
                           A  4249    .TYPE 79
                           A  4250    
                           A  4251    .ENDEF
                           A  4252    
                           A  4253    .BEGFUNC "ld_clust",1821,"_ld_clust"
                           A  4254    
                           A  4255    .LINE 1821
                           A  4256    
                           A  4257    .DEFINE "fs"
                           A  4258    
                           A  4259    .CLASS 65
                           A  4260    
                           A  4261    .VALUE 6
                           A  4262    
                           A  4263    .TAG "NONAME0"
                           A  4264    
                           A  4265    .TYPE 40
                           A  4266    
                           A  4267    .ENDEF
                           A  4268    
                           A  4269    .DEFINE "dir"
                           A  4270    
                           A  4271    .CLASS 65
                           A  4272    
                           A  4273    .VALUE 9
                           A  4274    
                           A  4275    .TYPE 204
                           A  4276    
                           A  4277    .ENDEF
                           A  4278    
                           A  4279    .DEFINE "cl"
                           A  4280    
                           A  4281    .CLASS 65
                           A  4282    
                           A  4283    .VALUE -4
                           A  4284    
                           A  4285    .TYPE 15
                           A  4286    
                           A  4287    .ENDEF
                           A  4288    
041821 DDE5                A  4289    	PUSH	IX
041823 DD210000 00         A  4290    	LD	IX,0
041828 DD39                A  4291    	ADD	IX,SP
04182A C5                  A  4292    	PUSH	BC
04182B 3B                  A  4293    	DEC	SP
                           A  4294    ; 1822		DWORD cl;
                           A  4295    ; 1823	
                           A  4296    ; 1824		cl = ld_word(dir + DIR_FstClusLO);
                           A  4297    .LINE 1824
                           A  4298    
04182C DD3109              A  4299    	LD	IY,(IX+%9)
04182F ED031A              A  4300    	LEA	BC,IY+%1A
041832 C5                  A  4301    	PUSH	BC
041833 CD 7A 0E 04         A  4302    	CALL	_ld_word
041837 C1                  A  4303    	POP	BC
041838 E5C1                A  4304    	LD	BC,HL
04183A CD 95 44 04         A  4305    	CALL	__stoiu
04183E AF                  A  4306    	XOR	A,A
04183F DD2FFC              A  4307    	LD	(IX+%FFFFFFFC),HL
041842 DD77FF              A  4308    	LD	(IX+%FFFFFFFF),A
                           A  4309    ; 1825		if (fs->fs_type == FS_FAT32) {
                           A  4310    .LINE 1825
                           A  4311    
041845 DD3106              A  4312    	LD	IY,(IX+%6)
041848 FD7E00              A  4313    	LD	A,(IY+%0)
04184B FE03                A  4314    	CP	A,%3
04184D 20 2E               A  4315    	JR	NZ,L_104
                           A  4316    ; 1826			cl |= (DWORD)ld_word(dir + DIR_
                           A  4317    .LINE 1826
                           A  4318    
04184F DD3109              A  4319    	LD	IY,(IX+%9)
041852 ED0314              A  4320    	LEA	BC,IY+%14
041855 C5                  A  4321    	PUSH	BC
041856 CD 7A 0E 04         A  4322    	CALL	_ld_word
04185A C1                  A  4323    	POP	BC
04185B E5C1                A  4324    	LD	BC,HL
04185D CD 95 44 04         A  4325    	CALL	__stoiu
041861 AF                  A  4326    	XOR	A,A
041862 E5C1                A  4327    	LD	BC,HL
041864 2E10                A  4328    	LD	L,%10
041866 CD 07 47 04         A  4329    	CALL	__lshl
04186A 5F                  A  4330    	LD	E,A
04186B C5E1                A  4331    	LD	HL,BC
04186D DD07FC              A  4332    	LD	BC,(IX+%FFFFFFFC)
041870 DD7EFF              A  4333    	LD	A,(IX+%FFFFFFFF)
041873 CD F5 45 04         A  4334    	CALL	__lor
041877 DD2FFC              A  4335    	LD	(IX+%FFFFFFFC),HL
04187A DD73FF              A  4336    	LD	(IX+%FFFFFFFF),E
                           A  4337    ; 1827		}
04187D                     A  4338    L_104:
                           A  4339    .LINE 1827
                           A  4340    
                           A  4341    ; 1828	
                           A  4342    ; 1829		return cl;
                           A  4343    .LINE 1829
                           A  4344    
04187D DD27FC              A  4345    	LD	HL,(IX+%FFFFFFFC)
041880 DD5EFF              A  4346    	LD	E,(IX+%FFFFFFFF)
                           A  4347    ; 1830	}
                           A  4348    .LINE 1830
                           A  4349    
041883 DDF9                A  4350    	LD	SP,IX
041885 DDE1                A  4351    	POP	IX
041887 C9                  A  4352    	RET	
                           A  4353    
                           A  4354    
                           A  4355    ;**************************** _ld_clust *******
                           A  4356    ;Name                         Addr/Register   S
                           A  4357    ;cl                                    IX-4    
                           A  4358    ;dir                                   IX+9    
                           A  4359    ;fs                                    IX+6    
                           A  4360    
                           A  4361    
                           A  4362    ; Stack Frame Size: 16 (bytes)
                           A  4363    ;       Spill Code: 0 (instruction)
                           A  4364    
                           A  4365    
                           A  4366    .ENDFUNC "ld_clust",1830,"_ld_clust"
                           A  4367    ; 1831	
                           A  4368    ; 1832	
                           A  4369    ; 1833	#if !FF_FS_READONLY
                           A  4370    ; 1834	static void st_clust (
                           A  4371    ; 1835		FATFS* fs,	/* Pointer to the fs ob
                           A  4372    ; 1836		BYTE* dir,	/* Pointer to the key e
                           A  4373    ; 1837		DWORD cl	/* Value to be set */
                           A  4374    ; 1838	)
                           A  4375    ; 1839	{
                           A  4376    ; 1840		st_word(dir + DIR_FstClusLO, (WORD)
                           A  4377    ; 1841		if (fs->fs_type == FS_FAT32) {
                           A  4378    ; 1842			st_word(dir + DIR_FstClusHI, (W
                           A  4379    ; 1843		}
                           A  4380    ; 1844	}
                           A  4381    ; 1845	#endif
                           A  4382    ; 1846	
                           A  4383    ; 1847	
                           A  4384    ; 1848	
                           A  4385    ; 1849	#if FF_USE_LFN
                           A  4386    ; 1850	/*-------------------------------------
                           A  4387    ; 1851	/* FAT-LFN: Compare a part of file name
                           A  4388    ; 1852	/*-------------------------------------
                           A  4389    ; 1853	
                           A  4390    ; 1854	static int cmp_lfn (		/* 1:matche
                           A  4391    ; 1855		const WCHAR* lfnbuf,	/* Pointer 
                           A  4392    ; 1856		BYTE* dir				/* Pointer 
                           A  4393    ; 1857	)
                           A  4394    ; 1858	{
041888                     A  4395    _cmp_lfn:
                           A  4396    .DEFINE "_cmp_lfn"
                           A  4397    
                           A  4398    .VALUE _cmp_lfn
                           A  4399    
                           A  4400    .CLASS 3
                           A  4401    
                           A  4402    .TYPE 68
                           A  4403    
                           A  4404    .ENDEF
                           A  4405    
                           A  4406    .BEGFUNC "cmp_lfn",1858,"_cmp_lfn"
                           A  4407    
                           A  4408    .LINE 1858
                           A  4409    
                           A  4410    .DEFINE "lfnbuf"
                           A  4411    
                           A  4412    .CLASS 65
                           A  4413    
                           A  4414    .VALUE 6
                           A  4415    
                           A  4416    .TYPE 205
                           A  4417    
                           A  4418    .ENDEF
                           A  4419    
                           A  4420    .DEFINE "dir"
                           A  4421    
                           A  4422    .CLASS 65
                           A  4423    
                           A  4424    .VALUE 9
                           A  4425    
                           A  4426    .TYPE 44
                           A  4427    
                           A  4428    .ENDEF
                           A  4429    
                           A  4430    .DEFINE "i"
                           A  4431    
                           A  4432    .CLASS 65
                           A  4433    
                           A  4434    .VALUE -3
                           A  4435    
                           A  4436    .TYPE 14
                           A  4437    
                           A  4438    .ENDEF
                           A  4439    
                           A  4440    .DEFINE "s"
                           A  4441    
                           A  4442    .CLASS 65
                           A  4443    
                           A  4444    .VALUE -6
                           A  4445    
                           A  4446    .TYPE 14
                           A  4447    
                           A  4448    .ENDEF
                           A  4449    
                           A  4450    .DEFINE "wc"
                           A  4451    
                           A  4452    .CLASS 65
                           A  4453    
                           A  4454    .VALUE -8
                           A  4455    
                           A  4456    .TYPE 13
                           A  4457    
                           A  4458    .ENDEF
                           A  4459    
                           A  4460    .DEFINE "uc"
                           A  4461    
                           A  4462    .CLASS 65
                           A  4463    
                           A  4464    .VALUE -10
                           A  4465    
                           A  4466    .TYPE 13
                           A  4467    
                           A  4468    .ENDEF
                           A  4469    
041888 DDE5                A  4470    	PUSH	IX
04188A DD210000 00         A  4471    	LD	IX,0
04188F DD39                A  4472    	ADD	IX,SP
041891 ED22F2              A  4473    	LEA	HL,IX+%FFFFFFF2
041894 F9                  A  4474    	LD	SP,HL
                           A  4475    ; 1859		UINT i, s;
                           A  4476    ; 1860		WCHAR wc, uc;
                           A  4477    ; 1861	
                           A  4478    ; 1862	
                           A  4479    ; 1863		if (ld_word(dir + LDIR_FstClusLO) !
                           A  4480    .LINE 1863
                           A  4481    
041895 DD3109              A  4482    	LD	IY,(IX+%9)
041898 ED031A              A  4483    	LEA	BC,IY+%1A
04189B C5                  A  4484    	PUSH	BC
04189C CD 7A 0E 04         A  4485    	CALL	_ld_word
0418A0 C1                  A  4486    	POP	BC
0418A1 CD FA 46 04         A  4487    	CALL	__scmpzero
0418A5 28 07               A  4488    	JR	Z,L_107
0418A7 B7                  A  4489    	OR	A,A
0418A8 ED62                A  4490    	SBC	HL,HL
0418AA C3 B1 19 04         A  4491    	JR	L_124
0418AE                     A  4492    L_107:
                           A  4493    ; 1864	
                           A  4494    ; 1865		i = ((dir[LDIR_Ord] & 0x3F) - 1) * 
                           A  4495    .LINE 1865
                           A  4496    
0418AE DD2709              A  4497    	LD	HL,(IX+%9)
0418B1 7E                  A  4498    	LD	A,(HL)
0418B2 E63F                A  4499    	AND	A,%3F
0418B4 B7ED62              A  4500    	UEXT	HL
0418B7 6F                  A  4501    	LD	L,A
0418B8 2B                  A  4502    	DEC	HL
0418B9 3E0D                A  4503    	LD	A,%D
0418BB CD 6D 47 04         A  4504    	CALL	__imul_b
0418BF DD2FFD              A  4505    	LD	(IX+%FFFFFFFD),HL
                           A  4506    ; 1866	
                           A  4507    ; 1867		for (wc = 1, s = 0; s < 13; s++) {	
                           A  4508    .LINE 1867
                           A  4509    
0418C2 DD36F801            A  4510    	LD	(IX+%FFFFFFF8),%1
0418C6 DD36F900            A  4511    	LD	(IX+%FFFFFFF9),%0
0418CA 01000000            A  4512    	LD	BC,0
0418CE DD0FFA              A  4513    	LD	(IX+%FFFFFFFA),BC
0418D1 C3 79 19 04         A  4514    	JR	L_118
0418D5                     A  4515    L_116:
                           A  4516    ; 1868			uc = ld_word(dir + LfnOfs[s]);	
                           A  4517    .LINE 1868
                           A  4518    
0418D5 01 AE 53 04         A  4519    	LD	BC,_LfnOfs
0418D9 DD27FA              A  4520    	LD	HL,(IX+%FFFFFFFA)
0418DC 09                  A  4521    	ADD	HL,BC
0418DD 7E                  A  4522    	LD	A,(HL)
0418DE B7ED62              A  4523    	UEXT	HL
0418E1 6F                  A  4524    	LD	L,A
0418E2 DD0709              A  4525    	LD	BC,(IX+%9)
0418E5 09                  A  4526    	ADD	HL,BC
0418E6 E5                  A  4527    	PUSH	HL
0418E7 CD 7A 0E 04         A  4528    	CALL	_ld_word
0418EB C1                  A  4529    	POP	BC
0418EC DD75F6              A  4530    	LD	(IX+%FFFFFFF6),L
0418EF DD74F7              A  4531    	LD	(IX+%FFFFFFF7),H
                           A  4532    ; 1869			if (wc != 0) {
                           A  4533    .LINE 1869
                           A  4534    
0418F2 DD27F8              A  4535    	LD	HL,(IX+%FFFFFFF8)
0418F5 CD FA 46 04         A  4536    	CALL	__scmpzero
0418F9 28 65               A  4537    	JR	Z,L_115
                           A  4538    ; 1870				if (i >= FF_MAX_LFN + 1 || 
                           A  4539    .LINE 1870
                           A  4540    
0418FB 01000100            A  4541    	LD	BC,256
0418FF DD27FD              A  4542    	LD	HL,(IX+%FFFFFFFD)
041902 B7                  A  4543    	OR	A,A
041903 ED42                A  4544    	SBC	HL,BC
041905 30 49               A  4545    	JR	NC,L_111
041907 DD27FD              A  4546    	LD	HL,(IX+%FFFFFFFD)
04190A DD07FD              A  4547    	LD	BC,(IX+%FFFFFFFD)
04190D 03                  A  4548    	INC	BC
04190E DD0FFD              A  4549    	LD	(IX+%FFFFFFFD),BC
041911 29                  A  4550    	ADD	HL,HL
041912 DD0706              A  4551    	LD	BC,(IX+%6)
041915 09                  A  4552    	ADD	HL,BC
041916 ED07                A  4553    	LD	BC,(HL)
041918 CD 95 44 04         A  4554    	CALL	__stoiu
04191C 0E00                A  4555    	LD	C,%0
04191E 0600                A  4556    	LD	B,%0
041920 C5                  A  4557    	PUSH	BC
041921 E5                  A  4558    	PUSH	HL
041922 CD 8D 0C 04         A  4559    	CALL	_ff_wtoupper
041926 C1                  A  4560    	POP	BC
041927 C1                  A  4561    	POP	BC
041928 DD73F5              A  4562    	LD	(IX+%FFFFFFF5),E
04192B DD2FF2              A  4563    	LD	(IX+%FFFFFFF2),HL
04192E DD07F6              A  4564    	LD	BC,(IX+%FFFFFFF6)
041931 CD 95 44 04         A  4565    	CALL	__stoiu
041935 0E00                A  4566    	LD	C,%0
041937 0600                A  4567    	LD	B,%0
041939 C5                  A  4568    	PUSH	BC
04193A E5                  A  4569    	PUSH	HL
04193B CD 8D 0C 04         A  4570    	CALL	_ff_wtoupper
04193F C1                  A  4571    	POP	BC
041940 C1                  A  4572    	POP	BC
041941 7B                  A  4573    	LD	A,E
041942 E5C1                A  4574    	LD	BC,HL
041944 DD5EF5              A  4575    	LD	E,(IX+%FFFFFFF5)
041947 DD27F2              A  4576    	LD	HL,(IX+%FFFFFFF2)
04194A CD AA 46 04         A  4577    	CALL	__lcmpu
04194E 28 05               A  4578    	JR	Z,L_112
041950                     A  4579    L_111:
                           A  4580    ; 1871					return 0;				
                           A  4581    .LINE 1871
                           A  4582    
041950 B7                  A  4583    	OR	A,A
041951 ED62                A  4584    	SBC	HL,HL
041953 18 5C               A  4585    	JR	L_124
                           A  4586    ; 1872				}
041955                     A  4587    L_112:
                           A  4588    .LINE 1872
                           A  4589    
                           A  4590    ; 1873				wc = uc;
                           A  4591    .LINE 1873
                           A  4592    
041955 DD07F6              A  4593    	LD	BC,(IX+%FFFFFFF6)
041958 DD71F8              A  4594    	LD	(IX+%FFFFFFF8),C
04195B DD70F9              A  4595    	LD	(IX+%FFFFFFF9),B
                           A  4596    ; 1874			} else {
                           A  4597    .LINE 1874
                           A  4598    
04195E 18 12               A  4599    	JR	L_117
041960                     A  4600    L_115:
                           A  4601    ; 1875				if (uc != 0xFFFF) return 0;
                           A  4602    .LINE 1875
                           A  4603    
041960 4901FFFF            A  4604    	LD.LIS	BC,65535
041964 DD27F6              A  4605    	LD	HL,(IX+%FFFFFFF6)
041967 B7                  A  4606    	OR	A,A
041968 40ED42              A  4607    	SBC.SIS	HL,BC
04196B 28 05               A  4608    	JR	Z,L_117
04196D B7                  A  4609    	OR	A,A
04196E ED62                A  4610    	SBC	HL,HL
041970 18 3F               A  4611    	JR	L_124
                           A  4612    ; 1876			}
                           A  4613    ; 1877		}
041972                     A  4614    L_117:
                           A  4615    .LINE 1877
                           A  4616    
041972 DD07FA              A  4617    	LD	BC,(IX+%FFFFFFFA)
041975 03                  A  4618    	INC	BC
041976 DD0FFA              A  4619    	LD	(IX+%FFFFFFFA),BC
041979                     A  4620    L_118:
041979 010D0000            A  4621    	LD	BC,13
04197D DD27FA              A  4622    	LD	HL,(IX+%FFFFFFFA)
041980 B7                  A  4623    	OR	A,A
041981 ED42                A  4624    	SBC	HL,BC
041983 DA D5 18 04         A  4625    	JR	C,L_116
                           A  4626    ; 1878	
                           A  4627    ; 1879		if ((dir[LDIR_Ord] & LLEF) && wc &&
                           A  4628    .LINE 1879
                           A  4629    
041987 DD2709              A  4630    	LD	HL,(IX+%9)
04198A 7E                  A  4631    	LD	A,(HL)
04198B E640                A  4632    	AND	A,%40
04198D 28 1E               A  4633    	JR	Z,L_123
04198F DD27F8              A  4634    	LD	HL,(IX+%FFFFFFF8)
041992 CD FA 46 04         A  4635    	CALL	__scmpzero
041996 28 15               A  4636    	JR	Z,L_123
041998 DD27FD              A  4637    	LD	HL,(IX+%FFFFFFFD)
04199B 29                  A  4638    	ADD	HL,HL
04199C DD0706              A  4639    	LD	BC,(IX+%6)
04199F 09                  A  4640    	ADD	HL,BC
0419A0 ED27                A  4641    	LD	HL,(HL)
0419A2 CD FA 46 04         A  4642    	CALL	__scmpzero
0419A6 28 05               A  4643    	JR	Z,L_123
0419A8 B7                  A  4644    	OR	A,A
0419A9 ED62                A  4645    	SBC	HL,HL
0419AB 18 04               A  4646    	JR	L_124
0419AD                     A  4647    L_123:
                           A  4648    ; 1880	
                           A  4649    ; 1881		return 1;		/* The part of LFN 
                           A  4650    .LINE 1881
                           A  4651    
0419AD 21010000            A  4652    	LD	HL,1
                           A  4653    ; 1882	}
0419B1                     A  4654    L_124:
                           A  4655    .LINE 1882
                           A  4656    
0419B1 DDF9                A  4657    	LD	SP,IX
0419B3 DDE1                A  4658    	POP	IX
0419B5 C9                  A  4659    	RET	
                           A  4660    
                           A  4661    
                           A  4662    ;**************************** _cmp_lfn ********
                           A  4663    ;Name                         Addr/Register   S
                           A  4664    ;_ff_wtoupper                        IMPORT  --
                           A  4665    ;_LfnOfs                             STATIC    
                           A  4666    ;uc                                   IX-10    
                           A  4667    ;wc                                    IX-8    
                           A  4668    ;s                                     IX-6    
                           A  4669    ;i                                     IX-3    
                           A  4670    ;dir                                   IX+9    
                           A  4671    ;lfnbuf                                IX+6    
                           A  4672    
                           A  4673    
                           A  4674    ; Stack Frame Size: 26 (bytes)
                           A  4675    ;       Spill Code: 0 (instruction)
                           A  4676    
                           A  4677    
                           A  4678    .ENDFUNC "cmp_lfn",1882,"_cmp_lfn"
                           A  4679    ; 1883	
                           A  4680    ; 1884	
                           A  4681    ; 1885	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A  4682    ; 1886	/*-------------------------------------
                           A  4683    ; 1887	/* FAT-LFN: Pick a part of file name fr
                           A  4684    ; 1888	/*-------------------------------------
                           A  4685    ; 1889	
                           A  4686    ; 1890	static int pick_lfn (	/* 1:succeeded,
                           A  4687    ; 1891		WCHAR* lfnbuf,		/* Pointer to t
                           A  4688    ; 1892		BYTE* dir			/* Pointer to t
                           A  4689    ; 1893	)
                           A  4690    ; 1894	{
0419B6                     A  4691    _pick_lfn:
                           A  4692    .DEFINE "_pick_lfn"
                           A  4693    
                           A  4694    .VALUE _pick_lfn
                           A  4695    
                           A  4696    .CLASS 3
                           A  4697    
                           A  4698    .TYPE 68
                           A  4699    
                           A  4700    .ENDEF
                           A  4701    
                           A  4702    .BEGFUNC "pick_lfn",1894,"_pick_lfn"
                           A  4703    
                           A  4704    .LINE 1894
                           A  4705    
                           A  4706    .DEFINE "lfnbuf"
                           A  4707    
                           A  4708    .CLASS 65
                           A  4709    
                           A  4710    .VALUE 6
                           A  4711    
                           A  4712    .TYPE 45
                           A  4713    
                           A  4714    .ENDEF
                           A  4715    
                           A  4716    .DEFINE "dir"
                           A  4717    
                           A  4718    .CLASS 65
                           A  4719    
                           A  4720    .VALUE 9
                           A  4721    
                           A  4722    .TYPE 44
                           A  4723    
                           A  4724    .ENDEF
                           A  4725    
                           A  4726    .DEFINE "i"
                           A  4727    
                           A  4728    .CLASS 65
                           A  4729    
                           A  4730    .VALUE -3
                           A  4731    
                           A  4732    .TYPE 14
                           A  4733    
                           A  4734    .ENDEF
                           A  4735    
                           A  4736    .DEFINE "s"
                           A  4737    
                           A  4738    .CLASS 65
                           A  4739    
                           A  4740    .VALUE -6
                           A  4741    
                           A  4742    .TYPE 14
                           A  4743    
                           A  4744    .ENDEF
                           A  4745    
                           A  4746    .DEFINE "wc"
                           A  4747    
                           A  4748    .CLASS 65
                           A  4749    
                           A  4750    .VALUE -8
                           A  4751    
                           A  4752    .TYPE 13
                           A  4753    
                           A  4754    .ENDEF
                           A  4755    
                           A  4756    .DEFINE "uc"
                           A  4757    
                           A  4758    .CLASS 65
                           A  4759    
                           A  4760    .VALUE -10
                           A  4761    
                           A  4762    .TYPE 13
                           A  4763    
                           A  4764    .ENDEF
                           A  4765    
0419B6 DDE5                A  4766    	PUSH	IX
0419B8 DD210000 00         A  4767    	LD	IX,0
0419BD DD39                A  4768    	ADD	IX,SP
0419BF C5                  A  4769    	PUSH	BC
0419C0 C5                  A  4770    	PUSH	BC
0419C1 C5                  A  4771    	PUSH	BC
0419C2 3B                  A  4772    	DEC	SP
                           A  4773    ; 1895		UINT i, s;
                           A  4774    ; 1896		WCHAR wc, uc;
                           A  4775    ; 1897	
                           A  4776    ; 1898	
                           A  4777    ; 1899		if (ld_word(dir + LDIR_FstClusLO) !
                           A  4778    .LINE 1899
                           A  4779    
0419C3 DD3109              A  4780    	LD	IY,(IX+%9)
0419C6 ED031A              A  4781    	LEA	BC,IY+%1A
0419C9 C5                  A  4782    	PUSH	BC
0419CA CD 7A 0E 04         A  4783    	CALL	_ld_word
0419CE C1                  A  4784    	POP	BC
0419CF CD FA 46 04         A  4785    	CALL	__scmpzero
0419D3 28 07               A  4786    	JR	Z,L_126
0419D5 B7                  A  4787    	OR	A,A
0419D6 ED62                A  4788    	SBC	HL,HL
0419D8 C3 B3 1A 04         A  4789    	JR	L_143
0419DC                     A  4790    L_126:
                           A  4791    ; 1900	
                           A  4792    ; 1901		i = ((dir[LDIR_Ord] & ~LLEF) - 1) *
                           A  4793    .LINE 1901
                           A  4794    
0419DC DD2709              A  4795    	LD	HL,(IX+%9)
0419DF 7E                  A  4796    	LD	A,(HL)
0419E0 CBB7                A  4797    	RES	%6,A
0419E2 B7ED62              A  4798    	UEXT	HL
0419E5 6F                  A  4799    	LD	L,A
0419E6 2B                  A  4800    	DEC	HL
0419E7 3E0D                A  4801    	LD	A,%D
0419E9 CD 6D 47 04         A  4802    	CALL	__imul_b
0419ED DD2FFD              A  4803    	LD	(IX+%FFFFFFFD),HL
                           A  4804    ; 1902	
                           A  4805    ; 1903		for (wc = 1, s = 0; s < 13; s++) {	
                           A  4806    .LINE 1903
                           A  4807    
0419F0 DD36F801            A  4808    	LD	(IX+%FFFFFFF8),%1
0419F4 DD36F900            A  4809    	LD	(IX+%FFFFFFF9),%0
0419F8 01000000            A  4810    	LD	BC,0
0419FC DD0FFA              A  4811    	LD	(IX+%FFFFFFFA),BC
0419FF 18 73               A  4812    	JR	L_136
041A01                     A  4813    L_134:
                           A  4814    ; 1904			uc = ld_word(dir + LfnOfs[s]);	
                           A  4815    .LINE 1904
                           A  4816    
041A01 01 AE 53 04         A  4817    	LD	BC,_LfnOfs
041A05 DD27FA              A  4818    	LD	HL,(IX+%FFFFFFFA)
041A08 09                  A  4819    	ADD	HL,BC
041A09 7E                  A  4820    	LD	A,(HL)
041A0A B7ED62              A  4821    	UEXT	HL
041A0D 6F                  A  4822    	LD	L,A
041A0E DD0709              A  4823    	LD	BC,(IX+%9)
041A11 09                  A  4824    	ADD	HL,BC
041A12 E5                  A  4825    	PUSH	HL
041A13 CD 7A 0E 04         A  4826    	CALL	_ld_word
041A17 C1                  A  4827    	POP	BC
041A18 DD75F6              A  4828    	LD	(IX+%FFFFFFF6),L
041A1B DD74F7              A  4829    	LD	(IX+%FFFFFFF7),H
                           A  4830    ; 1905			if (wc != 0) {
                           A  4831    .LINE 1905
                           A  4832    
041A1E DD27F8              A  4833    	LD	HL,(IX+%FFFFFFF8)
041A21 CD FA 46 04         A  4834    	CALL	__scmpzero
041A25 28 34               A  4835    	JR	Z,L_133
                           A  4836    ; 1906				if (i >= FF_MAX_LFN + 1) re
                           A  4837    .LINE 1906
                           A  4838    
041A27 01000100            A  4839    	LD	BC,256
041A2B DD27FD              A  4840    	LD	HL,(IX+%FFFFFFFD)
041A2E B7                  A  4841    	OR	A,A
041A2F ED42                A  4842    	SBC	HL,BC
041A31 38 05               A  4843    	JR	C,L_130
041A33 B7                  A  4844    	OR	A,A
041A34 ED62                A  4845    	SBC	HL,HL
041A36 18 7B               A  4846    	JR	L_143
041A38                     A  4847    L_130:
                           A  4848    ; 1907				lfnbuf[i++] = wc = uc;		
                           A  4849    .LINE 1907
                           A  4850    
041A38 DD07F6              A  4851    	LD	BC,(IX+%FFFFFFF6)
041A3B DD71F8              A  4852    	LD	(IX+%FFFFFFF8),C
041A3E DD70F9              A  4853    	LD	(IX+%FFFFFFF9),B
041A41 DD27FD              A  4854    	LD	HL,(IX+%FFFFFFFD)
041A44 29                  A  4855    	ADD	HL,HL
041A45 DD0706              A  4856    	LD	BC,(IX+%6)
041A48 09                  A  4857    	ADD	HL,BC
041A49 DD7EF6              A  4858    	LD	A,(IX+%FFFFFFF6)
041A4C 77                  A  4859    	LD	(HL),A
041A4D 23                  A  4860    	INC	HL
041A4E DD7EF7              A  4861    	LD	A,(IX+%FFFFFFF7)
041A51 77                  A  4862    	LD	(HL),A
041A52 DD07FD              A  4863    	LD	BC,(IX+%FFFFFFFD)
041A55 03                  A  4864    	INC	BC
041A56 DD0FFD              A  4865    	LD	(IX+%FFFFFFFD),BC
                           A  4866    ; 1908			} else {
                           A  4867    .LINE 1908
                           A  4868    
041A59 18 12               A  4869    	JR	L_135
041A5B                     A  4870    L_133:
                           A  4871    ; 1909				if (uc != 0xFFFF) return 0;
                           A  4872    .LINE 1909
                           A  4873    
041A5B 4901FFFF            A  4874    	LD.LIS	BC,65535
041A5F DD27F6              A  4875    	LD	HL,(IX+%FFFFFFF6)
041A62 B7                  A  4876    	OR	A,A
041A63 40ED42              A  4877    	SBC.SIS	HL,BC
041A66 28 05               A  4878    	JR	Z,L_135
041A68 B7                  A  4879    	OR	A,A
041A69 ED62                A  4880    	SBC	HL,HL
041A6B 18 46               A  4881    	JR	L_143
                           A  4882    ; 1910			}
                           A  4883    ; 1911		}
041A6D                     A  4884    L_135:
                           A  4885    .LINE 1911
                           A  4886    
041A6D DD07FA              A  4887    	LD	BC,(IX+%FFFFFFFA)
041A70 03                  A  4888    	INC	BC
041A71 DD0FFA              A  4889    	LD	(IX+%FFFFFFFA),BC
041A74                     A  4890    L_136:
041A74 010D0000            A  4891    	LD	BC,13
041A78 DD27FA              A  4892    	LD	HL,(IX+%FFFFFFFA)
041A7B B7                  A  4893    	OR	A,A
041A7C ED42                A  4894    	SBC	HL,BC
041A7E 38 81               A  4895    	JR	C,L_134
                           A  4896    ; 1912	
                           A  4897    ; 1913		if (dir[LDIR_Ord] & LLEF && wc != 0
                           A  4898    .LINE 1913
                           A  4899    
041A80 DD2709              A  4900    	LD	HL,(IX+%9)
041A83 7E                  A  4901    	LD	A,(HL)
041A84 E640                A  4902    	AND	A,%40
041A86 28 27               A  4903    	JR	Z,L_142
041A88 DD27F8              A  4904    	LD	HL,(IX+%FFFFFFF8)
041A8B CD FA 46 04         A  4905    	CALL	__scmpzero
041A8F 28 1E               A  4906    	JR	Z,L_142
                           A  4907    ; 1914			if (i >= FF_MAX_LFN + 1) return
                           A  4908    .LINE 1914
                           A  4909    
041A91 01000100            A  4910    	LD	BC,256
041A95 DD27FD              A  4911    	LD	HL,(IX+%FFFFFFFD)
041A98 B7                  A  4912    	OR	A,A
041A99 ED42                A  4913    	SBC	HL,BC
041A9B 38 05               A  4914    	JR	C,L_139
041A9D B7                  A  4915    	OR	A,A
041A9E ED62                A  4916    	SBC	HL,HL
041AA0 18 11               A  4917    	JR	L_143
041AA2                     A  4918    L_139:
                           A  4919    ; 1915			lfnbuf[i] = 0;
                           A  4920    .LINE 1915
                           A  4921    
041AA2 DD27FD              A  4922    	LD	HL,(IX+%FFFFFFFD)
041AA5 29                  A  4923    	ADD	HL,HL
041AA6 DD0706              A  4924    	LD	BC,(IX+%6)
041AA9 09                  A  4925    	ADD	HL,BC
041AAA 3600                A  4926    	LD	(HL),%0
041AAC 23                  A  4927    	INC	HL
041AAD 3600                A  4928    	LD	(HL),%0
                           A  4929    ; 1916		}
041AAF                     A  4930    L_142:
                           A  4931    .LINE 1916
                           A  4932    
                           A  4933    ; 1917	
                           A  4934    ; 1918		return 1;		/* The part of LFN 
                           A  4935    .LINE 1918
                           A  4936    
041AAF 21010000            A  4937    	LD	HL,1
                           A  4938    ; 1919	}
041AB3                     A  4939    L_143:
                           A  4940    .LINE 1919
                           A  4941    
041AB3 DDF9                A  4942    	LD	SP,IX
041AB5 DDE1                A  4943    	POP	IX
041AB7 C9                  A  4944    	RET	
                           A  4945    
                           A  4946    
                           A  4947    ;**************************** _pick_lfn *******
                           A  4948    ;Name                         Addr/Register   S
                           A  4949    ;_LfnOfs                             STATIC    
                           A  4950    ;uc                                   IX-10    
                           A  4951    ;wc                                    IX-8    
                           A  4952    ;s                                     IX-6    
                           A  4953    ;i                                     IX-3    
                           A  4954    ;dir                                   IX+9    
                           A  4955    ;lfnbuf                                IX+6    
                           A  4956    
                           A  4957    
                           A  4958    ; Stack Frame Size: 22 (bytes)
                           A  4959    ;       Spill Code: 0 (instruction)
                           A  4960    
                           A  4961    
                           A  4962    .ENDFUNC "pick_lfn",1919,"_pick_lfn"
                           A  4963    ; 1920	#endif
                           A  4964    ; 1921	
                           A  4965    ; 1922	
                           A  4966    ; 1923	#if !FF_FS_READONLY
                           A  4967    ; 1924	/*-------------------------------------
                           A  4968    ; 1925	/* FAT-LFN: Create an entry of LFN entr
                           A  4969    ; 1926	/*-------------------------------------
                           A  4970    ; 1927	
                           A  4971    ; 1928	static void put_lfn (
                           A  4972    ; 1929		const WCHAR* lfn,	/* Pointer to t
                           A  4973    ; 1930		BYTE* dir,			/* Pointer to t
                           A  4974    ; 1931		BYTE ord,			/* LFN order (1
                           A  4975    ; 1932		BYTE sum			/* Checksum of 
                           A  4976    ; 1933	)
                           A  4977    ; 1934	{
                           A  4978    ; 1935		UINT i, s;
                           A  4979    ; 1936		WCHAR wc;
                           A  4980    ; 1937	
                           A  4981    ; 1938	
                           A  4982    ; 1939		dir[LDIR_Chksum] = sum;			/* 
                           A  4983    ; 1940		dir[LDIR_Attr] = AM_LFN;		/* 
                           A  4984    ; 1941		dir[LDIR_Type] = 0;
                           A  4985    ; 1942		st_word(dir + LDIR_FstClusLO, 0);
                           A  4986    ; 1943	
                           A  4987    ; 1944		i = (ord - 1) * 13;				/* 
                           A  4988    ; 1945		s = wc = 0;
                           A  4989    ; 1946		do {
                           A  4990    ; 1947			if (wc != 0xFFFF) wc = lfn[i++]
                           A  4991    ; 1948			st_word(dir + LfnOfs[s], wc);	
                           A  4992    ; 1949			if (wc == 0) wc = 0xFFFF;		
                           A  4993    ; 1950		} while (++s < 13);
                           A  4994    ; 1951		if (wc == 0xFFFF || !lfn[i]) ord |=
                           A  4995    ; 1952		dir[LDIR_Ord] = ord;			/* 
                           A  4996    ; 1953	}
                           A  4997    ; 1954	
                           A  4998    ; 1955	#endif	/* !FF_FS_READONLY */
                           A  4999    ; 1956	#endif	/* FF_USE_LFN */
                           A  5000    ; 1957	
                           A  5001    ; 1958	
                           A  5002    ; 1959	
                           A  5003    ; 1960	#if FF_USE_LFN && !FF_FS_READONLY
                           A  5004    ; 1961	/*-------------------------------------
                           A  5005    ; 1962	/* FAT-LFN: Create a Numbered SFN      
                           A  5006    ; 1963	/*-------------------------------------
                           A  5007    ; 1964	
                           A  5008    ; 1965	static void gen_numname (
                           A  5009    ; 1966		BYTE* dst,			/* Pointer to t
                           A  5010    ; 1967		const BYTE* src,	/* Pointer to S
                           A  5011    ; 1968		const WCHAR* lfn,	/* Pointer to L
                           A  5012    ; 1969		UINT seq			/* Sequence num
                           A  5013    ; 1970	)
                           A  5014    ; 1971	{
                           A  5015    ; 1972		BYTE ns[8], c;
                           A  5016    ; 1973		UINT i, j;
                           A  5017    ; 1974		WCHAR wc;
                           A  5018    ; 1975		DWORD sreg;
                           A  5019    ; 1976	
                           A  5020    ; 1977	
                           A  5021    ; 1978		memcpy(dst, src, 11);	/* Prepare 
                           A  5022    ; 1979	
                           A  5023    ; 1980		if (seq > 5) {	/* In case of many 
                           A  5024    ; 1981			sreg = seq;
                           A  5025    ; 1982			while (*lfn) {	/* Create a CRC
                           A  5026    ; 1983				wc = *lfn++;
                           A  5027    ; 1984				for (i = 0; i < 16; i++) {
                           A  5028    ; 1985					sreg = (sreg << 1) + (w
                           A  5029    ; 1986					wc >>= 1;
                           A  5030    ; 1987					if (sreg & 0x10000) sre
                           A  5031    ; 1988				}
                           A  5032    ; 1989			}
                           A  5033    ; 1990			seq = (UINT)sreg;
                           A  5034    ; 1991		}
                           A  5035    ; 1992	
                           A  5036    ; 1993		/* Make suffix (~ + hexdecimal) */
                           A  5037    ; 1994		i = 7;
                           A  5038    ; 1995		do {
                           A  5039    ; 1996			c = (BYTE)((seq % 16) + '0'); s
                           A  5040    ; 1997			if (c > '9') c += 7;
                           A  5041    ; 1998			ns[i--] = c;
                           A  5042    ; 1999		} while (i && seq);
                           A  5043    ; 2000		ns[i] = '~';
                           A  5044    ; 2001	
                           A  5045    ; 2002		/* Append the suffix to the SFN bod
                           A  5046    ; 2003		for (j = 0; j < i && dst[j] != ' ';
                           A  5047    ; 2004			if (dbc_1st(dst[j])) {	/* To a
                           A  5048    ; 2005				if (j == i - 1) break;
                           A  5049    ; 2006				j++;
                           A  5050    ; 2007			}
                           A  5051    ; 2008		}
                           A  5052    ; 2009		do {	/* Append the suffix */
                           A  5053    ; 2010			dst[j++] = (i < 8) ? ns[i++] : 
                           A  5054    ; 2011		} while (j < 8);
                           A  5055    ; 2012	}
                           A  5056    ; 2013	#endif	/* FF_USE_LFN && !FF_FS_READONL
                           A  5057    ; 2014	
                           A  5058    ; 2015	
                           A  5059    ; 2016	
                           A  5060    ; 2017	#if FF_USE_LFN
                           A  5061    ; 2018	/*-------------------------------------
                           A  5062    ; 2019	/* FAT-LFN: Calculate checksum of an SF
                           A  5063    ; 2020	/*-------------------------------------
                           A  5064    ; 2021	
                           A  5065    ; 2022	static BYTE sum_sfn (
                           A  5066    ; 2023		const BYTE* dir		/* Pointer to t
                           A  5067    ; 2024	)
                           A  5068    ; 2025	{
041AB8                     A  5069    _sum_sfn:
                           A  5070    .DEFINE "_sum_sfn"
                           A  5071    
                           A  5072    .VALUE _sum_sfn
                           A  5073    
                           A  5074    .CLASS 3
                           A  5075    
                           A  5076    .TYPE 76
                           A  5077    
                           A  5078    .ENDEF
                           A  5079    
                           A  5080    .BEGFUNC "sum_sfn",2025,"_sum_sfn"
                           A  5081    
                           A  5082    .LINE 2025
                           A  5083    
                           A  5084    .DEFINE "dir"
                           A  5085    
                           A  5086    .CLASS 65
                           A  5087    
                           A  5088    .VALUE 6
                           A  5089    
                           A  5090    .TYPE 204
                           A  5091    
                           A  5092    .ENDEF
                           A  5093    
                           A  5094    .DEFINE "sum"
                           A  5095    
                           A  5096    .CLASS 65
                           A  5097    
                           A  5098    .VALUE -1
                           A  5099    
                           A  5100    .TYPE 12
                           A  5101    
                           A  5102    .ENDEF
                           A  5103    
                           A  5104    .DEFINE "n"
                           A  5105    
                           A  5106    .CLASS 65
                           A  5107    
                           A  5108    .VALUE -4
                           A  5109    
                           A  5110    .TYPE 14
                           A  5111    
                           A  5112    .ENDEF
                           A  5113    
041AB8 DDE5                A  5114    	PUSH	IX
041ABA DD210000 00         A  5115    	LD	IX,0
041ABF DD39                A  5116    	ADD	IX,SP
041AC1 C5                  A  5117    	PUSH	BC
041AC2 3B                  A  5118    	DEC	SP
                           A  5119    ; 2026		BYTE sum = 0;
                           A  5120    .LINE 2026
                           A  5121    
041AC3 DD36FF00            A  5122    	LD	(IX+%FFFFFFFF),%0
                           A  5123    ; 2027		UINT n = 11;
                           A  5124    .LINE 2027
                           A  5125    
041AC7 010B0000            A  5126    	LD	BC,11
041ACB DD0FFC              A  5127    	LD	(IX+%FFFFFFFC),BC
                           A  5128    ; 2028	
                           A  5129    ; 2029		do {
041ACE                     A  5130    L_145:
                           A  5131    .LINE 2029
                           A  5132    
                           A  5133    ; 2030			sum = (sum >> 1) + (sum << 7) +
                           A  5134    .LINE 2030
                           A  5135    
041ACE DD7EFF              A  5136    	LD	A,(IX+%FFFFFFFF)
041AD1 B7ED62              A  5137    	UEXT	HL
041AD4 6F                  A  5138    	LD	L,A
041AD5 3E01                A  5139    	LD	A,%1
041AD7 CD 05 44 04         A  5140    	CALL	__ishrs_b
041ADB 0607                A  5141    	LD	B,%7
041ADD DD7EFF              A  5142    	LD	A,(IX+%FFFFFFFF)
041AE0 CD 4C 48 04         A  5143    	CALL	__bshl
041AE4 47                  A  5144    	LD	B,A
041AE5 7D                  A  5145    	LD	A,L
041AE6 80                  A  5146    	ADD	A,B
041AE7 DD2706              A  5147    	LD	HL,(IX+%6)
041AEA 86                  A  5148    	ADD	A,(HL)
041AEB DD77FF              A  5149    	LD	(IX+%FFFFFFFF),A
041AEE DD0706              A  5150    	LD	BC,(IX+%6)
041AF1 03                  A  5151    	INC	BC
041AF2 DD0F06              A  5152    	LD	(IX+%6),BC
                           A  5153    ; 2031		} while (--n);
                           A  5154    .LINE 2031
                           A  5155    
041AF5 DD31FC              A  5156    	LD	IY,(IX+%FFFFFFFC)
041AF8 ED33FF              A  5157    	LEA	IY,IY+%FFFFFFFF
041AFB DD3EFC              A  5158    	LD	(IX+%FFFFFFFC),IY
041AFE DD27FC              A  5159    	LD	HL,(IX+%FFFFFFFC)
041B01 CD 07 46 04         A  5160    	CALL	__icmpzero
041B05 20 C7               A  5161    	JR	NZ,L_145
                           A  5162    ; 2032		return sum;
                           A  5163    .LINE 2032
                           A  5164    
041B07 DD7EFF              A  5165    	LD	A,(IX+%FFFFFFFF)
                           A  5166    ; 2033	}
                           A  5167    .LINE 2033
                           A  5168    
041B0A DDF9                A  5169    	LD	SP,IX
041B0C DDE1                A  5170    	POP	IX
041B0E C9                  A  5171    	RET	
                           A  5172    
                           A  5173    
                           A  5174    ;**************************** _sum_sfn ********
                           A  5175    ;Name                         Addr/Register   S
                           A  5176    ;n                                     IX-4    
                           A  5177    ;sum                                   IX-1    
                           A  5178    ;dir                                   IX+6    
                           A  5179    
                           A  5180    
                           A  5181    ; Stack Frame Size: 13 (bytes)
                           A  5182    ;       Spill Code: 0 (instruction)
                           A  5183    
                           A  5184    
                           A  5185    .ENDFUNC "sum_sfn",2033,"_sum_sfn"
                           A  5186    ; 2034	
                           A  5187    ; 2035	#endif	/* FF_USE_LFN */
                           A  5188    ; 2036	
                           A  5189    ; 2037	
                           A  5190    ; 2038	
                           A  5191    ; 2039	#if FF_FS_EXFAT
                           A  5192    ; 2040	/*-------------------------------------
                           A  5193    ; 2041	/* exFAT: Checksum                     
                           A  5194    ; 2042	/*-------------------------------------
                           A  5195    ; 2043	
                           A  5196    ; 2044	static WORD xdir_sum (	/* Get checksum
                           A  5197    ; 2045		const BYTE* dir		/* Directory en
                           A  5198    ; 2046	)
                           A  5199    ; 2047	{
                           A  5200    ; 2048		UINT i, szblk;
                           A  5201    ; 2049		WORD sum;
                           A  5202    ; 2050	
                           A  5203    ; 2051	
                           A  5204    ; 2052		szblk = (dir[XDIR_NumSec] + 1) * SZ
                           A  5205    ; 2053		for (i = sum = 0; i < szblk; i++) {
                           A  5206    ; 2054			if (i == XDIR_SetSum) {	/* Skip
                           A  5207    ; 2055				i++;
                           A  5208    ; 2056			} else {
                           A  5209    ; 2057				sum = ((sum & 1) ? 0x8000 :
                           A  5210    ; 2058			}
                           A  5211    ; 2059		}
                           A  5212    ; 2060		return sum;
                           A  5213    ; 2061	}
                           A  5214    ; 2062	
                           A  5215    ; 2063	
                           A  5216    ; 2064	
                           A  5217    ; 2065	static WORD xname_sum (	/* Get check su
                           A  5218    ; 2066		const WCHAR* name	/* File name to
                           A  5219    ; 2067	)
                           A  5220    ; 2068	{
                           A  5221    ; 2069		WCHAR chr;
                           A  5222    ; 2070		WORD sum = 0;
                           A  5223    ; 2071	
                           A  5224    ; 2072	
                           A  5225    ; 2073		while ((chr = *name++) != 0) {
                           A  5226    ; 2074			chr = (WCHAR)ff_wtoupper(chr);	
                           A  5227    ; 2075			sum = ((sum & 1) ? 0x8000 : 0) 
                           A  5228    ; 2076			sum = ((sum & 1) ? 0x8000 : 0) 
                           A  5229    ; 2077		}
                           A  5230    ; 2078		return sum;
                           A  5231    ; 2079	}
                           A  5232    ; 2080	
                           A  5233    ; 2081	
                           A  5234    ; 2082	#if !FF_FS_READONLY && FF_USE_MKFS
                           A  5235    ; 2083	static DWORD xsum32 (	/* Returns 32-b
                           A  5236    ; 2084		BYTE  dat,			/* Byte to be c
                           A  5237    ; 2085		DWORD sum			/* Previous sum
                           A  5238    ; 2086	)
                           A  5239    ; 2087	{
                           A  5240    ; 2088		sum = ((sum & 1) ? 0x80000000 : 0) 
                           A  5241    ; 2089		return sum;
                           A  5242    ; 2090	}
                           A  5243    ; 2091	#endif
                           A  5244    ; 2092	
                           A  5245    ; 2093	
                           A  5246    ; 2094	
                           A  5247    ; 2095	/*-----------------------------------*/
                           A  5248    ; 2096	/* exFAT: Get a directry entry block */
                           A  5249    ; 2097	/*-----------------------------------*/
                           A  5250    ; 2098	
                           A  5251    ; 2099	static FRESULT load_xdir (	/* FR_INT_E
                           A  5252    ; 2100		DIR* dp					/* Reading 
                           A  5253    ; 2101	)
                           A  5254    ; 2102	{
                           A  5255    ; 2103		FRESULT res;
                           A  5256    ; 2104		UINT i, sz_ent;
                           A  5257    ; 2105		BYTE *dirb = dp->obj.fs->dirbuf;	
                           A  5258    ; 2106	
                           A  5259    ; 2107	
                           A  5260    ; 2108		/* Load file directory entry */
                           A  5261    ; 2109		res = move_window(dp->obj.fs, dp->s
                           A  5262    ; 2110		if (res != FR_OK) return res;
                           A  5263    ; 2111		if (dp->dir[XDIR_Type] != ET_FILEDI
                           A  5264    ; 2112		memcpy(dirb + 0 * SZDIRE, dp->dir, 
                           A  5265    ; 2113		sz_ent = (dirb[XDIR_NumSec] + 1) * 
                           A  5266    ; 2114		if (sz_ent < 3 * SZDIRE || sz_ent >
                           A  5267    ; 2115	
                           A  5268    ; 2116		/* Load stream extension entry */
                           A  5269    ; 2117		res = dir_next(dp, 0);
                           A  5270    ; 2118		if (res == FR_NO_FILE) res = FR_INT
                           A  5271    ; 2119		if (res != FR_OK) return res;
                           A  5272    ; 2120		res = move_window(dp->obj.fs, dp->s
                           A  5273    ; 2121		if (res != FR_OK) return res;
                           A  5274    ; 2122		if (dp->dir[XDIR_Type] != ET_STREAM
                           A  5275    ; 2123		memcpy(dirb + 1 * SZDIRE, dp->dir, 
                           A  5276    ; 2124		if (MAXDIRB(dirb[XDIR_NumName]) > s
                           A  5277    ; 2125	
                           A  5278    ; 2126		/* Load file name entries */
                           A  5279    ; 2127		i = 2 * SZDIRE;	/* Name offset to l
                           A  5280    ; 2128		do {
                           A  5281    ; 2129			res = dir_next(dp, 0);
                           A  5282    ; 2130			if (res == FR_NO_FILE) res = FR
                           A  5283    ; 2131			if (res != FR_OK) return res;
                           A  5284    ; 2132			res = move_window(dp->obj.fs, d
                           A  5285    ; 2133			if (res != FR_OK) return res;
                           A  5286    ; 2134			if (dp->dir[XDIR_Type] != ET_FI
                           A  5287    ; 2135			if (i < MAXDIRB(FF_MAX_LFN)) me
                           A  5288    ; 2136		} while ((i += SZDIRE) < sz_ent);
                           A  5289    ; 2137	
                           A  5290    ; 2138		/* Sanity check (do it for only acc
                           A  5291    ; 2139		if (i <= MAXDIRB(FF_MAX_LFN)) {
                           A  5292    ; 2140			if (xdir_sum(dirb) != ld_word(d
                           A  5293    ; 2141		}
                           A  5294    ; 2142		return FR_OK;
                           A  5295    ; 2143	}
                           A  5296    ; 2144	
                           A  5297    ; 2145	
                           A  5298    ; 2146	/*-------------------------------------
                           A  5299    ; 2147	/* exFAT: Initialize object allocation 
                           A  5300    ; 2148	/*-------------------------------------
                           A  5301    ; 2149	
                           A  5302    ; 2150	static void init_alloc_info (
                           A  5303    ; 2151		FATFS* fs,		/* Filesystem objec
                           A  5304    ; 2152		FFOBJID* obj	/* Object allocatio
                           A  5305    ; 2153	)
                           A  5306    ; 2154	{
                           A  5307    ; 2155		obj->sclust = ld_dword(fs->dirbuf +
                           A  5308    ; 2156		obj->objsize = ld_qword(fs->dirbuf 
                           A  5309    ; 2157		obj->stat = fs->dirbuf[XDIR_GenFlag
                           A  5310    ; 2158		obj->n_frag = 0;					
                           A  5311    ; 2159	}
                           A  5312    ; 2160	
                           A  5313    ; 2161	
                           A  5314    ; 2162	
                           A  5315    ; 2163	#if !FF_FS_READONLY || FF_FS_RPATH != 0
                           A  5316    ; 2164	/*-------------------------------------
                           A  5317    ; 2165	/* exFAT: Load the object's directory e
                           A  5318    ; 2166	/*-------------------------------------
                           A  5319    ; 2167	
                           A  5320    ; 2168	static FRESULT load_obj_xdir (
                           A  5321    ; 2169		DIR* dp,			/* Blank direct
                           A  5322    ; 2170		const FFOBJID* obj	/* Object with 
                           A  5323    ; 2171	)
                           A  5324    ; 2172	{
                           A  5325    ; 2173		FRESULT res;
                           A  5326    ; 2174	
                           A  5327    ; 2175		/* Open object containing directory
                           A  5328    ; 2176		dp->obj.fs = obj->fs;
                           A  5329    ; 2177		dp->obj.sclust = obj->c_scl;
                           A  5330    ; 2178		dp->obj.stat = (BYTE)obj->c_size;
                           A  5331    ; 2179		dp->obj.objsize = obj->c_size & 0xF
                           A  5332    ; 2180		dp->obj.n_frag = 0;
                           A  5333    ; 2181		dp->blk_ofs = obj->c_ofs;
                           A  5334    ; 2182	
                           A  5335    ; 2183		res = dir_sdi(dp, dp->blk_ofs);	/* 
                           A  5336    ; 2184		if (res == FR_OK) {
                           A  5337    ; 2185			res = load_xdir(dp);		/* 
                           A  5338    ; 2186		}
                           A  5339    ; 2187		return res;
                           A  5340    ; 2188	}
                           A  5341    ; 2189	#endif
                           A  5342    ; 2190	
                           A  5343    ; 2191	
                           A  5344    ; 2192	#if !FF_FS_READONLY
                           A  5345    ; 2193	/*-------------------------------------
                           A  5346    ; 2194	/* exFAT: Store the directory entry blo
                           A  5347    ; 2195	/*-------------------------------------
                           A  5348    ; 2196	
                           A  5349    ; 2197	static FRESULT store_xdir (
                           A  5350    ; 2198		DIR* dp				/* Pointer to t
                           A  5351    ; 2199	)
                           A  5352    ; 2200	{
                           A  5353    ; 2201		FRESULT res;
                           A  5354    ; 2202		UINT nent;
                           A  5355    ; 2203		BYTE *dirb = dp->obj.fs->dirbuf;	
                           A  5356    ; 2204	
                           A  5357    ; 2205		/* Create set sum */
                           A  5358    ; 2206		st_word(dirb + XDIR_SetSum, xdir_su
                           A  5359    ; 2207		nent = dirb[XDIR_NumSec] + 1;
                           A  5360    ; 2208	
                           A  5361    ; 2209		/* Store the direcotry entry block 
                           A  5362    ; 2210		res = dir_sdi(dp, dp->blk_ofs);
                           A  5363    ; 2211		while (res == FR_OK) {
                           A  5364    ; 2212			res = move_window(dp->obj.fs, d
                           A  5365    ; 2213			if (res != FR_OK) break;
                           A  5366    ; 2214			memcpy(dp->dir, dirb, SZDIRE);
                           A  5367    ; 2215			dp->obj.fs->wflag = 1;
                           A  5368    ; 2216			if (--nent == 0) break;
                           A  5369    ; 2217			dirb += SZDIRE;
                           A  5370    ; 2218			res = dir_next(dp, 0);
                           A  5371    ; 2219		}
                           A  5372    ; 2220		return (res == FR_OK || res == FR_D
                           A  5373    ; 2221	}
                           A  5374    ; 2222	
                           A  5375    ; 2223	
                           A  5376    ; 2224	
                           A  5377    ; 2225	/*-------------------------------------
                           A  5378    ; 2226	/* exFAT: Create a new directory enrty 
                           A  5379    ; 2227	/*-------------------------------------
                           A  5380    ; 2228	
                           A  5381    ; 2229	static void create_xdir (
                           A  5382    ; 2230		BYTE* dirb,			/* Pointer to t
                           A  5383    ; 2231		const WCHAR* lfn	/* Pointer to t
                           A  5384    ; 2232	)
                           A  5385    ; 2233	{
                           A  5386    ; 2234		UINT i;
                           A  5387    ; 2235		BYTE nc1, nlen;
                           A  5388    ; 2236		WCHAR wc;
                           A  5389    ; 2237	
                           A  5390    ; 2238	
                           A  5391    ; 2239		/* Create file-directory and stream
                           A  5392    ; 2240		memset(dirb, 0, 2 * SZDIRE);
                           A  5393    ; 2241		dirb[0 * SZDIRE + XDIR_Type] = ET_F
                           A  5394    ; 2242		dirb[1 * SZDIRE + XDIR_Type] = ET_S
                           A  5395    ; 2243	
                           A  5396    ; 2244		/* Create file-name entries */
                           A  5397    ; 2245		i = SZDIRE * 2;	/* Top of file_name
                           A  5398    ; 2246		nlen = nc1 = 0; wc = 1;
                           A  5399    ; 2247		do {
                           A  5400    ; 2248			dirb[i++] = ET_FILENAME; dirb[i
                           A  5401    ; 2249			do {	/* Fill name field */
                           A  5402    ; 2250				if (wc != 0 && (wc = lfn[nl
                           A  5403    ; 2251				st_word(dirb + i, wc); 	/* 
                           A  5404    ; 2252				i += 2;
                           A  5405    ; 2253			} while (i % SZDIRE != 0);
                           A  5406    ; 2254			nc1++;
                           A  5407    ; 2255		} while (lfn[nlen]);	/* Fill nex
                           A  5408    ; 2256	
                           A  5409    ; 2257		dirb[XDIR_NumName] = nlen;		/* 
                           A  5410    ; 2258		dirb[XDIR_NumSec] = 1 + nc1;	/* 
                           A  5411    ; 2259		st_word(dirb + XDIR_NameHash, xname
                           A  5412    ; 2260	}
                           A  5413    ; 2261	
                           A  5414    ; 2262	#endif	/* !FF_FS_READONLY */
                           A  5415    ; 2263	#endif	/* FF_FS_EXFAT */
                           A  5416    ; 2264	
                           A  5417    ; 2265	
                           A  5418    ; 2266	
                           A  5419    ; 2267	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A  5420    ; 2268	/*-------------------------------------
                           A  5421    ; 2269	/* Read an object from the directory   
                           A  5422    ; 2270	/*-------------------------------------
                           A  5423    ; 2271	
                           A  5424    ; 2272	#define DIR_READ_FILE(dp) dir_read(dp, 
                           A  5425    ; 2273	#define DIR_READ_LABEL(dp) dir_read(dp,
                           A  5426    ; 2274	
                           A  5427    ; 2275	static FRESULT dir_read (
                           A  5428    ; 2276		DIR* dp,		/* Pointer to the d
                           A  5429    ; 2277		int vol			/* Filtered by 0:fi
                           A  5430    ; 2278	)
                           A  5431    ; 2279	{
041B0F                     A  5432    _dir_read:
                           A  5433    .DEFINE "_dir_read"
                           A  5434    
                           A  5435    .VALUE _dir_read
                           A  5436    
                           A  5437    .CLASS 3
                           A  5438    
                           A  5439    .TYPE 68
                           A  5440    
                           A  5441    .ENDEF
                           A  5442    
                           A  5443    .BEGFUNC "dir_read",2279,"_dir_read"
                           A  5444    
                           A  5445    .LINE 2279
                           A  5446    
                           A  5447    .DEFINE "dp"
                           A  5448    
                           A  5449    .CLASS 65
                           A  5450    
                           A  5451    .VALUE 6
                           A  5452    
                           A  5453    .TAG "NONAME3"
                           A  5454    
                           A  5455    .TYPE 40
                           A  5456    
                           A  5457    .ENDEF
                           A  5458    
                           A  5459    .DEFINE "vol"
                           A  5460    
                           A  5461    .CLASS 65
                           A  5462    
                           A  5463    .VALUE 9
                           A  5464    
                           A  5465    .TYPE 4
                           A  5466    
                           A  5467    .ENDEF
                           A  5468    
                           A  5469    .DEFINE "b"
                           A  5470    
                           A  5471    .CLASS 65
                           A  5472    
                           A  5473    .VALUE -1
                           A  5474    
                           A  5475    .TYPE 12
                           A  5476    
                           A  5477    .ENDEF
                           A  5478    
                           A  5479    .DEFINE "ord"
                           A  5480    
                           A  5481    .CLASS 65
                           A  5482    
                           A  5483    .VALUE -2
                           A  5484    
                           A  5485    .TYPE 12
                           A  5486    
                           A  5487    .ENDEF
                           A  5488    
                           A  5489    .DEFINE "res"
                           A  5490    
                           A  5491    .CLASS 65
                           A  5492    
                           A  5493    .VALUE -5
                           A  5494    
                           A  5495    .TYPE 4
                           A  5496    
                           A  5497    .ENDEF
                           A  5498    
                           A  5499    .DEFINE "attr"
                           A  5500    
                           A  5501    .CLASS 65
                           A  5502    
                           A  5503    .VALUE -6
                           A  5504    
                           A  5505    .TYPE 12
                           A  5506    
                           A  5507    .ENDEF
                           A  5508    
                           A  5509    .DEFINE "sum"
                           A  5510    
                           A  5511    .CLASS 65
                           A  5512    
                           A  5513    .VALUE -7
                           A  5514    
                           A  5515    .TYPE 12
                           A  5516    
                           A  5517    .ENDEF
                           A  5518    
                           A  5519    .DEFINE "fs"
                           A  5520    
                           A  5521    .CLASS 65
                           A  5522    
                           A  5523    .VALUE -10
                           A  5524    
                           A  5525    .TAG "NONAME0"
                           A  5526    
                           A  5527    .TYPE 40
                           A  5528    
                           A  5529    .ENDEF
                           A  5530    
041B0F DDE5                A  5531    	PUSH	IX
041B11 DD210000 00         A  5532    	LD	IX,0
041B16 DD39                A  5533    	ADD	IX,SP
041B18 ED22E9              A  5534    	LEA	HL,IX+%FFFFFFE9
041B1B F9                  A  5535    	LD	SP,HL
                           A  5536    ; 2280		FRESULT res = FR_NO_FILE;
                           A  5537    .LINE 2280
                           A  5538    
041B1C 01040000            A  5539    	LD	BC,4
041B20 DD0FFB              A  5540    	LD	(IX+%FFFFFFFB),BC
                           A  5541    ; 2281		FATFS *fs = dp->obj.fs;
                           A  5542    .LINE 2281
                           A  5543    
041B23 DD3106              A  5544    	LD	IY,(IX+%6)
041B26 FD0700              A  5545    	LD	BC,(IY+%0)
041B29 DD0FF6              A  5546    	LD	(IX+%FFFFFFF6),BC
                           A  5547    ; 2282		BYTE attr, b;
                           A  5548    ; 2283	#if FF_USE_LFN
                           A  5549    ; 2284		BYTE ord = 0xFF, sum = 0xFF;
                           A  5550    .LINE 2284
                           A  5551    
041B2C DD36FEFF            A  5552    	LD	(IX+%FFFFFFFE),%FF
041B30 DD36F9FF            A  5553    	LD	(IX+%FFFFFFF9),%FF
                           A  5554    ; 2285	#endif
                           A  5555    ; 2286	
                           A  5556    ; 2287		while (dp->sect) {
                           A  5557    .LINE 2287
                           A  5558    
041B34 C3 7A 1C 04         A  5559    	JR	L_172
041B38                     A  5560    L_173:
                           A  5561    ; 2288			res = move_window(fs, dp->sect)
                           A  5562    .LINE 2288
                           A  5563    
041B38 DD4EEC              A  5564    	LD	C,(IX+%FFFFFFEC)
041B3B 0600                A  5565    	LD	B,%0
041B3D C5                  A  5566    	PUSH	BC
041B3E DD07E9              A  5567    	LD	BC,(IX+%FFFFFFE9)
041B41 C5                  A  5568    	PUSH	BC
041B42 DD07F6              A  5569    	LD	BC,(IX+%FFFFFFF6)
041B45 C5                  A  5570    	PUSH	BC
041B46 CD D7 10 04         A  5571    	CALL	_move_window
041B4A C1                  A  5572    	POP	BC
041B4B C1                  A  5573    	POP	BC
041B4C C1                  A  5574    	POP	BC
041B4D DD2FFB              A  5575    	LD	(IX+%FFFFFFFB),HL
                           A  5576    ; 2289			if (res != FR_OK) break;
                           A  5577    .LINE 2289
                           A  5578    
041B50 CD 07 46 04         A  5579    	CALL	__icmpzero
041B54 C2 96 1C 04         A  5580    	JR	NZ,L_175
                           A  5581    ; 2290			b = dp->dir[DIR_Name];	/* Test
                           A  5582    .LINE 2290
                           A  5583    
041B58 DD3106              A  5584    	LD	IY,(IX+%6)
041B5B FD071B              A  5585    	LD	BC,(IY+%1B)
041B5E DD0FF0              A  5586    	LD	(IX+%FFFFFFF0),BC
041B61 C5E1                A  5587    	LD	HL,BC
041B63 7E                  A  5588    	LD	A,(HL)
041B64 DD77FF              A  5589    	LD	(IX+%FFFFFFFF),A
                           A  5590    ; 2291			if (b == 0) {
                           A  5591    .LINE 2291
                           A  5592    
041B67 B7                  A  5593    	OR	A,A
041B68 20 0B               A  5594    	JR	NZ,L_169
                           A  5595    ; 2292				res = FR_NO_FILE; break; /*
                           A  5596    .LINE 2292
                           A  5597    
041B6A 01040000            A  5598    	LD	BC,4
041B6E DD0FFB              A  5599    	LD	(IX+%FFFFFFFB),BC
041B71 C3 96 1C 04         A  5600    	JR	L_175
                           A  5601    ; 2293			}
041B75                     A  5602    L_169:
                           A  5603    .LINE 2293
                           A  5604    
                           A  5605    ; 2294	#if FF_FS_EXFAT
                           A  5606    ; 2295			if (fs->fs_type == FS_EXFAT) {	
                           A  5607    ; 2296				if (FF_USE_LABEL && vol) {
                           A  5608    ; 2297					if (b == ET_VLABEL) bre
                           A  5609    ; 2298				} else {
                           A  5610    ; 2299					if (b == ET_FILEDIR) {	
                           A  5611    ; 2300						dp->blk_ofs = dp->d
                           A  5612    ; 2301						res = load_xdir(dp)
                           A  5613    ; 2302						if (res == FR_OK) {
                           A  5614    ; 2303							dp->obj.attr = 
                           A  5615    ; 2304						}
                           A  5616    ; 2305						break;
                           A  5617    ; 2306					}
                           A  5618    ; 2307				}
                           A  5619    ; 2308			} else
                           A  5620    ; 2309	#endif
                           A  5621    ; 2310			{	/* On the FAT/FAT32 volume 
                           A  5622    ; 2311				dp->obj.attr = attr = dp->d
                           A  5623    .LINE 2311
                           A  5624    
041B75 DD31F0              A  5625    	LD	IY,(IX+%FFFFFFF0)
041B78 FD7E0B              A  5626    	LD	A,(IY+%B)
041B7B E63F                A  5627    	AND	A,%3F
041B7D DD77FA              A  5628    	LD	(IX+%FFFFFFFA),A
041B80 DD3106              A  5629    	LD	IY,(IX+%6)
041B83 FD7705              A  5630    	LD	(IY+%5),A
                           A  5631    ; 2312	#if FF_USE_LFN		/* LFN configuratio
                           A  5632    ; 2313				if (b == DDEM || b == '.' |
                           A  5633    .LINE 2313
                           A  5634    
041B86 DD7EFF              A  5635    	LD	A,(IX+%FFFFFFFF)
041B89 FEE5                A  5636    	CP	A,%E5
041B8B 28 23               A  5637    	JR	Z,L_167
041B8D DD7EFF              A  5638    	LD	A,(IX+%FFFFFFFF)
041B90 FE2E                A  5639    	CP	A,%2E
041B92 28 1C               A  5640    	JR	Z,L_167
041B94 DD7EFA              A  5641    	LD	A,(IX+%FFFFFFFA)
041B97 CBAF                A  5642    	RES	%5,A
041B99 FE08                A  5643    	CP	A,%8
041B9B 20 04               A  5644    	JR	NZ,L__81
041B9D 0601                A  5645    	LD	B,%1
041B9F 18 02               A  5646    	JR	L__82
041BA1                     A  5647    L__81:
041BA1 0600                A  5648    	LD	B,%0
041BA3                     A  5649    L__82:
041BA3 78                  A  5650    	LD	A,B
041BA4 17ED62              A  5651    	SEXT	HL
041BA7 68                  A  5652    	LD	L,B
041BA8 DD0709              A  5653    	LD	BC,(IX+%9)
041BAB B7                  A  5654    	OR	A,A
041BAC ED42                A  5655    	SBC	HL,BC
041BAE 28 08               A  5656    	JR	Z,L_168
041BB0                     A  5657    L_167:
                           A  5658    ; 2314					ord = 0xFF;
                           A  5659    .LINE 2314
                           A  5660    
041BB0 DD36FEFF            A  5661    	LD	(IX+%FFFFFFFE),%FF
                           A  5662    ; 2315				} else {
                           A  5663    .LINE 2315
                           A  5664    
041BB4 C3 62 1C 04         A  5665    	JR	L_170
041BB8                     A  5666    L_168:
                           A  5667    ; 2316					if (attr == AM_LFN) {	
                           A  5668    .LINE 2316
                           A  5669    
041BB8 DD7EFA              A  5670    	LD	A,(IX+%FFFFFFFA)
041BBB FE0F                A  5671    	CP	A,%F
041BBD 20 7C               A  5672    	JR	NZ,L_166
                           A  5673    ; 2317						if (b & LLEF) {		
                           A  5674    .LINE 2317
                           A  5675    
041BBF DD7EFF              A  5676    	LD	A,(IX+%FFFFFFFF)
041BC2 E640                A  5677    	AND	A,%40
041BC4 28 26               A  5678    	JR	Z,L_161
                           A  5679    ; 2318							sum = dp->dir[L
                           A  5680    .LINE 2318
                           A  5681    
041BC6 DD3106              A  5682    	LD	IY,(IX+%6)
041BC9 FD371B              A  5683    	LD	IY,(IY+%1B)
041BCC FD7E0D              A  5684    	LD	A,(IY+%D)
041BCF DD77F9              A  5685    	LD	(IX+%FFFFFFF9),A
                           A  5686    ; 2319							b &= (BYTE)~LLE
                           A  5687    .LINE 2319
                           A  5688    
041BD2 DD7EFF              A  5689    	LD	A,(IX+%FFFFFFFF)
041BD5 CBB7                A  5690    	RES	%6,A
041BD7 DD77FF              A  5691    	LD	(IX+%FFFFFFFF),A
041BDA DD77FE              A  5692    	LD	(IX+%FFFFFFFE),A
                           A  5693    ; 2320							dp->blk_ofs = d
                           A  5694    .LINE 2320
                           A  5695    
041BDD DD3106              A  5696    	LD	IY,(IX+%6)
041BE0 FD070F              A  5697    	LD	BC,(IY+%F)
041BE3 FD7E12              A  5698    	LD	A,(IY+%12)
041BE6 FD0F2A              A  5699    	LD	(IY+%2A),BC
041BE9 FD772D              A  5700    	LD	(IY+%2D),A
                           A  5701    ; 2321						}
041BEC                     A  5702    L_161:
                           A  5703    .LINE 2321
                           A  5704    
                           A  5705    ; 2322						/* Check LFN validi
                           A  5706    ; 2323						ord = (b == ord && 
                           A  5707    .LINE 2323
                           A  5708    
041BEC DD7EFF              A  5709    	LD	A,(IX+%FFFFFFFF)
041BEF DDBEFE              A  5710    	CP	A,(IX+%FFFFFFFE)
041BF2 20 38               A  5711    	JR	NZ,L_159
041BF4 DD3106              A  5712    	LD	IY,(IX+%6)
041BF7 FD071B              A  5713    	LD	BC,(IY+%1B)
041BFA DD0FED              A  5714    	LD	(IX+%FFFFFFED),BC
041BFD DD31ED              A  5715    	LD	IY,(IX+%FFFFFFED)
041C00 FD7E0D              A  5716    	LD	A,(IY+%D)
041C03 DDBEF9              A  5717    	CP	A,(IX+%FFFFFFF9)
041C06 20 24               A  5718    	JR	NZ,L_159
041C08 DD07ED              A  5719    	LD	BC,(IX+%FFFFFFED)
041C0B C5                  A  5720    	PUSH	BC
041C0C DD31F6              A  5721    	LD	IY,(IX+%FFFFFFF6)
041C0F FD070B              A  5722    	LD	BC,(IY+%B)
041C12 C5                  A  5723    	PUSH	BC
041C13 CD B6 19 04         A  5724    	CALL	_pick_lfn
041C17 C1                  A  5725    	POP	BC
041C18 C1                  A  5726    	POP	BC
041C19 CD 07 46 04         A  5727    	CALL	__icmpzero
041C1D 28 0D               A  5728    	JR	Z,L_159
041C1F DD7EFE              A  5729    	LD	A,(IX+%FFFFFFFE)
041C22 B7ED62              A  5730    	UEXT	HL
041C25 6F                  A  5731    	LD	L,A
041C26 2B                  A  5732    	DEC	HL
041C27 DD2FF3              A  5733    	LD	(IX+%FFFFFFF3),HL
041C2A 18 07               A  5734    	JR	L_160
041C2C                     A  5735    L_159:
041C2C 01FF0000            A  5736    	LD	BC,255
041C30 DD0FF3              A  5737    	LD	(IX+%FFFFFFF3),BC
041C33                     A  5738    L_160:
041C33 DD7EF3              A  5739    	LD	A,(IX+%FFFFFFF3)
041C36 DD77FE              A  5740    	LD	(IX+%FFFFFFFE),A
                           A  5741    ; 2324					} else {				
                           A  5742    .LINE 2324
                           A  5743    
041C39 18 27               A  5744    	JR	L_170
041C3B                     A  5745    L_166:
                           A  5746    ; 2325						if (ord != 0 || sum
                           A  5747    .LINE 2325
                           A  5748    
041C3B DD7EFE              A  5749    	LD	A,(IX+%FFFFFFFE)
041C3E B7                  A  5750    	OR	A,A
041C3F 20 11               A  5751    	JR	NZ,L_163
041C41 DD3106              A  5752    	LD	IY,(IX+%6)
041C44 FD071B              A  5753    	LD	BC,(IY+%1B)
041C47 C5                  A  5754    	PUSH	BC
041C48 CD B8 1A 04         A  5755    	CALL	_sum_sfn
041C4C C1                  A  5756    	POP	BC
041C4D DDBEF9              A  5757    	CP	A,(IX+%FFFFFFF9)
041C50 28 44               A  5758    	JR	Z,L_175
041C52                     A  5759    L_163:
                           A  5760    ; 2326							dp->blk_ofs = 0
                           A  5761    .LINE 2326
                           A  5762    
041C52 01FFFFFF            A  5763    	LD	BC,16777215
041C56 DD3106              A  5764    	LD	IY,(IX+%6)
041C59 FD0F2A              A  5765    	LD	(IY+%2A),BC
041C5C FD362DFF            A  5766    	LD	(IY+%2D),%FF
                           A  5767    ; 2327						}
                           A  5768    .LINE 2327
                           A  5769    
                           A  5770    ; 2328						break;
                           A  5771    .LINE 2328
                           A  5772    
041C60 18 34               A  5773    	JR	L_175
                           A  5774    ; 2329					}
                           A  5775    ; 2330				}
                           A  5776    ; 2331	#else		/* Non LFN configuration */
                           A  5777    ; 2332				if (b != DDEM && b != '.' &
                           A  5778    ; 2333					break;
                           A  5779    ; 2334				}
                           A  5780    ; 2335	#endif
                           A  5781    ; 2336			}
041C62                     A  5782    L_170:
                           A  5783    .LINE 2336
                           A  5784    
                           A  5785    ; 2337			res = dir_next(dp, 0);		/* 
                           A  5786    .LINE 2337
                           A  5787    
041C62 01000000            A  5788    	LD	BC,0
041C66 C5                  A  5789    	PUSH	BC
041C67 DD0706              A  5790    	LD	BC,(IX+%6)
041C6A C5                  A  5791    	PUSH	BC
041C6B CD 0F 16 04         A  5792    	CALL	_dir_next
041C6F C1                  A  5793    	POP	BC
041C70 C1                  A  5794    	POP	BC
041C71 DD2FFB              A  5795    	LD	(IX+%FFFFFFFB),HL
                           A  5796    ; 2338			if (res != FR_OK) break;
                           A  5797    .LINE 2338
                           A  5798    
041C74 CD 07 46 04         A  5799    	CALL	__icmpzero
041C78 20 1C               A  5800    	JR	NZ,L_175
                           A  5801    ; 2339		}
041C7A                     A  5802    L_172:
                           A  5803    .LINE 2339
                           A  5804    
041C7A DD3106              A  5805    	LD	IY,(IX+%6)
041C7D FD0717              A  5806    	LD	BC,(IY+%17)
041C80 FD7E1A              A  5807    	LD	A,(IY+%1A)
041C83 DD0FE9              A  5808    	LD	(IX+%FFFFFFE9),BC
041C86 DD77EC              A  5809    	LD	(IX+%FFFFFFEC),A
041C89 C5E1                A  5810    	LD	HL,BC
041C8B DD5EEC              A  5811    	LD	E,(IX+%FFFFFFEC)
041C8E CD DA 44 04         A  5812    	CALL	__lcmpzero
041C92 C2 38 1B 04         A  5813    	JR	NZ,L_173
041C96                     A  5814    L_175:
                           A  5815    ; 2340	
                           A  5816    ; 2341		if (res != FR_OK) dp->sect = 0;		
                           A  5817    .LINE 2341
                           A  5818    
041C96 DD27FB              A  5819    	LD	HL,(IX+%FFFFFFFB)
041C99 CD 07 46 04         A  5820    	CALL	__icmpzero
041C9D 28 0E               A  5821    	JR	Z,L_176
041C9F 01000000            A  5822    	LD	BC,0
041CA3 DD3106              A  5823    	LD	IY,(IX+%6)
041CA6 FD0F17              A  5824    	LD	(IY+%17),BC
041CA9 FD361A00            A  5825    	LD	(IY+%1A),%0
041CAD                     A  5826    L_176:
                           A  5827    ; 2342		return res;
                           A  5828    .LINE 2342
                           A  5829    
041CAD DD27FB              A  5830    	LD	HL,(IX+%FFFFFFFB)
                           A  5831    ; 2343	}
                           A  5832    .LINE 2343
                           A  5833    
041CB0 DDF9                A  5834    	LD	SP,IX
041CB2 DDE1                A  5835    	POP	IX
041CB4 C9                  A  5836    	RET	
                           A  5837    
                           A  5838    
                           A  5839    ;**************************** _dir_read *******
                           A  5840    ;Name                         Addr/Register   S
                           A  5841    ;G_3                                  IX-23    
                           A  5842    ;G_5                                  IX-19    
                           A  5843    ;G_4                                  IX-16    
                           A  5844    ;temp157                              IX-13    
                           A  5845    ;fs                                   IX-10    
                           A  5846    ;sum                                   IX-7    
                           A  5847    ;attr                                  IX-6    
                           A  5848    ;res                                   IX-5    
                           A  5849    ;ord                                   IX-2    
                           A  5850    ;b                                     IX-1    
                           A  5851    ;vol                                   IX+9    
                           A  5852    ;dp                                    IX+6    
                           A  5853    
                           A  5854    
                           A  5855    ; Stack Frame Size: 35 (bytes)
                           A  5856    ;       Spill Code: 0 (instruction)
                           A  5857    
                           A  5858    
                           A  5859    .ENDFUNC "dir_read",2343,"_dir_read"
                           A  5860    ; 2344	
                           A  5861    ; 2345	#endif	/* FF_FS_MINIMIZE <= 1 || FF_US
                           A  5862    ; 2346	
                           A  5863    ; 2347	
                           A  5864    ; 2348	
                           A  5865    ; 2349	/*-------------------------------------
                           A  5866    ; 2350	/* Directory handling - Find an object 
                           A  5867    ; 2351	/*-------------------------------------
                           A  5868    ; 2352	
                           A  5869    ; 2353	static FRESULT dir_find (	/* FR_OK(0)
                           A  5870    ; 2354		DIR* dp					/* Pointer 
                           A  5871    ; 2355	)
                           A  5872    ; 2356	{
041CB5                     A  5873    _dir_find:
                           A  5874    .DEFINE "_dir_find"
                           A  5875    
                           A  5876    .VALUE _dir_find
                           A  5877    
                           A  5878    .CLASS 3
                           A  5879    
                           A  5880    .TYPE 68
                           A  5881    
                           A  5882    .ENDEF
                           A  5883    
                           A  5884    .BEGFUNC "dir_find",2356,"_dir_find"
                           A  5885    
                           A  5886    .LINE 2356
                           A  5887    
                           A  5888    .DEFINE "dp"
                           A  5889    
                           A  5890    .CLASS 65
                           A  5891    
                           A  5892    .VALUE 6
                           A  5893    
                           A  5894    .TAG "NONAME3"
                           A  5895    
                           A  5896    .TYPE 40
                           A  5897    
                           A  5898    .ENDEF
                           A  5899    
                           A  5900    .DEFINE "c"
                           A  5901    
                           A  5902    .CLASS 65
                           A  5903    
                           A  5904    .VALUE -1
                           A  5905    
                           A  5906    .TYPE 12
                           A  5907    
                           A  5908    .ENDEF
                           A  5909    
                           A  5910    .DEFINE "ord"
                           A  5911    
                           A  5912    .CLASS 65
                           A  5913    
                           A  5914    .VALUE -2
                           A  5915    
                           A  5916    .TYPE 12
                           A  5917    
                           A  5918    .ENDEF
                           A  5919    
                           A  5920    .DEFINE "res"
                           A  5921    
                           A  5922    .CLASS 65
                           A  5923    
                           A  5924    .VALUE -5
                           A  5925    
                           A  5926    .TYPE 4
                           A  5927    
                           A  5928    .ENDEF
                           A  5929    
                           A  5930    .DEFINE "a"
                           A  5931    
                           A  5932    .CLASS 65
                           A  5933    
                           A  5934    .VALUE -6
                           A  5935    
                           A  5936    .TYPE 12
                           A  5937    
                           A  5938    .ENDEF
                           A  5939    
                           A  5940    .DEFINE "sum"
                           A  5941    
                           A  5942    .CLASS 65
                           A  5943    
                           A  5944    .VALUE -7
                           A  5945    
                           A  5946    .TYPE 12
                           A  5947    
                           A  5948    .ENDEF
                           A  5949    
                           A  5950    .DEFINE "fs"
                           A  5951    
                           A  5952    .CLASS 65
                           A  5953    
                           A  5954    .VALUE -10
                           A  5955    
                           A  5956    .TAG "NONAME0"
                           A  5957    
                           A  5958    .TYPE 40
                           A  5959    
                           A  5960    .ENDEF
                           A  5961    
041CB5 DDE5                A  5962    	PUSH	IX
041CB7 DD210000 00         A  5963    	LD	IX,0
041CBC DD39                A  5964    	ADD	IX,SP
041CBE ED22EA              A  5965    	LEA	HL,IX+%FFFFFFEA
041CC1 F9                  A  5966    	LD	SP,HL
                           A  5967    ; 2357		FRESULT res;
                           A  5968    ; 2358		FATFS *fs = dp->obj.fs;
                           A  5969    .LINE 2358
                           A  5970    
041CC2 DD3106              A  5971    	LD	IY,(IX+%6)
041CC5 FD0700              A  5972    	LD	BC,(IY+%0)
041CC8 DD0FF6              A  5973    	LD	(IX+%FFFFFFF6),BC
                           A  5974    ; 2359		BYTE c;
                           A  5975    ; 2360	#if FF_USE_LFN
                           A  5976    ; 2361		BYTE a, ord, sum;
                           A  5977    ; 2362	#endif
                           A  5978    ; 2363	
                           A  5979    ; 2364		res = dir_sdi(dp, 0);			/* 
                           A  5980    .LINE 2364
                           A  5981    
041CCB 01000000            A  5982    	LD	BC,0
041CCF C5                  A  5983    	PUSH	BC
041CD0 C5                  A  5984    	PUSH	BC
041CD1 DD0706              A  5985    	LD	BC,(IX+%6)
041CD4 C5                  A  5986    	PUSH	BC
041CD5 CD 09 14 04         A  5987    	CALL	_dir_sdi
041CD9 C1                  A  5988    	POP	BC
041CDA C1                  A  5989    	POP	BC
041CDB C1                  A  5990    	POP	BC
041CDC DD2FFB              A  5991    	LD	(IX+%FFFFFFFB),HL
                           A  5992    ; 2365		if (res != FR_OK) return res;
                           A  5993    .LINE 2365
                           A  5994    
041CDF CD 07 46 04         A  5995    	CALL	__icmpzero
041CE3 28 07               A  5996    	JR	Z,L_179
041CE5 DD27FB              A  5997    	LD	HL,(IX+%FFFFFFFB)
041CE8 C3 86 1E 04         A  5998    	JR	L_209
041CEC                     A  5999    L_179:
                           A  6000    ; 2366	#if FF_FS_EXFAT
                           A  6001    ; 2367		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  6002    ; 2368			BYTE nc;
                           A  6003    ; 2369			UINT di, ni;
                           A  6004    ; 2370			WORD hash = xname_sum(fs->lfnbu
                           A  6005    ; 2371	
                           A  6006    ; 2372			while ((res = DIR_READ_FILE(dp)
                           A  6007    ; 2373	#if FF_MAX_LFN < 255
                           A  6008    ; 2374				if (fs->dirbuf[XDIR_NumName
                           A  6009    ; 2375	#endif
                           A  6010    ; 2376				if (ld_word(fs->dirbuf + XD
                           A  6011    ; 2377				for (nc = fs->dirbuf[XDIR_N
                           A  6012    ; 2378					if ((di % SZDIRE) == 0)
                           A  6013    ; 2379					if (ff_wtoupper(ld_word
                           A  6014    ; 2380				}
                           A  6015    ; 2381				if (nc == 0 && !fs->lfnbuf[
                           A  6016    ; 2382			}
                           A  6017    ; 2383			return res;
                           A  6018    ; 2384		}
                           A  6019    ; 2385	#endif
                           A  6020    ; 2386		/* On the FAT/FAT32 volume */
                           A  6021    ; 2387	#if FF_USE_LFN
                           A  6022    ; 2388		ord = sum = 0xFF; dp->blk_ofs = 0xF
                           A  6023    .LINE 2388
                           A  6024    
041CEC DD36F9FF            A  6025    	LD	(IX+%FFFFFFF9),%FF
041CF0 DD36FEFF            A  6026    	LD	(IX+%FFFFFFFE),%FF
041CF4 01FFFFFF            A  6027    	LD	BC,16777215
041CF8 DD3106              A  6028    	LD	IY,(IX+%6)
041CFB FD0F2A              A  6029    	LD	(IY+%2A),BC
041CFE FD362DFF            A  6030    	LD	(IY+%2D),%FF
                           A  6031    ; 2389	#endif
                           A  6032    ; 2390		do {
041D02                     A  6033    L_206:
                           A  6034    .LINE 2390
                           A  6035    
                           A  6036    ; 2391			res = move_window(fs, dp->sect)
                           A  6037    .LINE 2391
                           A  6038    
041D02 DD3106              A  6039    	LD	IY,(IX+%6)
041D05 FD0717              A  6040    	LD	BC,(IY+%17)
041D08 FD7E1A              A  6041    	LD	A,(IY+%1A)
041D0B 2600                A  6042    	LD	H,%0
041D0D 6F                  A  6043    	LD	L,A
041D0E E5                  A  6044    	PUSH	HL
041D0F C5                  A  6045    	PUSH	BC
041D10 DD07F6              A  6046    	LD	BC,(IX+%FFFFFFF6)
041D13 C5                  A  6047    	PUSH	BC
041D14 CD D7 10 04         A  6048    	CALL	_move_window
041D18 C1                  A  6049    	POP	BC
041D19 C1                  A  6050    	POP	BC
041D1A C1                  A  6051    	POP	BC
041D1B DD2FFB              A  6052    	LD	(IX+%FFFFFFFB),HL
                           A  6053    ; 2392			if (res != FR_OK) break;
                           A  6054    .LINE 2392
                           A  6055    
041D1E CD 07 46 04         A  6056    	CALL	__icmpzero
041D22 C2 83 1E 04         A  6057    	JR	NZ,L_208
                           A  6058    ; 2393			c = dp->dir[DIR_Name];
                           A  6059    .LINE 2393
                           A  6060    
041D26 DD3106              A  6061    	LD	IY,(IX+%6)
041D29 FD071B              A  6062    	LD	BC,(IY+%1B)
041D2C DD0FF0              A  6063    	LD	(IX+%FFFFFFF0),BC
041D2F C5E1                A  6064    	LD	HL,BC
041D31 7E                  A  6065    	LD	A,(HL)
041D32 DD77FF              A  6066    	LD	(IX+%FFFFFFFF),A
                           A  6067    ; 2394			if (c == 0) { res = FR_NO_FILE;
                           A  6068    .LINE 2394
                           A  6069    
041D35 B7                  A  6070    	OR	A,A
041D36 20 0B               A  6071    	JR	NZ,L_183
041D38 01040000            A  6072    	LD	BC,4
041D3C DD0FFB              A  6073    	LD	(IX+%FFFFFFFB),BC
041D3F C3 83 1E 04         A  6074    	JR	L_208
041D43                     A  6075    L_183:
                           A  6076    ; 2395	#if FF_USE_LFN		/* LFN configuratio
                           A  6077    ; 2396			dp->obj.attr = a = dp->dir[DIR_
                           A  6078    .LINE 2396
                           A  6079    
041D43 DD31F0              A  6080    	LD	IY,(IX+%FFFFFFF0)
041D46 FD7E0B              A  6081    	LD	A,(IY+%B)
041D49 E63F                A  6082    	AND	A,%3F
041D4B DD77FA              A  6083    	LD	(IX+%FFFFFFFA),A
041D4E DD3106              A  6084    	LD	IY,(IX+%6)
041D51 FD7705              A  6085    	LD	(IY+%5),A
                           A  6086    ; 2397			if (c == DDEM || ((a & AM_VOL) 
                           A  6087    .LINE 2397
                           A  6088    
041D54 DD7EFF              A  6089    	LD	A,(IX+%FFFFFFFF)
041D57 FEE5                A  6090    	CP	A,%E5
041D59 28 0E               A  6091    	JR	Z,L_203
041D5B DD7EFA              A  6092    	LD	A,(IX+%FFFFFFFA)
041D5E E608                A  6093    	AND	A,%8
041D60 28 1D               A  6094    	JR	Z,L_204
041D62 DD7EFA              A  6095    	LD	A,(IX+%FFFFFFFA)
041D65 FE0F                A  6096    	CP	A,%F
041D67 28 16               A  6097    	JR	Z,L_204
041D69                     A  6098    L_203:
                           A  6099    ; 2398				ord = 0xFF; dp->blk_ofs = 0
                           A  6100    .LINE 2398
                           A  6101    
041D69 DD36FEFF            A  6102    	LD	(IX+%FFFFFFFE),%FF
041D6D 01FFFFFF            A  6103    	LD	BC,16777215
041D71 DD3106              A  6104    	LD	IY,(IX+%6)
041D74 FD0F2A              A  6105    	LD	(IY+%2A),BC
041D77 FD362DFF            A  6106    	LD	(IY+%2D),%FF
                           A  6107    ; 2399			} else {
                           A  6108    .LINE 2399
                           A  6109    
041D7B C3 69 1E 04         A  6110    	JR	L_205
041D7F                     A  6111    L_204:
                           A  6112    ; 2400				if (a == AM_LFN) {			
                           A  6113    .LINE 2400
                           A  6114    
041D7F DD7EFA              A  6115    	LD	A,(IX+%FFFFFFFA)
041D82 FE0F                A  6116    	CP	A,%F
041D84 C2 10 1E 04         A  6117    	JR	NZ,L_202
                           A  6118    ; 2401					if (!(dp->fn[NSFLAG] & 
                           A  6119    .LINE 2401
                           A  6120    
041D88 DD3106              A  6121    	LD	IY,(IX+%6)
041D8B FD7E29              A  6122    	LD	A,(IY+%29)
041D8E E640                A  6123    	AND	A,%40
041D90 C2 69 1E 04         A  6124    	JR	NZ,L_205
                           A  6125    ; 2402						if (c & LLEF) {		
                           A  6126    .LINE 2402
                           A  6127    
041D94 DD7EFF              A  6128    	LD	A,(IX+%FFFFFFFF)
041D97 E640                A  6129    	AND	A,%40
041D99 28 26               A  6130    	JR	Z,L_193
                           A  6131    ; 2403							sum = dp->dir[L
                           A  6132    .LINE 2403
                           A  6133    
041D9B DD3106              A  6134    	LD	IY,(IX+%6)
041D9E FD371B              A  6135    	LD	IY,(IY+%1B)
041DA1 FD7E0D              A  6136    	LD	A,(IY+%D)
041DA4 DD77F9              A  6137    	LD	(IX+%FFFFFFF9),A
                           A  6138    ; 2404							c &= (BYTE)~LLE
                           A  6139    .LINE 2404
                           A  6140    
041DA7 DD7EFF              A  6141    	LD	A,(IX+%FFFFFFFF)
041DAA CBB7                A  6142    	RES	%6,A
041DAC DD77FF              A  6143    	LD	(IX+%FFFFFFFF),A
041DAF DD77FE              A  6144    	LD	(IX+%FFFFFFFE),A
                           A  6145    ; 2405							dp->blk_ofs = d
                           A  6146    .LINE 2405
                           A  6147    
041DB2 DD3106              A  6148    	LD	IY,(IX+%6)
041DB5 FD070F              A  6149    	LD	BC,(IY+%F)
041DB8 FD7E12              A  6150    	LD	A,(IY+%12)
041DBB FD0F2A              A  6151    	LD	(IY+%2A),BC
041DBE FD772D              A  6152    	LD	(IY+%2D),A
                           A  6153    ; 2406						}
041DC1                     A  6154    L_193:
                           A  6155    .LINE 2406
                           A  6156    
                           A  6157    ; 2407						/* Check validity o
                           A  6158    ; 2408						ord = (c == ord && 
                           A  6159    .LINE 2408
                           A  6160    
041DC1 DD7EFF              A  6161    	LD	A,(IX+%FFFFFFFF)
041DC4 DDBEFE              A  6162    	CP	A,(IX+%FFFFFFFE)
041DC7 20 38               A  6163    	JR	NZ,L_191
041DC9 DD3106              A  6164    	LD	IY,(IX+%6)
041DCC FD071B              A  6165    	LD	BC,(IY+%1B)
041DCF DD0FED              A  6166    	LD	(IX+%FFFFFFED),BC
041DD2 DD31ED              A  6167    	LD	IY,(IX+%FFFFFFED)
041DD5 FD7E0D              A  6168    	LD	A,(IY+%D)
041DD8 DDBEF9              A  6169    	CP	A,(IX+%FFFFFFF9)
041DDB 20 24               A  6170    	JR	NZ,L_191
041DDD DD07ED              A  6171    	LD	BC,(IX+%FFFFFFED)
041DE0 C5                  A  6172    	PUSH	BC
041DE1 DD31F6              A  6173    	LD	IY,(IX+%FFFFFFF6)
041DE4 FD070B              A  6174    	LD	BC,(IY+%B)
041DE7 C5                  A  6175    	PUSH	BC
041DE8 CD 88 18 04         A  6176    	CALL	_cmp_lfn
041DEC C1                  A  6177    	POP	BC
041DED C1                  A  6178    	POP	BC
041DEE CD 07 46 04         A  6179    	CALL	__icmpzero
041DF2 28 0D               A  6180    	JR	Z,L_191
041DF4 DD7EFE              A  6181    	LD	A,(IX+%FFFFFFFE)
041DF7 B7ED62              A  6182    	UEXT	HL
041DFA 6F                  A  6183    	LD	L,A
041DFB 2B                  A  6184    	DEC	HL
041DFC DD2FF3              A  6185    	LD	(IX+%FFFFFFF3),HL
041DFF 18 07               A  6186    	JR	L_192
041E01                     A  6187    L_191:
041E01 01FF0000            A  6188    	LD	BC,255
041E05 DD0FF3              A  6189    	LD	(IX+%FFFFFFF3),BC
041E08                     A  6190    L_192:
041E08 DD7EF3              A  6191    	LD	A,(IX+%FFFFFFF3)
041E0B DD77FE              A  6192    	LD	(IX+%FFFFFFFE),A
                           A  6193    ; 2409					}
                           A  6194    ; 2410				} else {					
                           A  6195    .LINE 2410
                           A  6196    
041E0E 18 59               A  6197    	JR	L_205
041E10                     A  6198    L_202:
                           A  6199    ; 2411					if (ord == 0 && sum == 
                           A  6200    .LINE 2411
                           A  6201    
041E10 DD7EFE              A  6202    	LD	A,(IX+%FFFFFFFE)
041E13 B7                  A  6203    	OR	A,A
041E14 20 11               A  6204    	JR	NZ,L_199
041E16 DD3106              A  6205    	LD	IY,(IX+%6)
041E19 FD071B              A  6206    	LD	BC,(IY+%1B)
041E1C C5                  A  6207    	PUSH	BC
041E1D CD B8 1A 04         A  6208    	CALL	_sum_sfn
041E21 C1                  A  6209    	POP	BC
041E22 DDBEF9              A  6210    	CP	A,(IX+%FFFFFFF9)
041E25 28 5C               A  6211    	JR	Z,L_208
041E27                     A  6212    L_199:
                           A  6213    ; 2412					if (!(dp->fn[NSFLAG] & 
                           A  6214    .LINE 2412
                           A  6215    
041E27 DD3106              A  6216    	LD	IY,(IX+%6)
041E2A ED031E              A  6217    	LEA	BC,IY+%1E
041E2D DD0FEA              A  6218    	LD	(IX+%FFFFFFEA),BC
041E30 DD31EA              A  6219    	LD	IY,(IX+%FFFFFFEA)
041E33 FD7E0B              A  6220    	LD	A,(IY+%B)
041E36 E601                A  6221    	AND	A,%1
041E38 20 1D               A  6222    	JR	NZ,L_200
041E3A 010B0000            A  6223    	LD	BC,11
041E3E C5                  A  6224    	PUSH	BC
041E3F DD07EA              A  6225    	LD	BC,(IX+%FFFFFFEA)
041E42 C5                  A  6226    	PUSH	BC
041E43 DD3106              A  6227    	LD	IY,(IX+%6)
041E46 FD071B              A  6228    	LD	BC,(IY+%1B)
041E49 C5                  A  6229    	PUSH	BC
041E4A CD CB 45 04         A  6230    	CALL	_memcmp
041E4E C1                  A  6231    	POP	BC
041E4F C1                  A  6232    	POP	BC
041E50 C1                  A  6233    	POP	BC
041E51 CD 07 46 04         A  6234    	CALL	__icmpzero
041E55 28 2C               A  6235    	JR	Z,L_208
041E57                     A  6236    L_200:
                           A  6237    ; 2413					ord = 0xFF; dp->blk_ofs
                           A  6238    .LINE 2413
                           A  6239    
041E57 DD36FEFF            A  6240    	LD	(IX+%FFFFFFFE),%FF
041E5B 01FFFFFF            A  6241    	LD	BC,16777215
041E5F DD3106              A  6242    	LD	IY,(IX+%6)
041E62 FD0F2A              A  6243    	LD	(IY+%2A),BC
041E65 FD362DFF            A  6244    	LD	(IY+%2D),%FF
                           A  6245    ; 2414				}
                           A  6246    ; 2415			}
041E69                     A  6247    L_205:
                           A  6248    .LINE 2415
                           A  6249    
                           A  6250    ; 2416	#else		/* Non LFN configuration */
                           A  6251    ; 2417			dp->obj.attr = dp->dir[DIR_Attr
                           A  6252    ; 2418			if (!(dp->dir[DIR_Attr] & AM_VO
                           A  6253    ; 2419	#endif
                           A  6254    ; 2420			res = dir_next(dp, 0);	/* Next
                           A  6255    .LINE 2420
                           A  6256    
041E69 01000000            A  6257    	LD	BC,0
041E6D C5                  A  6258    	PUSH	BC
041E6E DD0706              A  6259    	LD	BC,(IX+%6)
041E71 C5                  A  6260    	PUSH	BC
041E72 CD 0F 16 04         A  6261    	CALL	_dir_next
041E76 C1                  A  6262    	POP	BC
041E77 C1                  A  6263    	POP	BC
041E78 DD2FFB              A  6264    	LD	(IX+%FFFFFFFB),HL
                           A  6265    ; 2421		} while (res == FR_OK);
                           A  6266    .LINE 2421
                           A  6267    
041E7B CD 07 46 04         A  6268    	CALL	__icmpzero
041E7F CA 02 1D 04         A  6269    	JR	Z,L_206
041E83                     A  6270    L_208:
                           A  6271    ; 2422	
                           A  6272    ; 2423		return res;
                           A  6273    .LINE 2423
                           A  6274    
041E83 DD27FB              A  6275    	LD	HL,(IX+%FFFFFFFB)
                           A  6276    ; 2424	}
041E86                     A  6277    L_209:
                           A  6278    .LINE 2424
                           A  6279    
041E86 DDF9                A  6280    	LD	SP,IX
041E88 DDE1                A  6281    	POP	IX
041E8A C9                  A  6282    	RET	
                           A  6283    
                           A  6284    
                           A  6285    ;**************************** _dir_find *******
                           A  6286    ;Name                         Addr/Register   S
                           A  6287    ;_memcmp                             IMPORT  --
                           A  6288    ;G_8                                  IX-22    
                           A  6289    ;G_7                                  IX-19    
                           A  6290    ;G_6                                  IX-16    
                           A  6291    ;temp189                              IX-13    
                           A  6292    ;fs                                   IX-10    
                           A  6293    ;sum                                   IX-7    
                           A  6294    ;a                                     IX-6    
                           A  6295    ;res                                   IX-5    
                           A  6296    ;ord                                   IX-2    
                           A  6297    ;c                                     IX-1    
                           A  6298    ;dp                                    IX+6    
                           A  6299    
                           A  6300    
                           A  6301    ; Stack Frame Size: 31 (bytes)
                           A  6302    ;       Spill Code: 0 (instruction)
                           A  6303    
                           A  6304    
                           A  6305    .ENDFUNC "dir_find",2424,"_dir_find"
                           A  6306    ; 2425	
                           A  6307    ; 2426	
                           A  6308    ; 2427	
                           A  6309    ; 2428	
                           A  6310    ; 2429	#if !FF_FS_READONLY
                           A  6311    ; 2430	/*-------------------------------------
                           A  6312    ; 2431	/* Register an object to the directory 
                           A  6313    ; 2432	/*-------------------------------------
                           A  6314    ; 2433	
                           A  6315    ; 2434	static FRESULT dir_register (	/* FR_O
                           A  6316    ; 2435		DIR* dp						/* Targ
                           A  6317    ; 2436	)
                           A  6318    ; 2437	{
                           A  6319    ; 2438		FRESULT res;
                           A  6320    ; 2439		FATFS *fs = dp->obj.fs;
                           A  6321    ; 2440	#if FF_USE_LFN		/* LFN configuratio
                           A  6322    ; 2441		UINT n, len, n_ent;
                           A  6323    ; 2442		BYTE sn[12], sum;
                           A  6324    ; 2443	
                           A  6325    ; 2444	
                           A  6326    ; 2445		if (dp->fn[NSFLAG] & (NS_DOT | NS_N
                           A  6327    ; 2446		for (len = 0; fs->lfnbuf[len]; len+
                           A  6328    ; 2447	
                           A  6329    ; 2448	#if FF_FS_EXFAT
                           A  6330    ; 2449		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  6331    ; 2450			n_ent = (len + 14) / 15 + 2;	
                           A  6332    ; 2451			res = dir_alloc(dp, n_ent);		
                           A  6333    ; 2452			if (res != FR_OK) return res;
                           A  6334    ; 2453			dp->blk_ofs = dp->dptr - SZDIRE
                           A  6335    ; 2454	
                           A  6336    ; 2455			if (dp->obj.stat & 4) {			
                           A  6337    ; 2456				dp->obj.stat &= ~4;
                           A  6338    ; 2457				res = fill_first_frag(&dp->
                           A  6339    ; 2458				if (res != FR_OK) return re
                           A  6340    ; 2459				res = fill_last_frag(&dp->o
                           A  6341    ; 2460				if (res != FR_OK) return re
                           A  6342    ; 2461				if (dp->obj.sclust != 0) {	
                           A  6343    ; 2462					DIR dj;
                           A  6344    ; 2463	
                           A  6345    ; 2464					res = load_obj_xdir(&dj
                           A  6346    ; 2465					if (res != FR_OK) retur
                           A  6347    ; 2466					dp->obj.objsize += (DWO
                           A  6348    ; 2467					st_qword(fs->dirbuf + X
                           A  6349    ; 2468					st_qword(fs->dirbuf + X
                           A  6350    ; 2469					fs->dirbuf[XDIR_GenFlag
                           A  6351    ; 2470					res = store_xdir(&dj);	
                           A  6352    ; 2471					if (res != FR_OK) retur
                           A  6353    ; 2472				}
                           A  6354    ; 2473			}
                           A  6355    ; 2474	
                           A  6356    ; 2475			create_xdir(fs->dirbuf, fs->lfn
                           A  6357    ; 2476			return FR_OK;
                           A  6358    ; 2477		}
                           A  6359    ; 2478	#endif
                           A  6360    ; 2479		/* On the FAT/FAT32 volume */
                           A  6361    ; 2480		memcpy(sn, dp->fn, 12);
                           A  6362    ; 2481		if (sn[NSFLAG] & NS_LOSS) {			
                           A  6363    ; 2482			dp->fn[NSFLAG] = NS_NOLFN;		
                           A  6364    ; 2483			for (n = 1; n < 100; n++) {
                           A  6365    ; 2484				gen_numname(dp->fn, sn, fs-
                           A  6366    ; 2485				res = dir_find(dp);			
                           A  6367    ; 2486				if (res != FR_OK) break;
                           A  6368    ; 2487			}
                           A  6369    ; 2488			if (n == 100) return FR_DENIED;
                           A  6370    ; 2489			if (res != FR_NO_FILE) return r
                           A  6371    ; 2490			dp->fn[NSFLAG] = sn[NSFLAG];
                           A  6372    ; 2491		}
                           A  6373    ; 2492	
                           A  6374    ; 2493		/* Create an SFN with/without LFNs.
                           A  6375    ; 2494		n_ent = (sn[NSFLAG] & NS_LFN) ? (le
                           A  6376    ; 2495		res = dir_alloc(dp, n_ent);		/* 
                           A  6377    ; 2496		if (res == FR_OK && --n_ent) {	/* 
                           A  6378    ; 2497			res = dir_sdi(dp, dp->dptr - n_
                           A  6379    ; 2498			if (res == FR_OK) {
                           A  6380    ; 2499				sum = sum_sfn(dp->fn);	/* 
                           A  6381    ; 2500				do {					/* 
                           A  6382    ; 2501					res = move_window(fs, d
                           A  6383    ; 2502					if (res != FR_OK) break
                           A  6384    ; 2503					put_lfn(fs->lfnbuf, dp-
                           A  6385    ; 2504					fs->wflag = 1;
                           A  6386    ; 2505					res = dir_next(dp, 0);	
                           A  6387    ; 2506				} while (res == FR_OK && --
                           A  6388    ; 2507			}
                           A  6389    ; 2508		}
                           A  6390    ; 2509	
                           A  6391    ; 2510	#else	/* Non LFN configuration */
                           A  6392    ; 2511		res = dir_alloc(dp, 1);		/* Allo
                           A  6393    ; 2512	
                           A  6394    ; 2513	#endif
                           A  6395    ; 2514	
                           A  6396    ; 2515		/* Set SFN entry */
                           A  6397    ; 2516		if (res == FR_OK) {
                           A  6398    ; 2517			res = move_window(fs, dp->sect)
                           A  6399    ; 2518			if (res == FR_OK) {
                           A  6400    ; 2519				memset(dp->dir, 0, SZDIRE);
                           A  6401    ; 2520				memcpy(dp->dir + DIR_Name, 
                           A  6402    ; 2521	#if FF_USE_LFN
                           A  6403    ; 2522				dp->dir[DIR_NTres] = dp->fn
                           A  6404    ; 2523	#endif
                           A  6405    ; 2524				fs->wflag = 1;
                           A  6406    ; 2525			}
                           A  6407    ; 2526		}
                           A  6408    ; 2527	
                           A  6409    ; 2528		return res;
                           A  6410    ; 2529	}
                           A  6411    ; 2530	
                           A  6412    ; 2531	#endif /* !FF_FS_READONLY */
                           A  6413    ; 2532	
                           A  6414    ; 2533	
                           A  6415    ; 2534	
                           A  6416    ; 2535	#if !FF_FS_READONLY && FF_FS_MINIMIZE =
                           A  6417    ; 2536	/*-------------------------------------
                           A  6418    ; 2537	/* Remove an object from the directory 
                           A  6419    ; 2538	/*-------------------------------------
                           A  6420    ; 2539	
                           A  6421    ; 2540	static FRESULT dir_remove (	/* FR_OK:Su
                           A  6422    ; 2541		DIR* dp					/* Director
                           A  6423    ; 2542	)
                           A  6424    ; 2543	{
                           A  6425    ; 2544		FRESULT res;
                           A  6426    ; 2545		FATFS *fs = dp->obj.fs;
                           A  6427    ; 2546	#if FF_USE_LFN		/* LFN configuratio
                           A  6428    ; 2547		DWORD last = dp->dptr;
                           A  6429    ; 2548	
                           A  6430    ; 2549		res = (dp->blk_ofs == 0xFFFFFFFF) ?
                           A  6431    ; 2550		if (res == FR_OK) {
                           A  6432    ; 2551			do {
                           A  6433    ; 2552				res = move_window(fs, dp->s
                           A  6434    ; 2553				if (res != FR_OK) break;
                           A  6435    ; 2554				if (FF_FS_EXFAT && fs->fs_t
                           A  6436    ; 2555					dp->dir[XDIR_Type] &= 0
                           A  6437    ; 2556				} else {					
                           A  6438    ; 2557					dp->dir[DIR_Name] = DDE
                           A  6439    ; 2558				}
                           A  6440    ; 2559				fs->wflag = 1;
                           A  6441    ; 2560				if (dp->dptr >= last) break
                           A  6442    ; 2561				res = dir_next(dp, 0);	/* 
                           A  6443    ; 2562			} while (res == FR_OK);
                           A  6444    ; 2563			if (res == FR_NO_FILE) res = FR
                           A  6445    ; 2564		}
                           A  6446    ; 2565	#else			/* Non LFN configuratio
                           A  6447    ; 2566	
                           A  6448    ; 2567		res = move_window(fs, dp->sect);
                           A  6449    ; 2568		if (res == FR_OK) {
                           A  6450    ; 2569			dp->dir[DIR_Name] = DDEM;	/* 
                           A  6451    ; 2570			fs->wflag = 1;
                           A  6452    ; 2571		}
                           A  6453    ; 2572	#endif
                           A  6454    ; 2573	
                           A  6455    ; 2574		return res;
                           A  6456    ; 2575	}
                           A  6457    ; 2576	
                           A  6458    ; 2577	#endif /* !FF_FS_READONLY && FF_FS_MINI
                           A  6459    ; 2578	
                           A  6460    ; 2579	
                           A  6461    ; 2580	
                           A  6462    ; 2581	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A  6463    ; 2582	/*-------------------------------------
                           A  6464    ; 2583	/* Get file information from directory 
                           A  6465    ; 2584	/*-------------------------------------
                           A  6466    ; 2585	
                           A  6467    ; 2586	static void get_fileinfo (
                           A  6468    ; 2587		DIR* dp,			/* Pointer to t
                           A  6469    ; 2588		FILINFO* fno		/* Pointer to t
                           A  6470    ; 2589	)
                           A  6471    ; 2590	{
041E8B                     A  6472    _get_fileinfo:
                           A  6473    .DEFINE "_get_fileinfo"
                           A  6474    
                           A  6475    .VALUE _get_fileinfo
                           A  6476    
                           A  6477    .CLASS 3
                           A  6478    
                           A  6479    .TYPE 65
                           A  6480    
                           A  6481    .ENDEF
                           A  6482    
                           A  6483    .BEGFUNC "get_fileinfo",2590,"_get_fileinfo"
                           A  6484    
                           A  6485    .LINE 2590
                           A  6486    
                           A  6487    .DEFINE "dp"
                           A  6488    
                           A  6489    .CLASS 65
                           A  6490    
                           A  6491    .VALUE 6
                           A  6492    
                           A  6493    .TAG "NONAME3"
                           A  6494    
                           A  6495    .TYPE 40
                           A  6496    
                           A  6497    .ENDEF
                           A  6498    
                           A  6499    .DEFINE "fno"
                           A  6500    
                           A  6501    .CLASS 65
                           A  6502    
                           A  6503    .VALUE 9
                           A  6504    
                           A  6505    .TAG "NONAME4"
                           A  6506    
                           A  6507    .TYPE 40
                           A  6508    
                           A  6509    .ENDEF
                           A  6510    
                           A  6511    .DEFINE "di"
                           A  6512    
                           A  6513    .CLASS 65
                           A  6514    
                           A  6515    .VALUE -3
                           A  6516    
                           A  6517    .TYPE 14
                           A  6518    
                           A  6519    .ENDEF
                           A  6520    
                           A  6521    .DEFINE "wc"
                           A  6522    
                           A  6523    .CLASS 65
                           A  6524    
                           A  6525    .VALUE -5
                           A  6526    
                           A  6527    .TYPE 13
                           A  6528    
                           A  6529    .ENDEF
                           A  6530    
                           A  6531    .DEFINE "si"
                           A  6532    
                           A  6533    .CLASS 65
                           A  6534    
                           A  6535    .VALUE -8
                           A  6536    
                           A  6537    .TYPE 14
                           A  6538    
                           A  6539    .ENDEF
                           A  6540    
                           A  6541    .DEFINE "hs"
                           A  6542    
                           A  6543    .CLASS 65
                           A  6544    
                           A  6545    .VALUE -10
                           A  6546    
                           A  6547    .TYPE 13
                           A  6548    
                           A  6549    .ENDEF
                           A  6550    
                           A  6551    .DEFINE "lcf"
                           A  6552    
                           A  6553    .CLASS 65
                           A  6554    
                           A  6555    .VALUE -11
                           A  6556    
                           A  6557    .TYPE 12
                           A  6558    
                           A  6559    .ENDEF
                           A  6560    
                           A  6561    .DEFINE "nw"
                           A  6562    
                           A  6563    .CLASS 65
                           A  6564    
                           A  6565    .VALUE -23
                           A  6566    
                           A  6567    .TYPE 14
                           A  6568    
                           A  6569    .ENDEF
                           A  6570    
                           A  6571    .DEFINE "fs"
                           A  6572    
                           A  6573    .CLASS 65
                           A  6574    
                           A  6575    .VALUE -29
                           A  6576    
                           A  6577    .TAG "NONAME0"
                           A  6578    
                           A  6579    .TYPE 40
                           A  6580    
                           A  6581    .ENDEF
                           A  6582    
041E8B DDE5                A  6583    	PUSH	IX
041E8D DD210000 00         A  6584    	LD	IX,0
041E92 DD39                A  6585    	ADD	IX,SP
041E94 ED22DF              A  6586    	LEA	HL,IX+%FFFFFFDF
041E97 F9                  A  6587    	LD	SP,HL
                           A  6588    ; 2591		UINT si, di;
                           A  6589    ; 2592	#if FF_USE_LFN
                           A  6590    ; 2593		BYTE lcf;
                           A  6591    ; 2594		WCHAR wc, hs;
                           A  6592    ; 2595		FATFS *fs = dp->obj.fs;
                           A  6593    .LINE 2595
                           A  6594    
041E98 DD3106              A  6595    	LD	IY,(IX+%6)
041E9B FD0700              A  6596    	LD	BC,(IY+%0)
041E9E DD0FE3              A  6597    	LD	(IX+%FFFFFFE3),BC
                           A  6598    ; 2596		UINT nw;
                           A  6599    ; 2597	#else
                           A  6600    ; 2598		TCHAR c;
                           A  6601    ; 2599	#endif
                           A  6602    ; 2600	
                           A  6603    ; 2601	
                           A  6604    ; 2602		fno->fname[0] = 0;			/* Inva
                           A  6605    .LINE 2602
                           A  6606    
041EA1 DD3109              A  6607    	LD	IY,(IX+%9)
041EA4 FD361600            A  6608    	LD	(IY+%16),%0
                           A  6609    ; 2603		if (dp->sect == 0) return;	/* Exit
                           A  6610    .LINE 2603
                           A  6611    
041EA8 DD3106              A  6612    	LD	IY,(IX+%6)
041EAB FD2717              A  6613    	LD	HL,(IY+%17)
041EAE FD5E1A              A  6614    	LD	E,(IY+%1A)
041EB1 CD DA 44 04         A  6615    	CALL	__lcmpzero
041EB5 CA C8 21 04         A  6616    	JR	Z,L_257
                           A  6617    ; 2604	
                           A  6618    ; 2605	#if FF_USE_LFN		/* LFN configuratio
                           A  6619    ; 2606	#if FF_FS_EXFAT
                           A  6620    ; 2607		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  6621    ; 2608			UINT nc = 0;
                           A  6622    ; 2609	
                           A  6623    ; 2610			si = SZDIRE * 2; di = 0;	/* 
                           A  6624    ; 2611			hs = 0;
                           A  6625    ; 2612			while (nc < fs->dirbuf[XDIR_Num
                           A  6626    ; 2613				if (si >= MAXDIRB(FF_MAX_LF
                           A  6627    ; 2614				if ((si % SZDIRE) == 0) si 
                           A  6628    ; 2615				wc = ld_word(fs->dirbuf + s
                           A  6629    ; 2616				if (hs == 0 && IsSurrogate(
                           A  6630    ; 2617					hs = wc; continue;		
                           A  6631    ; 2618				}
                           A  6632    ; 2619				nw = put_utf((DWORD)hs << 1
                           A  6633    ; 2620				if (nw == 0) { di = 0; brea
                           A  6634    ; 2621				di += nw;
                           A  6635    ; 2622				hs = 0;
                           A  6636    ; 2623			}
                           A  6637    ; 2624			if (hs != 0) di = 0;			
                           A  6638    ; 2625			if (di == 0) fno->fname[di++] =
                           A  6639    ; 2626			fno->fname[di] = 0;				
                           A  6640    ; 2627			fno->altname[0] = 0;			
                           A  6641    ; 2628	
                           A  6642    ; 2629			fno->fattrib = fs->dirbuf[XDIR_
                           A  6643    ; 2630			fno->fsize = (fno->fattrib & AM
                           A  6644    ; 2631			fno->ftime = ld_word(fs->dirbuf
                           A  6645    ; 2632			fno->fdate = ld_word(fs->dirbuf
                           A  6646    ; 2633			return;
                           A  6647    ; 2634		} else
                           A  6648    ; 2635	#endif
                           A  6649    ; 2636		{	/* FAT/FAT32 volume */
                           A  6650    ; 2637			if (dp->blk_ofs != 0xFFFFFFFF) 
                           A  6651    .LINE 2637
                           A  6652    
041EB9 DD3106              A  6653    	LD	IY,(IX+%6)
041EBC FD272A              A  6654    	LD	HL,(IY+%2A)
041EBF FD5E2D              A  6655    	LD	E,(IY+%2D)
041EC2 01FFFFFF            A  6656    	LD	BC,16777215
041EC6 3EFF                A  6657    	LD	A,%FF
041EC8 CD AA 46 04         A  6658    	CALL	__lcmpu
041ECC CA D4 1F 04         A  6659    	JR	Z,L_225
                           A  6660    ; 2638				si = di = 0;
                           A  6661    .LINE 2638
                           A  6662    
041ED0 01000000            A  6663    	LD	BC,0
041ED4 DD0FFD              A  6664    	LD	(IX+%FFFFFFFD),BC
041ED7 DD0FF8              A  6665    	LD	(IX+%FFFFFFF8),BC
                           A  6666    ; 2639				hs = 0;
                           A  6667    .LINE 2639
                           A  6668    
041EDA DD36F600            A  6669    	LD	(IX+%FFFFFFF6),%0
041EDE DD36F700            A  6670    	LD	(IX+%FFFFFFF7),%0
                           A  6671    ; 2640				while (fs->lfnbuf[si] != 0)
                           A  6672    .LINE 2640
                           A  6673    
041EE2 C3 9D 1F 04         A  6674    	JR	L_218
041EE6                     A  6675    L_219:
                           A  6676    ; 2641					wc = fs->lfnbuf[si++];	
                           A  6677    .LINE 2641
                           A  6678    
041EE6 DD27F8              A  6679    	LD	HL,(IX+%FFFFFFF8)
041EE9 29                  A  6680    	ADD	HL,HL
041EEA DD07EF              A  6681    	LD	BC,(IX+%FFFFFFEF)
041EED 09                  A  6682    	ADD	HL,BC
041EEE ED07                A  6683    	LD	BC,(HL)
041EF0 DD71FB              A  6684    	LD	(IX+%FFFFFFFB),C
041EF3 DD70FC              A  6685    	LD	(IX+%FFFFFFFC),B
041EF6 DD07F8              A  6686    	LD	BC,(IX+%FFFFFFF8)
041EF9 03                  A  6687    	INC	BC
041EFA DD0FF8              A  6688    	LD	(IX+%FFFFFFF8),BC
                           A  6689    ; 2642					if (hs == 0 && IsSurrog
                           A  6690    .LINE 2642
                           A  6691    
041EFD DD27F6              A  6692    	LD	HL,(IX+%FFFFFFF6)
041F00 CD FA 46 04         A  6693    	CALL	__scmpzero
041F04 20 25               A  6694    	JR	NZ,L_215
041F06 490100D8            A  6695    	LD.LIS	BC,55296
041F0A DD27FB              A  6696    	LD	HL,(IX+%FFFFFFFB)
041F0D B7                  A  6697    	OR	A,A
041F0E 40ED42              A  6698    	SBC.SIS	HL,BC
041F11 38 18               A  6699    	JR	C,L_215
041F13 DD07FB              A  6700    	LD	BC,(IX+%FFFFFFFB)
041F16 4921FFDF            A  6701    	LD.LIS	HL,57343
041F1A B7                  A  6702    	OR	A,A
041F1B 40ED42              A  6703    	SBC.SIS	HL,BC
041F1E 38 0B               A  6704    	JR	C,L_215
                           A  6705    ; 2643						hs = wc; continue;	
                           A  6706    .LINE 2643
                           A  6707    
041F20 DD07FB              A  6708    	LD	BC,(IX+%FFFFFFFB)
041F23 DD71F6              A  6709    	LD	(IX+%FFFFFFF6),C
041F26 DD70F7              A  6710    	LD	(IX+%FFFFFFF7),B
041F29 18 72               A  6711    	JR	L_218
                           A  6712    ; 2644					}
041F2B                     A  6713    L_215:
                           A  6714    .LINE 2644
                           A  6715    
                           A  6716    ; 2645					nw = put_utf((DWORD)hs 
                           A  6717    .LINE 2645
                           A  6718    
041F2B 21FF0000            A  6719    	LD	HL,255
041F2F DD07FD              A  6720    	LD	BC,(IX+%FFFFFFFD)
041F32 B7                  A  6721    	OR	A,A
041F33 ED42                A  6722    	SBC	HL,BC
041F35 E5                  A  6723    	PUSH	HL
041F36 DD07FD              A  6724    	LD	BC,(IX+%FFFFFFFD)
041F39 DD3109              A  6725    	LD	IY,(IX+%9)
041F3C ED2316              A  6726    	LEA	HL,IY+%16
041F3F 09                  A  6727    	ADD	HL,BC
041F40 E5                  A  6728    	PUSH	HL
041F41 DD07F6              A  6729    	LD	BC,(IX+%FFFFFFF6)
041F44 CD 95 44 04         A  6730    	CALL	__stoiu
041F48 AF                  A  6731    	XOR	A,A
041F49 E5C1                A  6732    	LD	BC,HL
041F4B 2E10                A  6733    	LD	L,%10
041F4D CD 07 47 04         A  6734    	CALL	__lshl
041F51 DD0FE0              A  6735    	LD	(IX+%FFFFFFE0),BC
041F54 5F                  A  6736    	LD	E,A
041F55 DD07FB              A  6737    	LD	BC,(IX+%FFFFFFFB)
041F58 CD 95 44 04         A  6738    	CALL	__stoiu
041F5C E5C1                A  6739    	LD	BC,HL
041F5E AF                  A  6740    	XOR	A,A
041F5F DD27E0              A  6741    	LD	HL,(IX+%FFFFFFE0)
041F62 CD F5 45 04         A  6742    	CALL	__lor
041F66 4B                  A  6743    	LD	C,E
041F67 0600                A  6744    	LD	B,%0
041F69 C5                  A  6745    	PUSH	BC
041F6A E5                  A  6746    	PUSH	HL
041F6B DD77DF              A  6747    	LD	(IX+%FFFFFFDF),A
041F6E CD 42 10 04         A  6748    	CALL	_put_utf
041F72 DD7EDF              A  6749    	LD	A,(IX+%FFFFFFDF)
041F75 C1                  A  6750    	POP	BC
041F76 C1                  A  6751    	POP	BC
041F77 C1                  A  6752    	POP	BC
041F78 C1                  A  6753    	POP	BC
041F79 DD2FE9              A  6754    	LD	(IX+%FFFFFFE9),HL
                           A  6755    ; 2646					if (nw == 0) { di = 0; 
                           A  6756    .LINE 2646
                           A  6757    
041F7C CD 07 46 04         A  6758    	CALL	__icmpzero
041F80 20 09               A  6759    	JR	NZ,L_217
041F82 01000000            A  6760    	LD	BC,0
041F86 DD0FFD              A  6761    	LD	(IX+%FFFFFFFD),BC
041F89 18 2D               A  6762    	JR	L_221
041F8B                     A  6763    L_217:
                           A  6764    ; 2647					di += nw;
                           A  6765    .LINE 2647
                           A  6766    
041F8B DD07E9              A  6767    	LD	BC,(IX+%FFFFFFE9)
041F8E DD27FD              A  6768    	LD	HL,(IX+%FFFFFFFD)
041F91 09                  A  6769    	ADD	HL,BC
041F92 DD2FFD              A  6770    	LD	(IX+%FFFFFFFD),HL
                           A  6771    ; 2648					hs = 0;
                           A  6772    .LINE 2648
                           A  6773    
041F95 DD36F600            A  6774    	LD	(IX+%FFFFFFF6),%0
041F99 DD36F700            A  6775    	LD	(IX+%FFFFFFF7),%0
                           A  6776    ; 2649				}
041F9D                     A  6777    L_218:
                           A  6778    .LINE 2649
                           A  6779    
041F9D DD31E3              A  6780    	LD	IY,(IX+%FFFFFFE3)
041FA0 FD070B              A  6781    	LD	BC,(IY+%B)
041FA3 DD0FEF              A  6782    	LD	(IX+%FFFFFFEF),BC
041FA6 DD27F8              A  6783    	LD	HL,(IX+%FFFFFFF8)
041FA9 29                  A  6784    	ADD	HL,HL
041FAA DD07EF              A  6785    	LD	BC,(IX+%FFFFFFEF)
041FAD 09                  A  6786    	ADD	HL,BC
041FAE ED27                A  6787    	LD	HL,(HL)
041FB0 CD FA 46 04         A  6788    	CALL	__scmpzero
041FB4 C2 E6 1E 04         A  6789    	JR	NZ,L_219
041FB8                     A  6790    L_221:
                           A  6791    ; 2650				if (hs != 0) di = 0;	/* 
                           A  6792    .LINE 2650
                           A  6793    
041FB8 DD27F6              A  6794    	LD	HL,(IX+%FFFFFFF6)
041FBB CD FA 46 04         A  6795    	CALL	__scmpzero
041FBF 28 07               A  6796    	JR	Z,L_222
041FC1 01000000            A  6797    	LD	BC,0
041FC5 DD0FFD              A  6798    	LD	(IX+%FFFFFFFD),BC
041FC8                     A  6799    L_222:
                           A  6800    ; 2651				fno->fname[di] = 0;		/* 
                           A  6801    .LINE 2651
                           A  6802    
041FC8 DD07FD              A  6803    	LD	BC,(IX+%FFFFFFFD)
041FCB DD3109              A  6804    	LD	IY,(IX+%9)
041FCE ED2316              A  6805    	LEA	HL,IY+%16
041FD1 09                  A  6806    	ADD	HL,BC
041FD2 3600                A  6807    	LD	(HL),%0
                           A  6808    ; 2652			}
                           A  6809    ; 2653		}
041FD4                     A  6810    L_225:
                           A  6811    .LINE 2653
                           A  6812    
                           A  6813    ; 2654	
                           A  6814    ; 2655		si = di = 0;
                           A  6815    .LINE 2655
                           A  6816    
041FD4 01000000            A  6817    	LD	BC,0
041FD8 DD0FFD              A  6818    	LD	(IX+%FFFFFFFD),BC
041FDB DD0FF8              A  6819    	LD	(IX+%FFFFFFF8),BC
                           A  6820    ; 2656		while (si < 11) {		/* Get SFN 
                           A  6821    .LINE 2656
                           A  6822    
041FDE 18 7E               A  6823    	JR	L_236
041FE0                     A  6824    L_237:
                           A  6825    ; 2657			wc = dp->dir[si++];			/* 
                           A  6826    .LINE 2657
                           A  6827    
041FE0 DD07F8              A  6828    	LD	BC,(IX+%FFFFFFF8)
041FE3 DD3106              A  6829    	LD	IY,(IX+%6)
041FE6 FD271B              A  6830    	LD	HL,(IY+%1B)
041FE9 09                  A  6831    	ADD	HL,BC
041FEA 4E                  A  6832    	LD	C,(HL)
041FEB 0600                A  6833    	LD	B,%0
041FED C5E1                A  6834    	LD	HL,BC
041FEF DD75FB              A  6835    	LD	(IX+%FFFFFFFB),L
041FF2 DD74FC              A  6836    	LD	(IX+%FFFFFFFC),H
041FF5 DD07F8              A  6837    	LD	BC,(IX+%FFFFFFF8)
041FF8 03                  A  6838    	INC	BC
041FF9 DD0FF8              A  6839    	LD	(IX+%FFFFFFF8),BC
                           A  6840    ; 2658			if (wc == ' ') continue;	/* 
                           A  6841    .LINE 2658
                           A  6842    
041FFC 49012000            A  6843    	LD.LIS	BC,32
042000 DD27FB              A  6844    	LD	HL,(IX+%FFFFFFFB)
042003 B7                  A  6845    	OR	A,A
042004 40ED42              A  6846    	SBC.SIS	HL,BC
042007 28 55               A  6847    	JR	Z,L_236
                           A  6848    ; 2659			if (wc == RDDEM) wc = DDEM;	/* 
                           A  6849    .LINE 2659
                           A  6850    
042009 49010500            A  6851    	LD.LIS	BC,5
04200D DD27FB              A  6852    	LD	HL,(IX+%FFFFFFFB)
042010 B7                  A  6853    	OR	A,A
042011 40ED42              A  6854    	SBC.SIS	HL,BC
042014 20 08               A  6855    	JR	NZ,L_233
042016 DD36FBE5            A  6856    	LD	(IX+%FFFFFFFB),%E5
04201A DD36FC00            A  6857    	LD	(IX+%FFFFFFFC),%0
04201E                     A  6858    L_233:
                           A  6859    ; 2660			if (si == 9 && di < FF_SFN_BUF)
                           A  6860    .LINE 2660
                           A  6861    
04201E 01090000            A  6862    	LD	BC,9
042022 DD27F8              A  6863    	LD	HL,(IX+%FFFFFFF8)
042025 B7                  A  6864    	OR	A,A
042026 ED42                A  6865    	SBC	HL,BC
042028 20 1F               A  6866    	JR	NZ,L_235
04202A 010C0000            A  6867    	LD	BC,12
04202E DD27FD              A  6868    	LD	HL,(IX+%FFFFFFFD)
042031 B7                  A  6869    	OR	A,A
042032 ED42                A  6870    	SBC	HL,BC
042034 30 13               A  6871    	JR	NC,L_235
042036 DD07FD              A  6872    	LD	BC,(IX+%FFFFFFFD)
042039 DD3109              A  6873    	LD	IY,(IX+%9)
04203C ED2309              A  6874    	LEA	HL,IY+%9
04203F 09                  A  6875    	ADD	HL,BC
042040 362E                A  6876    	LD	(HL),%2E
042042 DD07FD              A  6877    	LD	BC,(IX+%FFFFFFFD)
042045 03                  A  6878    	INC	BC
042046 DD0FFD              A  6879    	LD	(IX+%FFFFFFFD),BC
042049                     A  6880    L_235:
                           A  6881    ; 2661	#if FF_LFN_UNICODE >= 1	/* Unicode outp
                           A  6882    ; 2662			if (dbc_1st((BYTE)wc) && si != 
                           A  6883    ; 2663				wc = wc << 8 | dp->dir[si++
                           A  6884    ; 2664			}
                           A  6885    ; 2665			wc = ff_oem2uni(wc, CODEPAGE);	
                           A  6886    ; 2666			if (wc == 0) { di = 0; break; }
                           A  6887    ; 2667			nw = put_utf(wc, &fno->altname[
                           A  6888    ; 2668			if (nw == 0) { di = 0; break; }
                           A  6889    ; 2669			di += nw;
                           A  6890    ; 2670	#else					/* ANSI/OEM out
                           A  6891    ; 2671			fno->altname[di++] = (TCHAR)wc;
                           A  6892    .LINE 2671
                           A  6893    
042049 DD7EFB              A  6894    	LD	A,(IX+%FFFFFFFB)
04204C DD07FD              A  6895    	LD	BC,(IX+%FFFFFFFD)
04204F DD3109              A  6896    	LD	IY,(IX+%9)
042052 ED2309              A  6897    	LEA	HL,IY+%9
042055 09                  A  6898    	ADD	HL,BC
042056 77                  A  6899    	LD	(HL),A
042057 DD07FD              A  6900    	LD	BC,(IX+%FFFFFFFD)
04205A 03                  A  6901    	INC	BC
04205B DD0FFD              A  6902    	LD	(IX+%FFFFFFFD),BC
                           A  6903    ; 2672	#endif
                           A  6904    ; 2673		}
04205E                     A  6905    L_236:
                           A  6906    .LINE 2673
                           A  6907    
04205E 010B0000            A  6908    	LD	BC,11
042062 DD27F8              A  6909    	LD	HL,(IX+%FFFFFFF8)
042065 B7                  A  6910    	OR	A,A
042066 ED42                A  6911    	SBC	HL,BC
042068 DA E0 1F 04         A  6912    	JR	C,L_237
                           A  6913    ; 2674		fno->altname[di] = 0;	/* Terminat
                           A  6914    .LINE 2674
                           A  6915    
04206C DD3109              A  6916    	LD	IY,(IX+%9)
04206F ED0309              A  6917    	LEA	BC,IY+%9
042072 DD0FEC              A  6918    	LD	(IX+%FFFFFFEC),BC
042075 DD07FD              A  6919    	LD	BC,(IX+%FFFFFFFD)
042078 ED2309              A  6920    	LEA	HL,IY+%9
04207B 09                  A  6921    	ADD	HL,BC
04207C 3600                A  6922    	LD	(HL),%0
                           A  6923    ; 2675	
                           A  6924    ; 2676		if (fno->fname[0] == 0) {	/* If L
                           A  6925    .LINE 2676
                           A  6926    
04207E ED0316              A  6927    	LEA	BC,IY+%16
042081 DD0FF2              A  6928    	LD	(IX+%FFFFFFF2),BC
042084 FD7E16              A  6929    	LD	A,(IY+%16)
042087 B7                  A  6930    	OR	A,A
042088 C2 6A 21 04         A  6931    	JR	NZ,L_256
                           A  6932    ; 2677			if (di == 0) {	/* If LFN and S
                           A  6933    .LINE 2677
                           A  6934    
04208C DD27FD              A  6935    	LD	HL,(IX+%FFFFFFFD)
04208F CD 07 46 04         A  6936    	CALL	__icmpzero
042093 20 1D               A  6937    	JR	NZ,L_252
                           A  6938    ; 2678				fno->fname[di++] = '?';
                           A  6939    .LINE 2678
                           A  6940    
042095 DD3109              A  6941    	LD	IY,(IX+%9)
042098 ED0316              A  6942    	LEA	BC,IY+%16
04209B DD0FF2              A  6943    	LD	(IX+%FFFFFFF2),BC
04209E DD07FD              A  6944    	LD	BC,(IX+%FFFFFFFD)
0420A1 ED2316              A  6945    	LEA	HL,IY+%16
0420A4 09                  A  6946    	ADD	HL,BC
0420A5 363F                A  6947    	LD	(HL),%3F
0420A7 DD07FD              A  6948    	LD	BC,(IX+%FFFFFFFD)
0420AA 03                  A  6949    	INC	BC
0420AB DD0FFD              A  6950    	LD	(IX+%FFFFFFFD),BC
                           A  6951    ; 2679			} else {
                           A  6952    .LINE 2679
                           A  6953    
0420AE C3 50 21 04         A  6954    	JR	L_253
0420B2                     A  6955    L_252:
                           A  6956    ; 2680				for (si = di = 0, lcf = NS_
                           A  6957    .LINE 2680
                           A  6958    
0420B2 01000000            A  6959    	LD	BC,0
0420B6 DD0FFD              A  6960    	LD	(IX+%FFFFFFFD),BC
0420B9 DD0FF8              A  6961    	LD	(IX+%FFFFFFF8),BC
0420BC DD36F508            A  6962    	LD	(IX+%FFFFFFF5),%8
0420C0 18 75               A  6963    	JR	L_250
0420C2                     A  6964    L_248:
                           A  6965    ; 2681					wc = (WCHAR)fno->altnam
                           A  6966    .LINE 2681
                           A  6967    
0420C2 DD27E6              A  6968    	LD	HL,(IX+%FFFFFFE6)
0420C5 7E                  A  6969    	LD	A,(HL)
0420C6 47                  A  6970    	LD	B,A
0420C7 17ED62              A  6971    	SEXT	HL
0420CA DD70FB              A  6972    	LD	(IX+%FFFFFFFB),B
0420CD DD74FC              A  6973    	LD	(IX+%FFFFFFFC),H
                           A  6974    ; 2682					if (wc == '.') lcf = NS
                           A  6975    .LINE 2682
                           A  6976    
0420D0 49012E00            A  6977    	LD.LIS	BC,46
0420D4 DD27FB              A  6978    	LD	HL,(IX+%FFFFFFFB)
0420D7 B7                  A  6979    	OR	A,A
0420D8 40ED42              A  6980    	SBC.SIS	HL,BC
0420DB 20 04               A  6981    	JR	NZ,L_246
0420DD DD36F510            A  6982    	LD	(IX+%FFFFFFF5),%10
0420E1                     A  6983    L_246:
                           A  6984    ; 2683					if (IsUpper(wc) && (dp-
                           A  6985    .LINE 2683
                           A  6986    
0420E1 49014100            A  6987    	LD.LIS	BC,65
0420E5 DD27FB              A  6988    	LD	HL,(IX+%FFFFFFFB)
0420E8 B7                  A  6989    	OR	A,A
0420E9 40ED42              A  6990    	SBC.SIS	HL,BC
0420EC 38 27               A  6991    	JR	C,L_247
0420EE DD07FB              A  6992    	LD	BC,(IX+%FFFFFFFB)
0420F1 49215A00            A  6993    	LD.LIS	HL,90
0420F5 B7                  A  6994    	OR	A,A
0420F6 40ED42              A  6995    	SBC.SIS	HL,BC
0420F9 38 1A               A  6996    	JR	C,L_247
0420FB DD3106              A  6997    	LD	IY,(IX+%6)
0420FE FD371B              A  6998    	LD	IY,(IY+%1B)
042101 FD7E0C              A  6999    	LD	A,(IY+%C)
042104 DDA6F5              A  7000    	AND	A,(IX+%FFFFFFF5)
042107 28 0C               A  7001    	JR	Z,L_247
042109 DD31FB              A  7002    	LD	IY,(IX+%FFFFFFFB)
04210C ED2320              A  7003    	LEA	HL,IY+%20
04210F DD75FB              A  7004    	LD	(IX+%FFFFFFFB),L
042112 DD74FC              A  7005    	LD	(IX+%FFFFFFFC),H
042115                     A  7006    L_247:
                           A  7007    ; 2684					fno->fname[di] = (TCHAR
                           A  7008    .LINE 2684
                           A  7009    
042115 DD3109              A  7010    	LD	IY,(IX+%9)
042118 ED0316              A  7011    	LEA	BC,IY+%16
04211B DD0FF2              A  7012    	LD	(IX+%FFFFFFF2),BC
04211E DD7EFB              A  7013    	LD	A,(IX+%FFFFFFFB)
042121 DD07FD              A  7014    	LD	BC,(IX+%FFFFFFFD)
042124 ED2316              A  7015    	LEA	HL,IY+%16
042127 09                  A  7016    	ADD	HL,BC
042128 77                  A  7017    	LD	(HL),A
042129 DD07F8              A  7018    	LD	BC,(IX+%FFFFFFF8)
04212C 03                  A  7019    	INC	BC
04212D DD0FF8              A  7020    	LD	(IX+%FFFFFFF8),BC
042130 DD07FD              A  7021    	LD	BC,(IX+%FFFFFFFD)
042133 03                  A  7022    	INC	BC
042134 DD0FFD              A  7023    	LD	(IX+%FFFFFFFD),BC
                           A  7024    ; 2685				}
042137                     A  7025    L_250:
                           A  7026    .LINE 2685
                           A  7027    
042137 DD3109              A  7028    	LD	IY,(IX+%9)
04213A ED0309              A  7029    	LEA	BC,IY+%9
04213D DD0FEC              A  7030    	LD	(IX+%FFFFFFEC),BC
042140 DD07F8              A  7031    	LD	BC,(IX+%FFFFFFF8)
042143 ED2309              A  7032    	LEA	HL,IY+%9
042146 09                  A  7033    	ADD	HL,BC
042147 DD2FE6              A  7034    	LD	(IX+%FFFFFFE6),HL
04214A 7E                  A  7035    	LD	A,(HL)
04214B B7                  A  7036    	OR	A,A
04214C C2 C2 20 04         A  7037    	JR	NZ,L_248
                           A  7038    ; 2686			}
042150                     A  7039    L_253:
                           A  7040    .LINE 2686
                           A  7041    
                           A  7042    ; 2687			fno->fname[di] = 0;	/* Terminat
                           A  7043    .LINE 2687
                           A  7044    
042150 DD07FD              A  7045    	LD	BC,(IX+%FFFFFFFD)
042153 DD27F2              A  7046    	LD	HL,(IX+%FFFFFFF2)
042156 09                  A  7047    	ADD	HL,BC
042157 3600                A  7048    	LD	(HL),%0
                           A  7049    ; 2688			if (!dp->dir[DIR_NTres]) fno->a
                           A  7050    .LINE 2688
                           A  7051    
042159 DD3106              A  7052    	LD	IY,(IX+%6)
04215C FD371B              A  7053    	LD	IY,(IY+%1B)
04215F FD7E0C              A  7054    	LD	A,(IY+%C)
042162 B7                  A  7055    	OR	A,A
042163 20 05               A  7056    	JR	NZ,L_256
042165 DD27EC              A  7057    	LD	HL,(IX+%FFFFFFEC)
042168 3600                A  7058    	LD	(HL),%0
                           A  7059    ; 2689		}
04216A                     A  7060    L_256:
                           A  7061    .LINE 2689
                           A  7062    
                           A  7063    ; 2690	
                           A  7064    ; 2691	#else	/* Non-LFN configuration */
                           A  7065    ; 2692		si = di = 0;
                           A  7066    ; 2693		while (si < 11) {		/* Copy nam
                           A  7067    ; 2694			c = (TCHAR)dp->dir[si++];
                           A  7068    ; 2695			if (c == ' ') continue;		/* 
                           A  7069    ; 2696			if (c == RDDEM) c = DDEM;	/* 
                           A  7070    ; 2697			if (si == 9) fno->fname[di++] =
                           A  7071    ; 2698			fno->fname[di++] = c;
                           A  7072    ; 2699		}
                           A  7073    ; 2700		fno->fname[di] = 0;		/* Terminat
                           A  7074    ; 2701	#endif
                           A  7075    ; 2702	
                           A  7076    ; 2703		fno->fattrib = dp->dir[DIR_Attr] & 
                           A  7077    .LINE 2703
                           A  7078    
04216A DD3106              A  7079    	LD	IY,(IX+%6)
04216D FD371B              A  7080    	LD	IY,(IY+%1B)
042170 ED230B              A  7081    	LEA	HL,IY+%B
042173 7E                  A  7082    	LD	A,(HL)
042174 E63F                A  7083    	AND	A,%3F
042176 DD3109              A  7084    	LD	IY,(IX+%9)
042179 FD7708              A  7085    	LD	(IY+%8),A
                           A  7086    ; 2704		fno->fsize = ld_dword(dp->dir + DIR
                           A  7087    .LINE 2704
                           A  7088    
04217C DD3106              A  7089    	LD	IY,(IX+%6)
04217F FD371B              A  7090    	LD	IY,(IY+%1B)
042182 ED031C              A  7091    	LEA	BC,IY+%1C
042185 C5                  A  7092    	PUSH	BC
042186 CD B6 0E 04         A  7093    	CALL	_ld_dword
04218A C1                  A  7094    	POP	BC
04218B DD3109              A  7095    	LD	IY,(IX+%9)
04218E FD2F00              A  7096    	LD	(IY+%0),HL
042191 FD7303              A  7097    	LD	(IY+%3),E
                           A  7098    ; 2705		fno->ftime = ld_word(dp->dir + DIR_
                           A  7099    .LINE 2705
                           A  7100    
042194 DD3106              A  7101    	LD	IY,(IX+%6)
042197 FD371B              A  7102    	LD	IY,(IY+%1B)
04219A ED0316              A  7103    	LEA	BC,IY+%16
04219D C5                  A  7104    	PUSH	BC
04219E CD 7A 0E 04         A  7105    	CALL	_ld_word
0421A2 C1                  A  7106    	POP	BC
0421A3 DD3109              A  7107    	LD	IY,(IX+%9)
0421A6 E5C1                A  7108    	LD	BC,HL
0421A8 FD7106              A  7109    	LD	(IY+%6),C
0421AB FD7007              A  7110    	LD	(IY+%7),B
                           A  7111    ; 2706		fno->fdate = ld_word(dp->dir + DIR_
                           A  7112    .LINE 2706
                           A  7113    
0421AE DD3106              A  7114    	LD	IY,(IX+%6)
0421B1 FD371B              A  7115    	LD	IY,(IY+%1B)
0421B4 ED0318              A  7116    	LEA	BC,IY+%18
0421B7 C5                  A  7117    	PUSH	BC
0421B8 CD 7A 0E 04         A  7118    	CALL	_ld_word
0421BC C1                  A  7119    	POP	BC
0421BD DD3109              A  7120    	LD	IY,(IX+%9)
0421C0 E5C1                A  7121    	LD	BC,HL
0421C2 FD7104              A  7122    	LD	(IY+%4),C
0421C5 FD7005              A  7123    	LD	(IY+%5),B
                           A  7124    ; 2707	}
0421C8                     A  7125    L_257:
                           A  7126    .LINE 2707
                           A  7127    
0421C8 DDF9                A  7128    	LD	SP,IX
0421CA DDE1                A  7129    	POP	IX
0421CC C9                  A  7130    	RET	
                           A  7131    
                           A  7132    
                           A  7133    ;**************************** _get_fileinfo ***
                           A  7134    ;Name                         Addr/Register   S
                           A  7135    ;fs                                   IX-29    
                           A  7136    ;G_11                                 IX-26    
                           A  7137    ;nw                                   IX-23    
                           A  7138    ;G_15                                 IX-20    
                           A  7139    ;G_9                                  IX-17    
                           A  7140    ;G_14                                 IX-14    
                           A  7141    ;lcf                                  IX-11    
                           A  7142    ;hs                                   IX-10    
                           A  7143    ;si                                    IX-8    
                           A  7144    ;wc                                    IX-5    
                           A  7145    ;di                                    IX-3    
                           A  7146    ;fno                                   IX+9    
                           A  7147    ;dp                                    IX+6    
                           A  7148    
                           A  7149    
                           A  7150    ; Stack Frame Size: 45 (bytes)
                           A  7151    ;       Spill Code: 0 (instruction)
                           A  7152    
                           A  7153    
                           A  7154    .ENDFUNC "get_fileinfo",2707,"_get_fileinfo"
                           A  7155    ; 2708	
                           A  7156    ; 2709	#endif /* FF_FS_MINIMIZE <= 1 || FF_FS_
                           A  7157    ; 2710	
                           A  7158    ; 2711	
                           A  7159    ; 2712	
                           A  7160    ; 2713	#if FF_USE_FIND && FF_FS_MINIMIZE <= 1
                           A  7161    ; 2714	/*-------------------------------------
                           A  7162    ; 2715	/* Pattern matching                    
                           A  7163    ; 2716	/*-------------------------------------
                           A  7164    ; 2717	
                           A  7165    ; 2718	#define FIND_RECURS	4	/* Maximum numb
                           A  7166    ; 2719	
                           A  7167    ; 2720	
                           A  7168    ; 2721	static DWORD get_achar (	/* Get a ch
                           A  7169    ; 2722		const TCHAR** ptr		/* Pointer 
                           A  7170    ; 2723	)
                           A  7171    ; 2724	{
                           A  7172    ; 2725		DWORD chr;
                           A  7173    ; 2726	
                           A  7174    ; 2727	
                           A  7175    ; 2728	#if FF_USE_LFN && FF_LFN_UNICODE >= 1	
                           A  7176    ; 2729		chr = tchar2uni(ptr);
                           A  7177    ; 2730		if (chr == 0xFFFFFFFF) chr = 0;		
                           A  7178    ; 2731		chr = ff_wtoupper(chr);
                           A  7179    ; 2732	
                           A  7180    ; 2733	#else									
                           A  7181    ; 2734		chr = (BYTE)*(*ptr)++;				
                           A  7182    ; 2735		if (IsLower(chr)) chr -= 0x20;		
                           A  7183    ; 2736	#if FF_CODE_PAGE == 0
                           A  7184    ; 2737		if (ExCvt && chr >= 0x80) chr = ExC
                           A  7185    ; 2738	#elif FF_CODE_PAGE < 900
                           A  7186    ; 2739		if (chr >= 0x80) chr = ExCvt[chr - 
                           A  7187    ; 2740	#endif
                           A  7188    ; 2741	#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >
                           A  7189    ; 2742		if (dbc_1st((BYTE)chr)) {	/* Get 
                           A  7190    ; 2743			chr = dbc_2nd((BYTE)**ptr) ? ch
                           A  7191    ; 2744		}
                           A  7192    ; 2745	#endif
                           A  7193    ; 2746	
                           A  7194    ; 2747	#endif
                           A  7195    ; 2748		return chr;
                           A  7196    ; 2749	}
                           A  7197    ; 2750	
                           A  7198    ; 2751	
                           A  7199    ; 2752	static int pattern_match (	/* 0:mismat
                           A  7200    ; 2753		const TCHAR* pat,	/* Matching pat
                           A  7201    ; 2754		const TCHAR* nam,	/* String to be
                           A  7202    ; 2755		UINT skip,			/* Number of pr
                           A  7203    ; 2756		UINT recur			/* Recursion co
                           A  7204    ; 2757	)
                           A  7205    ; 2758	{
                           A  7206    ; 2759		const TCHAR *pptr, *nptr;
                           A  7207    ; 2760		DWORD pchr, nchr;
                           A  7208    ; 2761		UINT sk;
                           A  7209    ; 2762	
                           A  7210    ; 2763	
                           A  7211    ; 2764		while ((skip & 0xFF) != 0) {		
                           A  7212    ; 2765			if (!get_achar(&nam)) return 0;
                           A  7213    ; 2766			skip--;
                           A  7214    ; 2767		}
                           A  7215    ; 2768		if (*pat == 0 && skip) return 1;	
                           A  7216    ; 2769	
                           A  7217    ; 2770		do {
                           A  7218    ; 2771			pptr = pat; nptr = nam;			
                           A  7219    ; 2772			for (;;) {
                           A  7220    ; 2773				if (*pptr == '?' || *pptr =
                           A  7221    ; 2774					if (recur == 0) return 
                           A  7222    ; 2775					sk = 0;
                           A  7223    ; 2776					do {	/* Analyze the 
                           A  7224    ; 2777						if (*pptr++ == '?')
                           A  7225    ; 2778					} while (*pptr == '?' |
                           A  7226    ; 2779					if (pattern_match(pptr,
                           A  7227    ; 2780					nchr = *nptr; break;	
                           A  7228    ; 2781				}
                           A  7229    ; 2782				pchr = get_achar(&pptr);	
                           A  7230    ; 2783				nchr = get_achar(&nptr);	
                           A  7231    ; 2784				if (pchr != nchr) break;	
                           A  7232    ; 2785				if (pchr == 0) return 1;	
                           A  7233    ; 2786			}
                           A  7234    ; 2787			get_achar(&nam);			/* 
                           A  7235    ; 2788		} while (skip && nchr);		/* Retr
                           A  7236    ; 2789	
                           A  7237    ; 2790		return 0;
                           A  7238    ; 2791	}
                           A  7239    ; 2792	
                           A  7240    ; 2793	#endif /* FF_USE_FIND && FF_FS_MINIMIZE
                           A  7241    ; 2794	
                           A  7242    ; 2795	
                           A  7243    ; 2796	
                           A  7244    ; 2797	/*-------------------------------------
                           A  7245    ; 2798	/* Pick a top segment and create the ob
                           A  7246    ; 2799	/*-------------------------------------
                           A  7247    ; 2800	
                           A  7248    ; 2801	static FRESULT create_name (	/* FR_O
                           A  7249    ; 2802		DIR* dp,					/* Poin
                           A  7250    ; 2803		const TCHAR** path			/* Poin
                           A  7251    ; 2804	)
                           A  7252    ; 2805	{
0421CD                     A  7253    _create_name:
                           A  7254    .DEFINE "_create_name"
                           A  7255    
                           A  7256    .VALUE _create_name
                           A  7257    
                           A  7258    .CLASS 3
                           A  7259    
                           A  7260    .TYPE 68
                           A  7261    
                           A  7262    .ENDEF
                           A  7263    
                           A  7264    .BEGFUNC "create_name",2805,"_create_name"
                           A  7265    
                           A  7266    .LINE 2805
                           A  7267    
                           A  7268    .DEFINE "dp"
                           A  7269    
                           A  7270    .CLASS 65
                           A  7271    
                           A  7272    .VALUE 6
                           A  7273    
                           A  7274    .TAG "NONAME3"
                           A  7275    
                           A  7276    .TYPE 40
                           A  7277    
                           A  7278    .ENDEF
                           A  7279    
                           A  7280    .DEFINE "path"
                           A  7281    
                           A  7282    .CLASS 65
                           A  7283    
                           A  7284    .VALUE 9
                           A  7285    
                           A  7286    .TYPE 1570
                           A  7287    
                           A  7288    .ENDEF
                           A  7289    
                           A  7290    .DEFINE "di"
                           A  7291    
                           A  7292    .CLASS 65
                           A  7293    
                           A  7294    .VALUE -3
                           A  7295    
                           A  7296    .TYPE 14
                           A  7297    
                           A  7298    .ENDEF
                           A  7299    
                           A  7300    .DEFINE "cf"
                           A  7301    
                           A  7302    .CLASS 65
                           A  7303    
                           A  7304    .VALUE -4
                           A  7305    
                           A  7306    .TYPE 12
                           A  7307    
                           A  7308    .ENDEF
                           A  7309    
                           A  7310    .DEFINE "wc"
                           A  7311    
                           A  7312    .CLASS 65
                           A  7313    
                           A  7314    .VALUE -6
                           A  7315    
                           A  7316    .TYPE 13
                           A  7317    
                           A  7318    .ENDEF
                           A  7319    
                           A  7320    .DEFINE "i"
                           A  7321    
                           A  7322    .CLASS 65
                           A  7323    
                           A  7324    .VALUE -9
                           A  7325    
                           A  7326    .TYPE 14
                           A  7327    
                           A  7328    .ENDEF
                           A  7329    
                           A  7330    .DEFINE "b"
                           A  7331    
                           A  7332    .CLASS 65
                           A  7333    
                           A  7334    .VALUE -10
                           A  7335    
                           A  7336    .TYPE 12
                           A  7337    
                           A  7338    .ENDEF
                           A  7339    
                           A  7340    .DEFINE "si"
                           A  7341    
                           A  7342    .CLASS 65
                           A  7343    
                           A  7344    .VALUE -13
                           A  7345    
                           A  7346    .TYPE 14
                           A  7347    
                           A  7348    .ENDEF
                           A  7349    
                           A  7350    .DEFINE "lfn"
                           A  7351    
                           A  7352    .CLASS 65
                           A  7353    
                           A  7354    .VALUE -16
                           A  7355    
                           A  7356    .TYPE 45
                           A  7357    
                           A  7358    .ENDEF
                           A  7359    
                           A  7360    .DEFINE "uc"
                           A  7361    
                           A  7362    .CLASS 65
                           A  7363    
                           A  7364    .VALUE -20
                           A  7365    
                           A  7366    .TYPE 15
                           A  7367    
                           A  7368    .ENDEF
                           A  7369    
                           A  7370    .DEFINE "p"
                           A  7371    
                           A  7372    .CLASS 65
                           A  7373    
                           A  7374    .VALUE -23
                           A  7375    
                           A  7376    .TYPE 194
                           A  7377    
                           A  7378    .ENDEF
                           A  7379    
                           A  7380    .DEFINE "ni"
                           A  7381    
                           A  7382    .CLASS 65
                           A  7383    
                           A  7384    .VALUE -26
                           A  7385    
                           A  7386    .TYPE 14
                           A  7387    
                           A  7388    .ENDEF
                           A  7389    
0421CD DDE5                A  7390    	PUSH	IX
0421CF DD210000 00         A  7391    	LD	IX,0
0421D4 DD39                A  7392    	ADD	IX,SP
0421D6 ED22D4              A  7393    	LEA	HL,IX+%FFFFFFD4
0421D9 F9                  A  7394    	LD	SP,HL
                           A  7395    ; 2806	#if FF_USE_LFN		/* LFN configuratio
                           A  7396    ; 2807		BYTE b, cf;
                           A  7397    ; 2808		WCHAR wc, *lfn;
                           A  7398    ; 2809		DWORD uc;
                           A  7399    ; 2810		UINT i, ni, si, di;
                           A  7400    ; 2811		const TCHAR *p;
                           A  7401    ; 2812	
                           A  7402    ; 2813	
                           A  7403    ; 2814		/* Create LFN into LFN working buff
                           A  7404    ; 2815		p = *path; lfn = dp->obj.fs->lfnbuf
                           A  7405    .LINE 2815
                           A  7406    
0421DA DD2709              A  7407    	LD	HL,(IX+%9)
0421DD ED07                A  7408    	LD	BC,(HL)
0421DF DD0FE9              A  7409    	LD	(IX+%FFFFFFE9),BC
0421E2 DD3106              A  7410    	LD	IY,(IX+%6)
0421E5 FD3700              A  7411    	LD	IY,(IY+%0)
0421E8 FD070B              A  7412    	LD	BC,(IY+%B)
0421EB DD0FF0              A  7413    	LD	(IX+%FFFFFFF0),BC
0421EE 01000000            A  7414    	LD	BC,0
0421F2 DD0FFD              A  7415    	LD	(IX+%FFFFFFFD),BC
                           A  7416    ; 2816		for (;;) {
0421F5                     A  7417    L_273:
                           A  7418    .LINE 2816
                           A  7419    
                           A  7420    ; 2817			uc = tchar2uni(&p);			/* 
                           A  7421    .LINE 2817
                           A  7422    
0421F5 ED65E9              A  7423    	PEA	IX+%FFFFFFE9
0421F8 CD 7E 0F 04         A  7424    	CALL	_tchar2uni
0421FC C1                  A  7425    	POP	BC
0421FD DD2FEC              A  7426    	LD	(IX+%FFFFFFEC),HL
042200 DD73EF              A  7427    	LD	(IX+%FFFFFFEF),E
                           A  7428    ; 2818			if (uc == 0xFFFFFFFF) return FR
                           A  7429    .LINE 2818
                           A  7430    
042203 DD27EC              A  7431    	LD	HL,(IX+%FFFFFFEC)
042206 DD5EEF              A  7432    	LD	E,(IX+%FFFFFFEF)
042209 01FFFFFF            A  7433    	LD	BC,16777215
04220D 3EFF                A  7434    	LD	A,%FF
04220F CD AA 46 04         A  7435    	CALL	__lcmpu
042213 20 08               A  7436    	JR	NZ,L_261
042215 21060000            A  7437    	LD	HL,6
042219 C3 A5 27 04         A  7438    	JR	L_371
04221D                     A  7439    L_261:
                           A  7440    ; 2819			if (uc >= 0x10000) lfn[di++] = 
                           A  7441    .LINE 2819
                           A  7442    
04221D DD27EC              A  7443    	LD	HL,(IX+%FFFFFFEC)
042220 DD5EEF              A  7444    	LD	E,(IX+%FFFFFFEF)
042223 01000001            A  7445    	LD	BC,65536
042227 AF                  A  7446    	XOR	A,A
042228 CD AA 46 04         A  7447    	CALL	__lcmpu
04222C 38 1E               A  7448    	JR	C,L_262
04222E DD07EC              A  7449    	LD	BC,(IX+%FFFFFFEC)
042231 DD7EEF              A  7450    	LD	A,(IX+%FFFFFFEF)
042234 2E10                A  7451    	LD	L,%10
042236 CD A9 45 04         A  7452    	CALL	__lshru
04223A DD27FD              A  7453    	LD	HL,(IX+%FFFFFFFD)
04223D 29                  A  7454    	ADD	HL,HL
04223E DD17F0              A  7455    	LD	DE,(IX+%FFFFFFF0)
042241 19                  A  7456    	ADD	HL,DE
042242 71                  A  7457    	LD	(HL),C
042243 23                  A  7458    	INC	HL
042244 70                  A  7459    	LD	(HL),B
042245 DD07FD              A  7460    	LD	BC,(IX+%FFFFFFFD)
042248 03                  A  7461    	INC	BC
042249 DD0FFD              A  7462    	LD	(IX+%FFFFFFFD),BC
04224C                     A  7463    L_262:
                           A  7464    ; 2820			wc = (WCHAR)uc;
                           A  7465    ; 2821			if (wc < ' ' || IsSeparator(wc)
                           A  7466    .LINE 2821
                           A  7467    
04224C 49012000            A  7468    	LD.LIS	BC,32
042250 DD27EC              A  7469    	LD	HL,(IX+%FFFFFFEC)
042253 B7                  A  7470    	OR	A,A
042254 40ED42              A  7471    	SBC.SIS	HL,BC
042257 38 75               A  7472    	JR	C,L_283
042259 49012F00            A  7473    	LD.LIS	BC,47
04225D DD27EC              A  7474    	LD	HL,(IX+%FFFFFFEC)
042260 B7                  A  7475    	OR	A,A
042261 40ED42              A  7476    	SBC.SIS	HL,BC
042264 28 68               A  7477    	JR	Z,L_283
042266 49015C00            A  7478    	LD.LIS	BC,92
04226A DD27EC              A  7479    	LD	HL,(IX+%FFFFFFEC)
04226D B7                  A  7480    	OR	A,A
04226E 40ED42              A  7481    	SBC.SIS	HL,BC
042271 28 5B               A  7482    	JR	Z,L_283
                           A  7483    ; 2822			if (wc < 0x80 && strchr("*:<>|\
                           A  7484    .LINE 2822
                           A  7485    
042273 49018000            A  7486    	LD.LIS	BC,128
042277 DD27EC              A  7487    	LD	HL,(IX+%FFFFFFEC)
04227A B7                  A  7488    	OR	A,A
04227B 40ED42              A  7489    	SBC.SIS	HL,BC
04227E 30 21               A  7490    	JR	NC,L_270
042280 DD07EC              A  7491    	LD	BC,(IX+%FFFFFFEC)
042283 CD 95 44 04         A  7492    	CALL	__stoiu
042287 E5                  A  7493    	PUSH	HL
042288 01 6C 48 04         A  7494    	LD	BC,L__141
04228C C5                  A  7495    	PUSH	BC
04228D CD 13 46 04         A  7496    	CALL	_strchr
042291 C1                  A  7497    	POP	BC
042292 C1                  A  7498    	POP	BC
042293 CD 07 46 04         A  7499    	CALL	__icmpzero
042297 28 08               A  7500    	JR	Z,L_270
042299 21060000            A  7501    	LD	HL,6
04229D C3 A5 27 04         A  7502    	JR	L_371
0422A1                     A  7503    L_270:
                           A  7504    ; 2823			if (di >= FF_MAX_LFN) return FR
                           A  7505    .LINE 2823
                           A  7506    
0422A1 01FF0000            A  7507    	LD	BC,255
0422A5 DD27FD              A  7508    	LD	HL,(IX+%FFFFFFFD)
0422A8 B7                  A  7509    	OR	A,A
0422A9 ED42                A  7510    	SBC	HL,BC
0422AB 38 08               A  7511    	JR	C,L_272
0422AD 21060000            A  7512    	LD	HL,6
0422B1 C3 A5 27 04         A  7513    	JR	L_371
0422B5                     A  7514    L_272:
                           A  7515    ; 2824			lfn[di++] = wc;				/* 
                           A  7516    .LINE 2824
                           A  7517    
0422B5 DD27FD              A  7518    	LD	HL,(IX+%FFFFFFFD)
0422B8 29                  A  7519    	ADD	HL,HL
0422B9 DD07F0              A  7520    	LD	BC,(IX+%FFFFFFF0)
0422BC 09                  A  7521    	ADD	HL,BC
0422BD DD07EC              A  7522    	LD	BC,(IX+%FFFFFFEC)
0422C0 71                  A  7523    	LD	(HL),C
0422C1 23                  A  7524    	INC	HL
0422C2 70                  A  7525    	LD	(HL),B
0422C3 DD07FD              A  7526    	LD	BC,(IX+%FFFFFFFD)
0422C6 03                  A  7527    	INC	BC
0422C7 DD0FFD              A  7528    	LD	(IX+%FFFFFFFD),BC
                           A  7529    ; 2825		}
                           A  7530    .LINE 2825
                           A  7531    
0422CA C3 F5 21 04         A  7532    	JR	L_273
0422CE                     A  7533    L_283:
                           A  7534    ; 2826		if (wc < ' ') {				/* Stop
                           A  7535    .LINE 2826
                           A  7536    
0422CE 49012000            A  7537    	LD.LIS	BC,32
0422D2 DD27EC              A  7538    	LD	HL,(IX+%FFFFFFEC)
0422D5 B7                  A  7539    	OR	A,A
0422D6 40ED42              A  7540    	SBC.SIS	HL,BC
0422D9 30 13               A  7541    	JR	NC,L_277
                           A  7542    ; 2827			cf = NS_LAST;			/* Last
                           A  7543    .LINE 2827
                           A  7544    
0422DB DD36FC04            A  7545    	LD	(IX+%FFFFFFFC),%4
                           A  7546    ; 2828		} else {					/* Stop
                           A  7547    .LINE 2828
                           A  7548    
0422DF 18 4B               A  7549    	JR	L_284
                           A  7550    ; 2829			while (IsSeparator(*p)) p++;	
                           A  7551    .LINE 2829
                           A  7552    
0422E1                     A  7553    L_278:
0422E1 DD07E9              A  7554    	LD	BC,(IX+%FFFFFFE9)
0422E4 DD0FD4              A  7555    	LD	(IX+%FFFFFFD4),BC
0422E7 DD07E9              A  7556    	LD	BC,(IX+%FFFFFFE9)
0422EA 03                  A  7557    	INC	BC
0422EB DD0FE9              A  7558    	LD	(IX+%FFFFFFE9),BC
0422EE                     A  7559    L_277:
0422EE DD27E9              A  7560    	LD	HL,(IX+%FFFFFFE9)
0422F1 7E                  A  7561    	LD	A,(HL)
0422F2 47                  A  7562    	LD	B,A
0422F3 17ED62              A  7563    	SEXT	HL
0422F6 68                  A  7564    	LD	L,B
0422F7 012F0000            A  7565    	LD	BC,47
0422FB B7                  A  7566    	OR	A,A
0422FC ED42                A  7567    	SBC	HL,BC
0422FE 28 E1               A  7568    	JR	Z,L_278
042300 DD27E9              A  7569    	LD	HL,(IX+%FFFFFFE9)
042303 7E                  A  7570    	LD	A,(HL)
042304 47                  A  7571    	LD	B,A
042305 17ED62              A  7572    	SEXT	HL
042308 68                  A  7573    	LD	L,B
042309 015C0000            A  7574    	LD	BC,92
04230D B7                  A  7575    	OR	A,A
04230E ED42                A  7576    	SBC	HL,BC
042310 28 CF               A  7577    	JR	Z,L_278
                           A  7578    ; 2830			cf = 0;					/* Next
                           A  7579    .LINE 2830
                           A  7580    
042312 DD36FC00            A  7581    	LD	(IX+%FFFFFFFC),%0
                           A  7582    ; 2831			if (IsTerminator(*p)) cf = NS_L
                           A  7583    .LINE 2831
                           A  7584    
042316 DD27E9              A  7585    	LD	HL,(IX+%FFFFFFE9)
042319 7E                  A  7586    	LD	A,(HL)
04231A 47                  A  7587    	LD	B,A
04231B 17ED62              A  7588    	SEXT	HL
04231E 68                  A  7589    	LD	L,B
04231F 01200000            A  7590    	LD	BC,32
042323 B7                  A  7591    	OR	A,A
042324 ED42                A  7592    	SBC	HL,BC
042326 30 04               A  7593    	JR	NC,L_284
042328 DD36FC04            A  7594    	LD	(IX+%FFFFFFFC),%4
                           A  7595    ; 2832		}
04232C                     A  7596    L_284:
                           A  7597    .LINE 2832
                           A  7598    
                           A  7599    ; 2833		*path = p;					/* Retu
                           A  7600    .LINE 2833
                           A  7601    
04232C DD2709              A  7602    	LD	HL,(IX+%9)
04232F DD07E9              A  7603    	LD	BC,(IX+%FFFFFFE9)
042332 ED0F                A  7604    	LD	(HL),BC
                           A  7605    ; 2834	
                           A  7606    ; 2835	#if FF_FS_RPATH != 0
                           A  7607    ; 2836		if ((di == 1 && lfn[di - 1] == '.')
                           A  7608    .LINE 2836
                           A  7609    
042334 01010000            A  7610    	LD	BC,1
042338 DD27FD              A  7611    	LD	HL,(IX+%FFFFFFFD)
04233B B7                  A  7612    	OR	A,A
04233C ED42                A  7613    	SBC	HL,BC
04233E 20 1A               A  7614    	JR	NZ,L_288
042340 DD31FD              A  7615    	LD	IY,(IX+%FFFFFFFD)
042343 ED23FF              A  7616    	LEA	HL,IY+%FFFFFFFF
042346 29                  A  7617    	ADD	HL,HL
042347 DD07F0              A  7618    	LD	BC,(IX+%FFFFFFF0)
04234A 09                  A  7619    	ADD	HL,BC
04234B ED07                A  7620    	LD	BC,(HL)
04234D CD 95 44 04         A  7621    	CALL	__stoiu
042351 012E0000            A  7622    	LD	BC,46
042355 B7                  A  7623    	OR	A,A
042356 ED42                A  7624    	SBC	HL,BC
042358 28 46               A  7625    	JR	Z,L_298
04235A                     A  7626    L_288:
                           A  7627    ; 2837			(di == 2 && lfn[di - 1] == '.' 
                           A  7628    .LINE 2837
                           A  7629    
04235A 01020000            A  7630    	LD	BC,2
04235E DD27FD              A  7631    	LD	HL,(IX+%FFFFFFFD)
042361 B7                  A  7632    	OR	A,A
042362 ED42                A  7633    	SBC	HL,BC
042364 C2 42 24 04         A  7634    	JR	NZ,L_303
042368 DD31FD              A  7635    	LD	IY,(IX+%FFFFFFFD)
04236B ED23FF              A  7636    	LEA	HL,IY+%FFFFFFFF
04236E 29                  A  7637    	ADD	HL,HL
04236F DD07F0              A  7638    	LD	BC,(IX+%FFFFFFF0)
042372 09                  A  7639    	ADD	HL,BC
042373 ED07                A  7640    	LD	BC,(HL)
042375 CD 95 44 04         A  7641    	CALL	__stoiu
042379 012E0000            A  7642    	LD	BC,46
04237D B7                  A  7643    	OR	A,A
04237E ED42                A  7644    	SBC	HL,BC
042380 C2 42 24 04         A  7645    	JR	NZ,L_303
042384 DD31FD              A  7646    	LD	IY,(IX+%FFFFFFFD)
042387 ED23FE              A  7647    	LEA	HL,IY+%FFFFFFFE
04238A 29                  A  7648    	ADD	HL,HL
04238B DD07F0              A  7649    	LD	BC,(IX+%FFFFFFF0)
04238E 09                  A  7650    	ADD	HL,BC
04238F ED07                A  7651    	LD	BC,(HL)
042391 CD 95 44 04         A  7652    	CALL	__stoiu
042395 012E0000            A  7653    	LD	BC,46
042399 B7                  A  7654    	OR	A,A
04239A ED42                A  7655    	SBC	HL,BC
04239C C2 42 24 04         A  7656    	JR	NZ,L_303
0423A0                     A  7657    L_298:
                           A  7658    ; 2838			lfn[di] = 0;
                           A  7659    .LINE 2838
                           A  7660    
0423A0 DD27FD              A  7661    	LD	HL,(IX+%FFFFFFFD)
0423A3 29                  A  7662    	ADD	HL,HL
0423A4 DD07F0              A  7663    	LD	BC,(IX+%FFFFFFF0)
0423A7 09                  A  7664    	ADD	HL,BC
0423A8 3600                A  7665    	LD	(HL),%0
0423AA 23                  A  7666    	INC	HL
0423AB 3600                A  7667    	LD	(HL),%0
                           A  7668    ; 2839			for (i = 0; i < 11; i++) {	/* 
                           A  7669    .LINE 2839
                           A  7670    
0423AD 01000000            A  7671    	LD	BC,0
0423B1 DD0FF7              A  7672    	LD	(IX+%FFFFFFF7),BC
0423B4 18 30               A  7673    	JR	L_296
0423B6                     A  7674    L_294:
                           A  7675    ; 2840				dp->fn[i] = (i < di) ? '.' 
                           A  7676    .LINE 2840
                           A  7677    
0423B6 DD07FD              A  7678    	LD	BC,(IX+%FFFFFFFD)
0423B9 DD27F7              A  7679    	LD	HL,(IX+%FFFFFFF7)
0423BC B7                  A  7680    	OR	A,A
0423BD ED42                A  7681    	SBC	HL,BC
0423BF 30 09               A  7682    	JR	NC,L_292
0423C1 012E0000            A  7683    	LD	BC,46
0423C5 DD0FE3              A  7684    	LD	(IX+%FFFFFFE3),BC
0423C8 18 07               A  7685    	JR	L_293
0423CA                     A  7686    L_292:
0423CA 01200000            A  7687    	LD	BC,32
0423CE DD0FE3              A  7688    	LD	(IX+%FFFFFFE3),BC
0423D1                     A  7689    L_293:
0423D1 DD7EE3              A  7690    	LD	A,(IX+%FFFFFFE3)
0423D4 DD07F7              A  7691    	LD	BC,(IX+%FFFFFFF7)
0423D7 DD3106              A  7692    	LD	IY,(IX+%6)
0423DA ED231E              A  7693    	LEA	HL,IY+%1E
0423DD 09                  A  7694    	ADD	HL,BC
0423DE 77                  A  7695    	LD	(HL),A
0423DF DD07F7              A  7696    	LD	BC,(IX+%FFFFFFF7)
0423E2 03                  A  7697    	INC	BC
0423E3 DD0FF7              A  7698    	LD	(IX+%FFFFFFF7),BC
                           A  7699    ; 2841			}
0423E6                     A  7700    L_296:
                           A  7701    .LINE 2841
                           A  7702    
0423E6 010B0000            A  7703    	LD	BC,11
0423EA DD27F7              A  7704    	LD	HL,(IX+%FFFFFFF7)
0423ED B7                  A  7705    	OR	A,A
0423EE ED42                A  7706    	SBC	HL,BC
0423F0 38 C4               A  7707    	JR	C,L_294
                           A  7708    ; 2842			dp->fn[i] = cf | NS_DOT;	/* 
                           A  7709    .LINE 2842
                           A  7710    
0423F2 DD7EFC              A  7711    	LD	A,(IX+%FFFFFFFC)
0423F5 CBEF                A  7712    	SET	%5,A
0423F7 DD07F7              A  7713    	LD	BC,(IX+%FFFFFFF7)
0423FA DD3106              A  7714    	LD	IY,(IX+%6)
0423FD ED231E              A  7715    	LEA	HL,IY+%1E
042400 09                  A  7716    	ADD	HL,BC
042401 77                  A  7717    	LD	(HL),A
                           A  7718    ; 2843			return FR_OK;
                           A  7719    .LINE 2843
                           A  7720    
042402 B7                  A  7721    	OR	A,A
042403 ED62                A  7722    	SBC	HL,HL
042405 C3 A5 27 04         A  7723    	JR	L_371
                           A  7724    ; 2844		}
                           A  7725    .LINE 2844
                           A  7726    
                           A  7727    ; 2845	#endif
                           A  7728    ; 2846		while (di) {					/* 
                           A  7729    .LINE 2846
                           A  7730    
042409                     A  7731    L_304:
                           A  7732    ; 2847			wc = lfn[di - 1];
                           A  7733    .LINE 2847
                           A  7734    
042409 DD31FD              A  7735    	LD	IY,(IX+%FFFFFFFD)
04240C ED33FF              A  7736    	LEA	IY,IY+%FFFFFFFF
04240F DD3EE0              A  7737    	LD	(IX+%FFFFFFE0),IY
042412 DD27E0              A  7738    	LD	HL,(IX+%FFFFFFE0)
042415 29                  A  7739    	ADD	HL,HL
042416 DD07F0              A  7740    	LD	BC,(IX+%FFFFFFF0)
042419 09                  A  7741    	ADD	HL,BC
04241A ED07                A  7742    	LD	BC,(HL)
04241C DD71FA              A  7743    	LD	(IX+%FFFFFFFA),C
04241F DD70FB              A  7744    	LD	(IX+%FFFFFFFB),B
                           A  7745    ; 2848			if (wc != ' ' && wc != '.') bre
                           A  7746    .LINE 2848
                           A  7747    
042422 49012000            A  7748    	LD.LIS	BC,32
042426 DD27FA              A  7749    	LD	HL,(IX+%FFFFFFFA)
042429 B7                  A  7750    	OR	A,A
04242A 40ED42              A  7751    	SBC.SIS	HL,BC
04242D 28 0D               A  7752    	JR	Z,L_302
04242F 49012E00            A  7753    	LD.LIS	BC,46
042433 DD27FA              A  7754    	LD	HL,(IX+%FFFFFFFA)
042436 B7                  A  7755    	OR	A,A
042437 40ED42              A  7756    	SBC.SIS	HL,BC
04243A 20 0F               A  7757    	JR	NZ,L_306
04243C                     A  7758    L_302:
                           A  7759    ; 2849			di--;
                           A  7760    .LINE 2849
                           A  7761    
04243C DD07E0              A  7762    	LD	BC,(IX+%FFFFFFE0)
04243F DD0FFD              A  7763    	LD	(IX+%FFFFFFFD),BC
                           A  7764    ; 2850		}
042442                     A  7765    L_303:
                           A  7766    .LINE 2850
                           A  7767    
042442 DD27FD              A  7768    	LD	HL,(IX+%FFFFFFFD)
042445 CD 07 46 04         A  7769    	CALL	__icmpzero
042449 20 BE               A  7770    	JR	NZ,L_304
04244B                     A  7771    L_306:
                           A  7772    ; 2851		lfn[di] = 0;						
                           A  7773    .LINE 2851
                           A  7774    
04244B DD27FD              A  7775    	LD	HL,(IX+%FFFFFFFD)
04244E 29                  A  7776    	ADD	HL,HL
04244F DD07F0              A  7777    	LD	BC,(IX+%FFFFFFF0)
042452 09                  A  7778    	ADD	HL,BC
042453 3600                A  7779    	LD	(HL),%0
042455 23                  A  7780    	INC	HL
042456 3600                A  7781    	LD	(HL),%0
                           A  7782    ; 2852		if (di == 0) return FR_INVALID_NAME
                           A  7783    .LINE 2852
                           A  7784    
042458 DD27FD              A  7785    	LD	HL,(IX+%FFFFFFFD)
04245B CD 07 46 04         A  7786    	CALL	__icmpzero
04245F 20 08               A  7787    	JR	NZ,L_312
042461 21060000            A  7788    	LD	HL,6
042465 C3 A5 27 04         A  7789    	JR	L_371
042469                     A  7790    L_312:
                           A  7791    ; 2853	
                           A  7792    ; 2854		/* Create SFN in directory form */
                           A  7793    ; 2855		for (si = 0; lfn[si] == ' '; si++) 
                           A  7794    .LINE 2855
                           A  7795    
042469 01000000            A  7796    	LD	BC,0
04246D DD0FF3              A  7797    	LD	(IX+%FFFFFFF3),BC
042470 18 07               A  7798    	JR	L_311
042472                     A  7799    L_309:
042472 DD07F3              A  7800    	LD	BC,(IX+%FFFFFFF3)
042475 03                  A  7801    	INC	BC
042476 DD0FF3              A  7802    	LD	(IX+%FFFFFFF3),BC
042479                     A  7803    L_311:
042479 DD27F3              A  7804    	LD	HL,(IX+%FFFFFFF3)
04247C 29                  A  7805    	ADD	HL,HL
04247D DD07F0              A  7806    	LD	BC,(IX+%FFFFFFF0)
042480 09                  A  7807    	ADD	HL,BC
042481 DD2FDD              A  7808    	LD	(IX+%FFFFFFDD),HL
042484 ED07                A  7809    	LD	BC,(HL)
042486 CD 95 44 04         A  7810    	CALL	__stoiu
04248A 01200000            A  7811    	LD	BC,32
04248E B7                  A  7812    	OR	A,A
04248F ED42                A  7813    	SBC	HL,BC
042491 28 DF               A  7814    	JR	Z,L_309
                           A  7815    ; 2856		if (si > 0 || lfn[si] == '.') cf |=
                           A  7816    .LINE 2856
                           A  7817    
042493 DD07F3              A  7818    	LD	BC,(IX+%FFFFFFF3)
042496 B7                  A  7819    	OR	A,A
042497 ED62                A  7820    	SBC	HL,HL
042499 B7                  A  7821    	OR	A,A
04249A ED42                A  7822    	SBC	HL,BC
04249C 38 12               A  7823    	JR	C,L_314
04249E DD27DD              A  7824    	LD	HL,(IX+%FFFFFFDD)
0424A1 ED07                A  7825    	LD	BC,(HL)
0424A3 CD 95 44 04         A  7826    	CALL	__stoiu
0424A7 012E0000            A  7827    	LD	BC,46
0424AB B7                  A  7828    	OR	A,A
0424AC ED42                A  7829    	SBC	HL,BC
0424AE 20 10               A  7830    	JR	NZ,L_318
0424B0                     A  7831    L_314:
0424B0 DD7EFC              A  7832    	LD	A,(IX+%FFFFFFFC)
0424B3 F603                A  7833    	OR	A,%3
0424B5 DD77FC              A  7834    	LD	(IX+%FFFFFFFC),A
                           A  7835    ; 2857		while (di > 0 && lfn[di - 1] != '.'
                           A  7836    .LINE 2857
                           A  7837    
0424B8 18 06               A  7838    	JR	L_318
0424BA                     A  7839    L_319:
0424BA DD07DA              A  7840    	LD	BC,(IX+%FFFFFFDA)
0424BD DD0FFD              A  7841    	LD	(IX+%FFFFFFFD),BC
0424C0                     A  7842    L_318:
0424C0 DD07FD              A  7843    	LD	BC,(IX+%FFFFFFFD)
0424C3 B7                  A  7844    	OR	A,A
0424C4 ED62                A  7845    	SBC	HL,HL
0424C6 B7                  A  7846    	OR	A,A
0424C7 ED42                A  7847    	SBC	HL,BC
0424C9 30 20               A  7848    	JR	NC,L_321
0424CB DD31FD              A  7849    	LD	IY,(IX+%FFFFFFFD)
0424CE ED33FF              A  7850    	LEA	IY,IY+%FFFFFFFF
0424D1 DD3EDA              A  7851    	LD	(IX+%FFFFFFDA),IY
0424D4 DD27DA              A  7852    	LD	HL,(IX+%FFFFFFDA)
0424D7 29                  A  7853    	ADD	HL,HL
0424D8 DD07F0              A  7854    	LD	BC,(IX+%FFFFFFF0)
0424DB 09                  A  7855    	ADD	HL,BC
0424DC ED07                A  7856    	LD	BC,(HL)
0424DE CD 95 44 04         A  7857    	CALL	__stoiu
0424E2 012E0000            A  7858    	LD	BC,46
0424E6 B7                  A  7859    	OR	A,A
0424E7 ED42                A  7860    	SBC	HL,BC
0424E9 20 CF               A  7861    	JR	NZ,L_319
0424EB                     A  7862    L_321:
                           A  7863    ; 2858	
                           A  7864    ; 2859		memset(dp->fn, ' ', 11);
                           A  7865    .LINE 2859
                           A  7866    
0424EB 010B0000            A  7867    	LD	BC,11
0424EF C5                  A  7868    	PUSH	BC
0424F0 01200000            A  7869    	LD	BC,32
0424F4 C5                  A  7870    	PUSH	BC
0424F5 DD3106              A  7871    	LD	IY,(IX+%6)
0424F8 ED661E              A  7872    	PEA	IY+%1E
0424FB CD 31 47 04         A  7873    	CALL	_memset
0424FF C1                  A  7874    	POP	BC
042500 C1                  A  7875    	POP	BC
042501 C1                  A  7876    	POP	BC
                           A  7877    ; 2860		i = b = 0; ni = 8;
                           A  7878    .LINE 2860
                           A  7879    
042502 DD36F600            A  7880    	LD	(IX+%FFFFFFF6),%0
042506 01000000            A  7881    	LD	BC,0
04250A DD0FF7              A  7882    	LD	(IX+%FFFFFFF7),BC
04250D 01080000            A  7883    	LD	BC,8
042511 DD0FE6              A  7884    	LD	(IX+%FFFFFFE6),BC
                           A  7885    ; 2861		for (;;) {
042514                     A  7886    L_356:
                           A  7887    .LINE 2861
                           A  7888    
                           A  7889    ; 2862			wc = lfn[si++];					
                           A  7890    .LINE 2862
                           A  7891    
042514 DD27F3              A  7892    	LD	HL,(IX+%FFFFFFF3)
042517 29                  A  7893    	ADD	HL,HL
042518 DD07F0              A  7894    	LD	BC,(IX+%FFFFFFF0)
04251B 09                  A  7895    	ADD	HL,BC
04251C ED07                A  7896    	LD	BC,(HL)
04251E DD71FA              A  7897    	LD	(IX+%FFFFFFFA),C
042521 DD70FB              A  7898    	LD	(IX+%FFFFFFFB),B
042524 DD07F3              A  7899    	LD	BC,(IX+%FFFFFFF3)
042527 03                  A  7900    	INC	BC
042528 DD0FF3              A  7901    	LD	(IX+%FFFFFFF3),BC
                           A  7902    ; 2863			if (wc == 0) break;				
                           A  7903    .LINE 2863
                           A  7904    
04252B DD27FA              A  7905    	LD	HL,(IX+%FFFFFFFA)
04252E CD FA 46 04         A  7906    	CALL	__scmpzero
042532 CA 1F 27 04         A  7907    	JR	Z,L_359
                           A  7908    ; 2864			if (wc == ' ' || (wc == '.' && 
                           A  7909    .LINE 2864
                           A  7910    
042536 49012000            A  7911    	LD.LIS	BC,32
04253A DD27FA              A  7912    	LD	HL,(IX+%FFFFFFFA)
04253D B7                  A  7913    	OR	A,A
04253E 40ED42              A  7914    	SBC.SIS	HL,BC
042541 28 18               A  7915    	JR	Z,L_326
042543 49012E00            A  7916    	LD.LIS	BC,46
042547 DD27FA              A  7917    	LD	HL,(IX+%FFFFFFFA)
04254A B7                  A  7918    	OR	A,A
04254B 40ED42              A  7919    	SBC.SIS	HL,BC
04254E 20 15               A  7920    	JR	NZ,L_336
042550 DD07FD              A  7921    	LD	BC,(IX+%FFFFFFFD)
042553 DD27F3              A  7922    	LD	HL,(IX+%FFFFFFF3)
042556 B7                  A  7923    	OR	A,A
042557 ED42                A  7924    	SBC	HL,BC
042559 28 0A               A  7925    	JR	Z,L_336
04255B                     A  7926    L_326:
                           A  7927    ; 2865				cf |= NS_LOSS | NS_LFN;
                           A  7928    .LINE 2865
                           A  7929    
04255B DD7EFC              A  7930    	LD	A,(IX+%FFFFFFFC)
04255E F603                A  7931    	OR	A,%3
042560 DD77FC              A  7932    	LD	(IX+%FFFFFFFC),A
                           A  7933    ; 2866				continue;
                           A  7934    .LINE 2866
                           A  7935    
042563 18 AF               A  7936    	JR	L_356
                           A  7937    ; 2867			}
042565                     A  7938    L_336:
                           A  7939    .LINE 2867
                           A  7940    
                           A  7941    ; 2868	
                           A  7942    ; 2869			if (i >= ni || si == di) {		
                           A  7943    .LINE 2869
                           A  7944    
042565 DD07E6              A  7945    	LD	BC,(IX+%FFFFFFE6)
042568 DD27F7              A  7946    	LD	HL,(IX+%FFFFFFF7)
04256B B7                  A  7947    	OR	A,A
04256C ED42                A  7948    	SBC	HL,BC
04256E 30 0B               A  7949    	JR	NC,L_335
042570 DD07FD              A  7950    	LD	BC,(IX+%FFFFFFFD)
042573 DD27F3              A  7951    	LD	HL,(IX+%FFFFFFF3)
042576 B7                  A  7952    	OR	A,A
042577 ED42                A  7953    	SBC	HL,BC
042579 20 58               A  7954    	JR	NZ,L_339
04257B                     A  7955    L_335:
                           A  7956    ; 2870				if (ni == 11) {				
                           A  7957    .LINE 2870
                           A  7958    
04257B 010B0000            A  7959    	LD	BC,11
04257F DD27E6              A  7960    	LD	HL,(IX+%FFFFFFE6)
042582 B7                  A  7961    	OR	A,A
042583 ED42                A  7962    	SBC	HL,BC
042585 20 0C               A  7963    	JR	NZ,L_331
                           A  7964    ; 2871					cf |= NS_LOSS | NS_LFN;
                           A  7965    .LINE 2871
                           A  7966    
042587 DD7EFC              A  7967    	LD	A,(IX+%FFFFFFFC)
04258A F603                A  7968    	OR	A,%3
04258C DD77FC              A  7969    	LD	(IX+%FFFFFFFC),A
                           A  7970    ; 2872					break;
                           A  7971    .LINE 2872
                           A  7972    
04258F C3 1F 27 04         A  7973    	JR	L_359
                           A  7974    ; 2873				}
042593                     A  7975    L_331:
                           A  7976    .LINE 2873
                           A  7977    
                           A  7978    ; 2874				if (si != di) cf |= NS_LOSS
                           A  7979    .LINE 2874
                           A  7980    
042593 DD07FD              A  7981    	LD	BC,(IX+%FFFFFFFD)
042596 DD27F3              A  7982    	LD	HL,(IX+%FFFFFFF3)
042599 B7                  A  7983    	OR	A,A
04259A ED42                A  7984    	SBC	HL,BC
04259C 28 08               A  7985    	JR	Z,L_333
04259E DD7EFC              A  7986    	LD	A,(IX+%FFFFFFFC)
0425A1 F603                A  7987    	OR	A,%3
0425A3 DD77FC              A  7988    	LD	(IX+%FFFFFFFC),A
0425A6                     A  7989    L_333:
                           A  7990    ; 2875				if (si > di) break;			
                           A  7991    .LINE 2875
                           A  7992    
0425A6 DD07F3              A  7993    	LD	BC,(IX+%FFFFFFF3)
0425A9 DD27FD              A  7994    	LD	HL,(IX+%FFFFFFFD)
0425AC B7                  A  7995    	OR	A,A
0425AD ED42                A  7996    	SBC	HL,BC
0425AF DA 1F 27 04         A  7997    	JR	C,L_359
                           A  7998    ; 2876				si = di; i = 8; ni = 11; b 
                           A  7999    .LINE 2876
                           A  8000    
0425B3 DD07FD              A  8001    	LD	BC,(IX+%FFFFFFFD)
0425B6 DD0FF3              A  8002    	LD	(IX+%FFFFFFF3),BC
0425B9 01080000            A  8003    	LD	BC,8
0425BD DD0FF7              A  8004    	LD	(IX+%FFFFFFF7),BC
0425C0 010B0000            A  8005    	LD	BC,11
0425C4 DD0FE6              A  8006    	LD	(IX+%FFFFFFE6),BC
0425C7 DD7EF6              A  8007    	LD	A,(IX+%FFFFFFF6)
0425CA 87                  A  8008    	ADD	A,A
0425CB 87                  A  8009    	ADD	A,A
0425CC DD77F6              A  8010    	LD	(IX+%FFFFFFF6),A
                           A  8011    ; 2877				continue;
                           A  8012    .LINE 2877
                           A  8013    
0425CF C3 14 25 04         A  8014    	JR	L_356
                           A  8015    ; 2878			}
0425D3                     A  8016    L_339:
                           A  8017    .LINE 2878
                           A  8018    
                           A  8019    ; 2879	
                           A  8020    ; 2880			if (wc >= 0x80) {	/* Is this 
                           A  8021    .LINE 2880
                           A  8022    
0425D3 49018000            A  8023    	LD.LIS	BC,128
0425D7 DD27FA              A  8024    	LD	HL,(IX+%FFFFFFFA)
0425DA B7                  A  8025    	OR	A,A
0425DB 40ED42              A  8026    	SBC.SIS	HL,BC
0425DE 38 51               A  8027    	JR	C,L_353
                           A  8028    ; 2881				cf |= NS_LFN;	/* LFN entr
                           A  8029    .LINE 2881
                           A  8030    
0425E0 DD7EFC              A  8031    	LD	A,(IX+%FFFFFFFC)
0425E3 CBCF                A  8032    	SET	%1,A
0425E5 DD77FC              A  8033    	LD	(IX+%FFFFFFFC),A
                           A  8034    ; 2882	#if FF_CODE_PAGE == 0
                           A  8035    ; 2883				if (ExCvt) {	/* In SBCS 
                           A  8036    ; 2884					wc = ff_uni2oem(wc, COD
                           A  8037    ; 2885					if (wc & 0x80) wc = ExC
                           A  8038    ; 2886				} else {		/* In DBCS 
                           A  8039    ; 2887					wc = ff_uni2oem(ff_wtou
                           A  8040    ; 2888				}
                           A  8041    ; 2889	#elif FF_CODE_PAGE < 900	/* In SBCS 
                           A  8042    ; 2890				wc = ff_uni2oem(wc, CODEPAG
                           A  8043    .LINE 2890
                           A  8044    
0425E8 01B50100            A  8045    	LD	BC,437
0425EC C5                  A  8046    	PUSH	BC
0425ED DD07FA              A  8047    	LD	BC,(IX+%FFFFFFFA)
0425F0 CD 95 44 04         A  8048    	CALL	__stoiu
0425F4 0E00                A  8049    	LD	C,%0
0425F6 0600                A  8050    	LD	B,%0
0425F8 C5                  A  8051    	PUSH	BC
0425F9 E5                  A  8052    	PUSH	HL
0425FA CD 7A 0B 04         A  8053    	CALL	_ff_uni2oem
0425FE C1                  A  8054    	POP	BC
0425FF C1                  A  8055    	POP	BC
042600 C1                  A  8056    	POP	BC
042601 DD75FA              A  8057    	LD	(IX+%FFFFFFFA),L
042604 DD74FB              A  8058    	LD	(IX+%FFFFFFFB),H
                           A  8059    ; 2891				if (wc & 0x80) wc = ExCvt[w
                           A  8060    .LINE 2891
                           A  8061    
042607 DD7EFA              A  8062    	LD	A,(IX+%FFFFFFFA)
04260A E680                A  8063    	AND	A,%80
04260C 4F                  A  8064    	LD	C,A
04260D 0600                A  8065    	LD	B,%0
04260F C5E1                A  8066    	LD	HL,BC
042611 CD FA 46 04         A  8067    	CALL	__scmpzero
042615 28 1A               A  8068    	JR	Z,L_353
042617 DD7EFA              A  8069    	LD	A,(IX+%FFFFFFFA)
04261A CBBF                A  8070    	RES	%7,A
04261C 4F                  A  8071    	LD	C,A
04261D CD 95 44 04         A  8072    	CALL	__stoiu
042621 01 BB 53 04         A  8073    	LD	BC,_ExCvt
042625 09                  A  8074    	ADD	HL,BC
042626 4E                  A  8075    	LD	C,(HL)
042627 0600                A  8076    	LD	B,%0
042629 C5E1                A  8077    	LD	HL,BC
04262B DD75FA              A  8078    	LD	(IX+%FFFFFFFA),L
04262E DD74FB              A  8079    	LD	(IX+%FFFFFFFB),H
                           A  8080    ; 2892	#else						/* In DBCS 
                           A  8081    ; 2893				wc = ff_uni2oem(ff_wtoupper
                           A  8082    ; 2894	#endif
                           A  8083    ; 2895			}
042631                     A  8084    L_353:
                           A  8085    .LINE 2895
                           A  8086    
                           A  8087    ; 2896	
                           A  8088    ; 2897			if (wc >= 0x100) {				
                           A  8089    .LINE 2897
                           A  8090    
042631 49010001            A  8091    	LD.LIS	BC,256
042635 DD27FA              A  8092    	LD	HL,(IX+%FFFFFFFA)
042638 B7                  A  8093    	OR	A,A
042639 40ED42              A  8094    	SBC.SIS	HL,BC
04263C 38 44               A  8095    	JR	C,L_352
                           A  8096    ; 2898				if (i >= ni - 1) {			
                           A  8097    .LINE 2898
                           A  8098    
04263E DD31E6              A  8099    	LD	IY,(IX+%FFFFFFE6)
042641 ED03FF              A  8100    	LEA	BC,IY+%FFFFFFFF
042644 DD27F7              A  8101    	LD	HL,(IX+%FFFFFFF7)
042647 B7                  A  8102    	OR	A,A
042648 ED42                A  8103    	SBC	HL,BC
04264A 38 12               A  8104    	JR	C,L_342
                           A  8105    ; 2899					cf |= NS_LOSS | NS_LFN;
                           A  8106    .LINE 2899
                           A  8107    
04264C DD7EFC              A  8108    	LD	A,(IX+%FFFFFFFC)
04264F F603                A  8109    	OR	A,%3
042651 DD77FC              A  8110    	LD	(IX+%FFFFFFFC),A
                           A  8111    ; 2900					i = ni; continue;		
                           A  8112    .LINE 2900
                           A  8113    
042654 DD07E6              A  8114    	LD	BC,(IX+%FFFFFFE6)
042657 DD0FF7              A  8115    	LD	(IX+%FFFFFFF7),BC
04265A C3 14 25 04         A  8116    	JR	L_356
                           A  8117    ; 2901				}
04265E                     A  8118    L_342:
                           A  8119    .LINE 2901
                           A  8120    
                           A  8121    ; 2902				dp->fn[i++] = (BYTE)(wc >> 
                           A  8122    .LINE 2902
                           A  8123    
04265E DD07FA              A  8124    	LD	BC,(IX+%FFFFFFFA)
042661 CD 95 44 04         A  8125    	CALL	__stoiu
042665 3E08                A  8126    	LD	A,%8
042667 CD 05 44 04         A  8127    	CALL	__ishrs_b
04266B 7D                  A  8128    	LD	A,L
04266C DD07F7              A  8129    	LD	BC,(IX+%FFFFFFF7)
04266F DD3106              A  8130    	LD	IY,(IX+%6)
042672 ED231E              A  8131    	LEA	HL,IY+%1E
042675 09                  A  8132    	ADD	HL,BC
042676 77                  A  8133    	LD	(HL),A
042677 DD07F7              A  8134    	LD	BC,(IX+%FFFFFFF7)
04267A 03                  A  8135    	INC	BC
04267B DD0FF7              A  8136    	LD	(IX+%FFFFFFF7),BC
                           A  8137    ; 2903			} else {						
                           A  8138    .LINE 2903
                           A  8139    
04267E C3 06 27 04         A  8140    	JR	L_355
042682                     A  8141    L_352:
                           A  8142    ; 2904				if (wc == 0 || strchr("+,;=
                           A  8143    .LINE 2904
                           A  8144    
042682 DD27FA              A  8145    	LD	HL,(IX+%FFFFFFFA)
042685 CD FA 46 04         A  8146    	CALL	__scmpzero
042689 28 19               A  8147    	JR	Z,L_349
04268B DD07FA              A  8148    	LD	BC,(IX+%FFFFFFFA)
04268E CD 95 44 04         A  8149    	CALL	__stoiu
042692 E5                  A  8150    	PUSH	HL
042693 01 75 48 04         A  8151    	LD	BC,L__178
042697 C5                  A  8152    	PUSH	BC
042698 CD 13 46 04         A  8153    	CALL	_strchr
04269C C1                  A  8154    	POP	BC
04269D C1                  A  8155    	POP	BC
04269E CD 07 46 04         A  8156    	CALL	__icmpzero
0426A2 28 12               A  8157    	JR	Z,L_350
0426A4                     A  8158    L_349:
                           A  8159    ; 2905					wc = '_'; cf |= NS_LOSS
                           A  8160    .LINE 2905
                           A  8161    
0426A4 DD36FA5F            A  8162    	LD	(IX+%FFFFFFFA),%5F
0426A8 DD36FB00            A  8163    	LD	(IX+%FFFFFFFB),%0
0426AC DD7EFC              A  8164    	LD	A,(IX+%FFFFFFFC)
0426AF F603                A  8165    	OR	A,%3
0426B1 DD77FC              A  8166    	LD	(IX+%FFFFFFFC),A
                           A  8167    ; 2906				} else {
                           A  8168    .LINE 2906
                           A  8169    
0426B4 18 50               A  8170    	JR	L_355
0426B6                     A  8171    L_350:
                           A  8172    ; 2907					if (IsUpper(wc)) {		
                           A  8173    .LINE 2907
                           A  8174    
0426B6 49014100            A  8175    	LD.LIS	BC,65
0426BA DD27FA              A  8176    	LD	HL,(IX+%FFFFFFFA)
0426BD B7                  A  8177    	OR	A,A
0426BE 40ED42              A  8178    	SBC.SIS	HL,BC
0426C1 38 15               A  8179    	JR	C,L_348
0426C3 DD07FA              A  8180    	LD	BC,(IX+%FFFFFFFA)
0426C6 49215A00            A  8181    	LD.LIS	HL,90
0426CA B7                  A  8182    	OR	A,A
0426CB 40ED42              A  8183    	SBC.SIS	HL,BC
0426CE 38 08               A  8184    	JR	C,L_348
                           A  8185    ; 2908						b |= 2;
                           A  8186    .LINE 2908
                           A  8187    
0426D0 DD7EF6              A  8188    	LD	A,(IX+%FFFFFFF6)
0426D3 CBCF                A  8189    	SET	%1,A
0426D5 DD77F6              A  8190    	LD	(IX+%FFFFFFF6),A
                           A  8191    ; 2909					}
0426D8                     A  8192    L_348:
                           A  8193    .LINE 2909
                           A  8194    
                           A  8195    ; 2910					if (IsLower(wc)) {		
                           A  8196    .LINE 2910
                           A  8197    
0426D8 49016100            A  8198    	LD.LIS	BC,97
0426DC DD27FA              A  8199    	LD	HL,(IX+%FFFFFFFA)
0426DF B7                  A  8200    	OR	A,A
0426E0 40ED42              A  8201    	SBC.SIS	HL,BC
0426E3 38 21               A  8202    	JR	C,L_355
0426E5 DD07FA              A  8203    	LD	BC,(IX+%FFFFFFFA)
0426E8 49217A00            A  8204    	LD.LIS	HL,122
0426EC B7                  A  8205    	OR	A,A
0426ED 40ED42              A  8206    	SBC.SIS	HL,BC
0426F0 38 14               A  8207    	JR	C,L_355
                           A  8208    ; 2911						b |= 1; wc -= 0x20;
                           A  8209    .LINE 2911
                           A  8210    
0426F2 DD7EF6              A  8211    	LD	A,(IX+%FFFFFFF6)
0426F5 CBC7                A  8212    	SET	%0,A
0426F7 DD77F6              A  8213    	LD	(IX+%FFFFFFF6),A
0426FA DD31FA              A  8214    	LD	IY,(IX+%FFFFFFFA)
0426FD ED23E0              A  8215    	LEA	HL,IY+%FFFFFFE0
042700 DD75FA              A  8216    	LD	(IX+%FFFFFFFA),L
042703 DD74FB              A  8217    	LD	(IX+%FFFFFFFB),H
                           A  8218    ; 2912					}
                           A  8219    ; 2913				}
                           A  8220    ; 2914			}
042706                     A  8221    L_355:
                           A  8222    .LINE 2914
                           A  8223    
                           A  8224    ; 2915			dp->fn[i++] = (BYTE)wc;
                           A  8225    .LINE 2915
                           A  8226    
042706 DD7EFA              A  8227    	LD	A,(IX+%FFFFFFFA)
042709 DD07F7              A  8228    	LD	BC,(IX+%FFFFFFF7)
04270C DD3106              A  8229    	LD	IY,(IX+%6)
04270F ED231E              A  8230    	LEA	HL,IY+%1E
042712 09                  A  8231    	ADD	HL,BC
042713 77                  A  8232    	LD	(HL),A
042714 DD07F7              A  8233    	LD	BC,(IX+%FFFFFFF7)
042717 03                  A  8234    	INC	BC
042718 DD0FF7              A  8235    	LD	(IX+%FFFFFFF7),BC
                           A  8236    ; 2916		}
                           A  8237    .LINE 2916
                           A  8238    
04271B C3 14 25 04         A  8239    	JR	L_356
04271F                     A  8240    L_359:
                           A  8241    ; 2917	
                           A  8242    ; 2918		if (dp->fn[0] == DDEM) dp->fn[0] = 
                           A  8243    .LINE 2918
                           A  8244    
04271F DD3106              A  8245    	LD	IY,(IX+%6)
042722 ED031E              A  8246    	LEA	BC,IY+%1E
042725 DD0FD7              A  8247    	LD	(IX+%FFFFFFD7),BC
042728 FD7E1E              A  8248    	LD	A,(IY+%1E)
04272B B7ED62              A  8249    	UEXT	HL
04272E 6F                  A  8250    	LD	L,A
04272F 01E50000            A  8251    	LD	BC,229
042733 B7                  A  8252    	OR	A,A
042734 ED42                A  8253    	SBC	HL,BC
042736 20 0D               A  8254    	JR	NZ,L_361
042738 DD3106              A  8255    	LD	IY,(IX+%6)
04273B ED031E              A  8256    	LEA	BC,IY+%1E
04273E DD0FD7              A  8257    	LD	(IX+%FFFFFFD7),BC
042741 FD361E05            A  8258    	LD	(IY+%1E),%5
042745                     A  8259    L_361:
                           A  8260    ; 2919	
                           A  8261    ; 2920		if (ni == 8) b <<= 2;				
                           A  8262    .LINE 2920
                           A  8263    
042745 01080000            A  8264    	LD	BC,8
042749 DD27E6              A  8265    	LD	HL,(IX+%FFFFFFE6)
04274C B7                  A  8266    	OR	A,A
04274D ED42                A  8267    	SBC	HL,BC
04274F 20 08               A  8268    	JR	NZ,L_364
042751 DD7EF6              A  8269    	LD	A,(IX+%FFFFFFF6)
042754 87                  A  8270    	ADD	A,A
042755 87                  A  8271    	ADD	A,A
042756 DD77F6              A  8272    	LD	(IX+%FFFFFFF6),A
042759                     A  8273    L_364:
                           A  8274    ; 2921		if ((b & 0x0C) == 0x0C || (b & 0x03
                           A  8275    .LINE 2921
                           A  8276    
042759 DD7EF6              A  8277    	LD	A,(IX+%FFFFFFF6)
04275C E60C                A  8278    	AND	A,%C
04275E FE0C                A  8279    	CP	A,%C
042760 28 09               A  8280    	JR	Z,L_363
042762 DD7EF6              A  8281    	LD	A,(IX+%FFFFFFF6)
042765 E603                A  8282    	AND	A,%3
042767 FE03                A  8283    	CP	A,%3
042769 20 08               A  8284    	JR	NZ,L_369
04276B                     A  8285    L_363:
04276B DD7EFC              A  8286    	LD	A,(IX+%FFFFFFFC)
04276E CBCF                A  8287    	SET	%1,A
042770 DD77FC              A  8288    	LD	(IX+%FFFFFFFC),A
042773                     A  8289    L_369:
                           A  8290    ; 2922		if (!(cf & NS_LFN)) {				
                           A  8291    .LINE 2922
                           A  8292    
042773 DD7EFC              A  8293    	LD	A,(IX+%FFFFFFFC)
042776 E602                A  8294    	AND	A,%2
042778 20 1E               A  8295    	JR	NZ,L_370
                           A  8296    ; 2923			if (b & 0x01) cf |= NS_EXT;		
                           A  8297    .LINE 2923
                           A  8298    
04277A DD7EF6              A  8299    	LD	A,(IX+%FFFFFFF6)
04277D E601                A  8300    	AND	A,%1
04277F 28 08               A  8301    	JR	Z,L_367
042781 DD7EFC              A  8302    	LD	A,(IX+%FFFFFFFC)
042784 CBE7                A  8303    	SET	%4,A
042786 DD77FC              A  8304    	LD	(IX+%FFFFFFFC),A
042789                     A  8305    L_367:
                           A  8306    ; 2924			if (b & 0x04) cf |= NS_BODY;	
                           A  8307    .LINE 2924
                           A  8308    
042789 DD7EF6              A  8309    	LD	A,(IX+%FFFFFFF6)
04278C E604                A  8310    	AND	A,%4
04278E 28 08               A  8311    	JR	Z,L_370
042790 DD7EFC              A  8312    	LD	A,(IX+%FFFFFFFC)
042793 CBDF                A  8313    	SET	%3,A
042795 DD77FC              A  8314    	LD	(IX+%FFFFFFFC),A
                           A  8315    ; 2925		}
042798                     A  8316    L_370:
                           A  8317    .LINE 2925
                           A  8318    
                           A  8319    ; 2926	
                           A  8320    ; 2927		dp->fn[NSFLAG] = cf;	/* SFN is c
                           A  8321    .LINE 2927
                           A  8322    
042798 DD31D7              A  8323    	LD	IY,(IX+%FFFFFFD7)
04279B ED230B              A  8324    	LEA	HL,IY+%B
04279E DD7EFC              A  8325    	LD	A,(IX+%FFFFFFFC)
0427A1 77                  A  8326    	LD	(HL),A
                           A  8327    ; 2928	
                           A  8328    ; 2929		return FR_OK;
                           A  8329    .LINE 2929
                           A  8330    
0427A2 B7                  A  8331    	OR	A,A
0427A3 ED62                A  8332    	SBC	HL,HL
                           A  8333    ; 2930	
                           A  8334    ; 2931	
                           A  8335    ; 2932	#else	/* FF_USE_LFN : Non-LFN configu
                           A  8336    ; 2933		BYTE c, d, *sfn;
                           A  8337    ; 2934		UINT ni, si, i;
                           A  8338    ; 2935		const char *p;
                           A  8339    ; 2936	
                           A  8340    ; 2937		/* Create file name in directory fo
                           A  8341    ; 2938		p = *path; sfn = dp->fn;
                           A  8342    ; 2939		memset(sfn, ' ', 11);
                           A  8343    ; 2940		si = i = 0; ni = 8;
                           A  8344    ; 2941	#if FF_FS_RPATH != 0
                           A  8345    ; 2942		if (p[si] == '.') { /* Is this a do
                           A  8346    ; 2943			for (;;) {
                           A  8347    ; 2944				c = (BYTE)p[si++];
                           A  8348    ; 2945				if (c != '.' || si >= 3) br
                           A  8349    ; 2946				sfn[i++] = c;
                           A  8350    ; 2947			}
                           A  8351    ; 2948			if (!IsSeparator(c) && c > ' ')
                           A  8352    ; 2949			*path = p + si;					
                           A  8353    ; 2950			sfn[NSFLAG] = (c <= ' ') ? NS_L
                           A  8354    ; 2951			return FR_OK;
                           A  8355    ; 2952		}
                           A  8356    ; 2953	#endif
                           A  8357    ; 2954		for (;;) {
                           A  8358    ; 2955			c = (BYTE)p[si++];				
                           A  8359    ; 2956			if (c <= ' ') break; 			
                           A  8360    ; 2957			if (IsSeparator(c)) {			
                           A  8361    ; 2958				while (IsSeparator(p[si])) 
                           A  8362    ; 2959				break;
                           A  8363    ; 2960			}
                           A  8364    ; 2961			if (c == '.' || i >= ni) {		
                           A  8365    ; 2962				if (ni == 11 || c != '.') r
                           A  8366    ; 2963				i = 8; ni = 11;				
                           A  8367    ; 2964				continue;
                           A  8368    ; 2965			}
                           A  8369    ; 2966	#if FF_CODE_PAGE == 0
                           A  8370    ; 2967			if (ExCvt && c >= 0x80) {		
                           A  8371    ; 2968				c = ExCvt[c & 0x7F];		
                           A  8372    ; 2969			}
                           A  8373    ; 2970	#elif FF_CODE_PAGE < 900
                           A  8374    ; 2971			if (c >= 0x80) {				
                           A  8375    ; 2972				c = ExCvt[c & 0x7F];		
                           A  8376    ; 2973			}
                           A  8377    ; 2974	#endif
                           A  8378    ; 2975			if (dbc_1st(c)) {				
                           A  8379    ; 2976				d = (BYTE)p[si++];			
                           A  8380    ; 2977				if (!dbc_2nd(d) || i >= ni 
                           A  8381    ; 2978				sfn[i++] = c;
                           A  8382    ; 2979				sfn[i++] = d;
                           A  8383    ; 2980			} else {						
                           A  8384    ; 2981				if (strchr("*+,:;<=>[]|\"\?
                           A  8385    ; 2982				if (IsLower(c)) c -= 0x20;	
                           A  8386    ; 2983				sfn[i++] = c;
                           A  8387    ; 2984			}
                           A  8388    ; 2985		}
                           A  8389    ; 2986		*path = &p[si];						
                           A  8390    ; 2987		if (i == 0) return FR_INVALID_NAME;
                           A  8391    ; 2988	
                           A  8392    ; 2989		if (sfn[0] == DDEM) sfn[0] = RDDEM;
                           A  8393    ; 2990		sfn[NSFLAG] = (c <= ' ' || p[si] <=
                           A  8394    ; 2991	
                           A  8395    ; 2992		return FR_OK;
                           A  8396    ; 2993	#endif /* FF_USE_LFN */
                           A  8397    ; 2994	}
0427A5                     A  8398    L_371:
                           A  8399    .LINE 2994
                           A  8400    
0427A5 DDF9                A  8401    	LD	SP,IX
0427A7 DDE1                A  8402    	POP	IX
0427A9 C9                  A  8403    	RET	
                           A  8404    
                           A  8405    
                           A  8406    ;**************************** _create_name ****
                           A  8407    ;Name                         Addr/Register   S
                           A  8408    ;_ExCvt                              STATIC    
                           A  8409    ;_ff_uni2oem                         IMPORT  --
                           A  8410    ;_memset                             IMPORT  --
                           A  8411    ;_strchr                             IMPORT  --
                           A  8412    ;G_20                                 IX-41    
                           A  8413    ;G_18                                 IX-38    
                           A  8414    ;G_17                                 IX-35    
                           A  8415    ;G_16                                 IX-32    
                           A  8416    ;temp290                              IX-29    
                           A  8417    ;ni                                   IX-26    
                           A  8418    ;p                                    IX-23    
                           A  8419    ;uc                                   IX-20    
                           A  8420    ;lfn                                  IX-16    
                           A  8421    ;si                                   IX-13    
                           A  8422    ;b                                    IX-10    
                           A  8423    ;i                                     IX-9    
                           A  8424    ;wc                                    IX-6    
                           A  8425    ;cf                                    IX-4    
                           A  8426    ;di                                    IX-3    
                           A  8427    ;path                                  IX+9    
                           A  8428    ;dp                                    IX+6    
                           A  8429    
                           A  8430    
                           A  8431    ; Stack Frame Size: 56 (bytes)
                           A  8432    ;       Spill Code: 0 (instruction)
                           A  8433    
                           A  8434    
                           A  8435    .ENDFUNC "create_name",2994,"_create_name"
                           A  8436    	SEGMENT STRSECT
04486C                     A  8437    L__141:
04486C 2A3A3C3E 7C223F     A  8438    	DB	"*:<>|\"?"
044873 7F00                A  8439    	DB	127,0
044875                     A  8440    L__178:
044875 2B2C3B3D 5B5D       A  8441    	DB	"+,;=[]"
04487B 00                  A  8442    	DB	0
                           A  8443    	SEGMENT CODE
                           A  8444    ; 2995	
                           A  8445    ; 2996	
                           A  8446    ; 2997	
                           A  8447    ; 2998	
                           A  8448    ; 2999	/*-------------------------------------
                           A  8449    ; 3000	/* Follow a file path                  
                           A  8450    ; 3001	/*-------------------------------------
                           A  8451    ; 3002	
                           A  8452    ; 3003	static FRESULT follow_path (	/* FR_O
                           A  8453    ; 3004		DIR* dp,					/* Dire
                           A  8454    ; 3005		const TCHAR* path			/* Full
                           A  8455    ; 3006	)
                           A  8456    ; 3007	{
0427AA                     A  8457    _follow_path:
                           A  8458    .DEFINE "_follow_path"
                           A  8459    
                           A  8460    .VALUE _follow_path
                           A  8461    
                           A  8462    .CLASS 3
                           A  8463    
                           A  8464    .TYPE 68
                           A  8465    
                           A  8466    .ENDEF
                           A  8467    
                           A  8468    .BEGFUNC "follow_path",3007,"_follow_path"
                           A  8469    
                           A  8470    .LINE 3007
                           A  8471    
                           A  8472    .DEFINE "dp"
                           A  8473    
                           A  8474    .CLASS 65
                           A  8475    
                           A  8476    .VALUE 6
                           A  8477    
                           A  8478    .TAG "NONAME3"
                           A  8479    
                           A  8480    .TYPE 40
                           A  8481    
                           A  8482    .ENDEF
                           A  8483    
                           A  8484    .DEFINE "path"
                           A  8485    
                           A  8486    .CLASS 65
                           A  8487    
                           A  8488    .VALUE 9
                           A  8489    
                           A  8490    .TYPE 194
                           A  8491    
                           A  8492    .ENDEF
                           A  8493    
                           A  8494    .DEFINE "res"
                           A  8495    
                           A  8496    .CLASS 65
                           A  8497    
                           A  8498    .VALUE -3
                           A  8499    
                           A  8500    .TYPE 4
                           A  8501    
                           A  8502    .ENDEF
                           A  8503    
                           A  8504    .DEFINE "ns"
                           A  8505    
                           A  8506    .CLASS 65
                           A  8507    
                           A  8508    .VALUE -4
                           A  8509    
                           A  8510    .TYPE 12
                           A  8511    
                           A  8512    .ENDEF
                           A  8513    
                           A  8514    .DEFINE "fs"
                           A  8515    
                           A  8516    .CLASS 65
                           A  8517    
                           A  8518    .VALUE -7
                           A  8519    
                           A  8520    .TAG "NONAME0"
                           A  8521    
                           A  8522    .TYPE 40
                           A  8523    
                           A  8524    .ENDEF
                           A  8525    
0427AA DDE5                A  8526    	PUSH	IX
0427AC DD210000 00         A  8527    	LD	IX,0
0427B1 DD39                A  8528    	ADD	IX,SP
0427B3 ED22F3              A  8529    	LEA	HL,IX+%FFFFFFF3
0427B6 F9                  A  8530    	LD	SP,HL
                           A  8531    ; 3008		FRESULT res;
                           A  8532    ; 3009		BYTE ns;
                           A  8533    ; 3010		FATFS *fs = dp->obj.fs;
                           A  8534    .LINE 3010
                           A  8535    
0427B7 DD3106              A  8536    	LD	IY,(IX+%6)
0427BA FD0700              A  8537    	LD	BC,(IY+%0)
0427BD DD0FF9              A  8538    	LD	(IX+%FFFFFFF9),BC
                           A  8539    ; 3011	
                           A  8540    ; 3012	
                           A  8541    ; 3013	#if FF_FS_RPATH != 0
                           A  8542    ; 3014		if (!IsSeparator(*path) && (FF_STR_
                           A  8543    .LINE 3014
                           A  8544    
0427C0 DD2709              A  8545    	LD	HL,(IX+%9)
0427C3 7E                  A  8546    	LD	A,(HL)
0427C4 47                  A  8547    	LD	B,A
0427C5 17ED62              A  8548    	SEXT	HL
0427C8 68                  A  8549    	LD	L,B
0427C9 012F0000            A  8550    	LD	BC,47
0427CD B7                  A  8551    	OR	A,A
0427CE ED42                A  8552    	SBC	HL,BC
0427D0 28 33               A  8553    	JR	Z,L_376
0427D2 DD2709              A  8554    	LD	HL,(IX+%9)
0427D5 7E                  A  8555    	LD	A,(HL)
0427D6 47                  A  8556    	LD	B,A
0427D7 17ED62              A  8557    	SEXT	HL
0427DA 68                  A  8558    	LD	L,B
0427DB 015C0000            A  8559    	LD	BC,92
0427DF B7                  A  8560    	OR	A,A
0427E0 ED42                A  8561    	SBC	HL,BC
0427E2 28 21               A  8562    	JR	Z,L_376
                           A  8563    ; 3015			dp->obj.sclust = fs->cdir;		
                           A  8564    .LINE 3015
                           A  8565    
0427E4 DD31F9              A  8566    	LD	IY,(IX+%FFFFFFF9)
0427E7 FD070E              A  8567    	LD	BC,(IY+%E)
0427EA FD7E11              A  8568    	LD	A,(IY+%11)
0427ED DD3106              A  8569    	LD	IY,(IX+%6)
0427F0 FD0F07              A  8570    	LD	(IY+%7),BC
0427F3 FD770A              A  8571    	LD	(IY+%A),A
                           A  8572    ; 3016		} else
                           A  8573    .LINE 3016
                           A  8574    
0427F6 18 3F               A  8575    	JR	L_400
                           A  8576    ; 3017	#endif
                           A  8577    ; 3018		{									
                           A  8578    ; 3019			while (IsSeparator(*path)) path
0427F8                     A  8579    L_377:
                           A  8580    .LINE 3019
                           A  8581    
0427F8 DD0709              A  8582    	LD	BC,(IX+%9)
0427FB DD0FF3              A  8583    	LD	(IX+%FFFFFFF3),BC
0427FE DD0709              A  8584    	LD	BC,(IX+%9)
042801 03                  A  8585    	INC	BC
042802 DD0F09              A  8586    	LD	(IX+%9),BC
042805                     A  8587    L_376:
042805 DD2709              A  8588    	LD	HL,(IX+%9)
042808 7E                  A  8589    	LD	A,(HL)
042809 47                  A  8590    	LD	B,A
04280A 17ED62              A  8591    	SEXT	HL
04280D 68                  A  8592    	LD	L,B
04280E 012F0000            A  8593    	LD	BC,47
042812 B7                  A  8594    	OR	A,A
042813 ED42                A  8595    	SBC	HL,BC
042815 28 E1               A  8596    	JR	Z,L_377
042817 DD2709              A  8597    	LD	HL,(IX+%9)
04281A 7E                  A  8598    	LD	A,(HL)
04281B 47                  A  8599    	LD	B,A
04281C 17ED62              A  8600    	SEXT	HL
04281F 68                  A  8601    	LD	L,B
042820 015C0000            A  8602    	LD	BC,92
042824 B7                  A  8603    	OR	A,A
042825 ED42                A  8604    	SBC	HL,BC
042827 28 CF               A  8605    	JR	Z,L_377
                           A  8606    ; 3020			dp->obj.sclust = 0;				
                           A  8607    .LINE 3020
                           A  8608    
042829 01000000            A  8609    	LD	BC,0
04282D DD3106              A  8610    	LD	IY,(IX+%6)
042830 FD0F07              A  8611    	LD	(IY+%7),BC
042833 FD360A00            A  8612    	LD	(IY+%A),%0
                           A  8613    ; 3021		}
042837                     A  8614    L_400:
                           A  8615    .LINE 3021
                           A  8616    
                           A  8617    ; 3022	#if FF_FS_EXFAT
                           A  8618    ; 3023		dp->obj.n_frag = 0;	/* Invalidate l
                           A  8619    ; 3024	#if FF_FS_RPATH != 0
                           A  8620    ; 3025		if (fs->fs_type == FS_EXFAT && dp->
                           A  8621    ; 3026			DIR dj;
                           A  8622    ; 3027	
                           A  8623    ; 3028			dp->obj.c_scl = fs->cdc_scl;
                           A  8624    ; 3029			dp->obj.c_size = fs->cdc_size;
                           A  8625    ; 3030			dp->obj.c_ofs = fs->cdc_ofs;
                           A  8626    ; 3031			res = load_obj_xdir(&dj, &dp->o
                           A  8627    ; 3032			if (res != FR_OK) return res;
                           A  8628    ; 3033			dp->obj.objsize = ld_dword(fs->
                           A  8629    ; 3034			dp->obj.stat = fs->dirbuf[XDIR_
                           A  8630    ; 3035		}
                           A  8631    ; 3036	#endif
                           A  8632    ; 3037	#endif
                           A  8633    ; 3038	
                           A  8634    ; 3039		if ((UINT)*path < ' ') {			
                           A  8635    .LINE 3039
                           A  8636    
042837 DD2709              A  8637    	LD	HL,(IX+%9)
04283A 7E                  A  8638    	LD	A,(HL)
04283B 47                  A  8639    	LD	B,A
04283C 17ED62              A  8640    	SEXT	HL
04283F 68                  A  8641    	LD	L,B
042840 01200000            A  8642    	LD	BC,32
042844 B7                  A  8643    	OR	A,A
042845 ED42                A  8644    	SBC	HL,BC
042847 30 20               A  8645    	JR	NC,L_396
                           A  8646    ; 3040			dp->fn[NSFLAG] = NS_NONAME;
                           A  8647    .LINE 3040
                           A  8648    
042849 DD3106              A  8649    	LD	IY,(IX+%6)
04284C ED2329              A  8650    	LEA	HL,IY+%29
04284F 3680                A  8651    	LD	(HL),%80
                           A  8652    ; 3041			res = dir_sdi(dp, 0);
                           A  8653    .LINE 3041
                           A  8654    
042851 01000000            A  8655    	LD	BC,0
042855 C5                  A  8656    	PUSH	BC
042856 C5                  A  8657    	PUSH	BC
042857 DD0706              A  8658    	LD	BC,(IX+%6)
04285A C5                  A  8659    	PUSH	BC
04285B CD 09 14 04         A  8660    	CALL	_dir_sdi
04285F C1                  A  8661    	POP	BC
042860 C1                  A  8662    	POP	BC
042861 C1                  A  8663    	POP	BC
042862 DD2FFD              A  8664    	LD	(IX+%FFFFFFFD),HL
                           A  8665    ; 3042	
                           A  8666    ; 3043		} else {							
                           A  8667    .LINE 3043
                           A  8668    
042865 C3 2B 29 04         A  8669    	JR	L_401
                           A  8670    ; 3044			for (;;) {
042869                     A  8671    L_396:
                           A  8672    .LINE 3044
                           A  8673    
                           A  8674    ; 3045				res = create_name(dp, &path
                           A  8675    .LINE 3045
                           A  8676    
042869 ED6509              A  8677    	PEA	IX+%9
04286C DD0706              A  8678    	LD	BC,(IX+%6)
04286F C5                  A  8679    	PUSH	BC
042870 CD CD 21 04         A  8680    	CALL	_create_name
042874 C1                  A  8681    	POP	BC
042875 C1                  A  8682    	POP	BC
042876 DD2FFD              A  8683    	LD	(IX+%FFFFFFFD),HL
                           A  8684    ; 3046				if (res != FR_OK) break;
                           A  8685    .LINE 3046
                           A  8686    
042879 CD 07 46 04         A  8687    	CALL	__icmpzero
04287D C2 2B 29 04         A  8688    	JR	NZ,L_401
                           A  8689    ; 3047				res = dir_find(dp);			
                           A  8690    .LINE 3047
                           A  8691    
042881 DD0706              A  8692    	LD	BC,(IX+%6)
042884 C5                  A  8693    	PUSH	BC
042885 CD B5 1C 04         A  8694    	CALL	_dir_find
042889 C1                  A  8695    	POP	BC
04288A DD2FFD              A  8696    	LD	(IX+%FFFFFFFD),HL
                           A  8697    ; 3048				ns = dp->fn[NSFLAG];
                           A  8698    .LINE 3048
                           A  8699    
04288D DD3106              A  8700    	LD	IY,(IX+%6)
042890 ED3329              A  8701    	LEA	IY,IY+%29
042893 DD3EF6              A  8702    	LD	(IX+%FFFFFFF6),IY
042896 DD27F6              A  8703    	LD	HL,(IX+%FFFFFFF6)
042899 7E                  A  8704    	LD	A,(HL)
04289A DD77FC              A  8705    	LD	(IX+%FFFFFFFC),A
                           A  8706    ; 3049				if (res != FR_OK) {			
                           A  8707    .LINE 3049
                           A  8708    
04289D DD27FD              A  8709    	LD	HL,(IX+%FFFFFFFD)
0428A0 CD 07 46 04         A  8710    	CALL	__icmpzero
0428A4 28 38               A  8711    	JR	Z,L_392
                           A  8712    ; 3050					if (res == FR_NO_FILE) 
                           A  8713    .LINE 3050
                           A  8714    
0428A6 01040000            A  8715    	LD	BC,4
0428AA DD27FD              A  8716    	LD	HL,(IX+%FFFFFFFD)
0428AD B7                  A  8717    	OR	A,A
0428AE ED42                A  8718    	SBC	HL,BC
0428B0 20 79               A  8719    	JR	NZ,L_401
                           A  8720    ; 3051						if (FF_FS_RPATH && 
                           A  8721    .LINE 3051
                           A  8722    
0428B2 DD7EFC              A  8723    	LD	A,(IX+%FFFFFFFC)
0428B5 E620                A  8724    	AND	A,%20
0428B7 28 15               A  8725    	JR	Z,L_387
                           A  8726    ; 3052							if (!(ns & NS_L
                           A  8727    .LINE 3052
                           A  8728    
0428B9 DD7EFC              A  8729    	LD	A,(IX+%FFFFFFFC)
0428BC E604                A  8730    	AND	A,%4
0428BE 28 A9               A  8731    	JR	Z,L_396
                           A  8732    ; 3053							dp->fn[NSFLAG] 
                           A  8733    .LINE 3053
                           A  8734    
0428C0 DD27F6              A  8735    	LD	HL,(IX+%FFFFFFF6)
0428C3 3680                A  8736    	LD	(HL),%80
                           A  8737    ; 3054							res = FR_OK;
                           A  8738    .LINE 3054
                           A  8739    
0428C5 01000000            A  8740    	LD	BC,0
0428C9 DD0FFD              A  8741    	LD	(IX+%FFFFFFFD),BC
                           A  8742    ; 3055						} else {			
                           A  8743    .LINE 3055
                           A  8744    
0428CC 18 5D               A  8745    	JR	L_401
0428CE                     A  8746    L_387:
                           A  8747    ; 3056							if (!(ns & NS_L
                           A  8748    .LINE 3056
                           A  8749    
0428CE DD7EFC              A  8750    	LD	A,(IX+%FFFFFFFC)
0428D1 E604                A  8751    	AND	A,%4
0428D3 20 56               A  8752    	JR	NZ,L_401
0428D5 01050000            A  8753    	LD	BC,5
0428D9 DD0FFD              A  8754    	LD	(IX+%FFFFFFFD),BC
                           A  8755    ; 3057						}
                           A  8756    ; 3058					}
                           A  8757    .LINE 3058
                           A  8758    
                           A  8759    ; 3059					break;
                           A  8760    .LINE 3059
                           A  8761    
0428DC 18 4D               A  8762    	JR	L_401
                           A  8763    ; 3060				}
0428DE                     A  8764    L_392:
                           A  8765    .LINE 3060
                           A  8766    
                           A  8767    ; 3061				if (ns & NS_LAST) break;	
                           A  8768    .LINE 3061
                           A  8769    
0428DE DD7EFC              A  8770    	LD	A,(IX+%FFFFFFFC)
0428E1 E604                A  8771    	AND	A,%4
0428E3 20 46               A  8772    	JR	NZ,L_401
                           A  8773    ; 3062				/* Get into the sub-directo
                           A  8774    ; 3063				if (!(dp->obj.attr & AM_DIR
                           A  8775    .LINE 3063
                           A  8776    
0428E5 DD3106              A  8777    	LD	IY,(IX+%6)
0428E8 FD7E05              A  8778    	LD	A,(IY+%5)
0428EB E610                A  8779    	AND	A,%10
0428ED 20 09               A  8780    	JR	NZ,L_395
                           A  8781    ; 3064					res = FR_NO_PATH; break
                           A  8782    .LINE 3064
                           A  8783    
0428EF 01050000            A  8784    	LD	BC,5
0428F3 DD0FFD              A  8785    	LD	(IX+%FFFFFFFD),BC
0428F6 18 33               A  8786    	JR	L_401
                           A  8787    ; 3065				}
0428F8                     A  8788    L_395:
                           A  8789    .LINE 3065
                           A  8790    
                           A  8791    ; 3066	#if FF_FS_EXFAT
                           A  8792    ; 3067				if (fs->fs_type == FS_EXFAT
                           A  8793    ; 3068					dp->obj.c_scl = dp->obj
                           A  8794    ; 3069					dp->obj.c_size = ((DWOR
                           A  8795    ; 3070					dp->obj.c_ofs = dp->blk
                           A  8796    ; 3071					init_alloc_info(fs, &dp
                           A  8797    ; 3072				} else
                           A  8798    ; 3073	#endif
                           A  8799    ; 3074				{
                           A  8800    ; 3075					dp->obj.sclust = ld_clu
                           A  8801    .LINE 3075
                           A  8802    
0428F8 DD3106              A  8803    	LD	IY,(IX+%6)
0428FB FD270F              A  8804    	LD	HL,(IY+%F)
0428FE FD5E12              A  8805    	LD	E,(IY+%12)
042901 01FF0100            A  8806    	LD	BC,511
042905 AF                  A  8807    	XOR	A,A
042906 CD D6 47 04         A  8808    	CALL	__land
04290A E5C1                A  8809    	LD	BC,HL
04290C DD31F9              A  8810    	LD	IY,(IX+%FFFFFFF9)
04290F ED232E              A  8811    	LEA	HL,IY+%2E
042912 09                  A  8812    	ADD	HL,BC
042913 E5                  A  8813    	PUSH	HL
042914 DD07F9              A  8814    	LD	BC,(IX+%FFFFFFF9)
042917 C5                  A  8815    	PUSH	BC
042918 CD 21 18 04         A  8816    	CALL	_ld_clust
04291C C1                  A  8817    	POP	BC
04291D C1                  A  8818    	POP	BC
04291E DD3106              A  8819    	LD	IY,(IX+%6)
042921 FD2F07              A  8820    	LD	(IY+%7),HL
042924 FD730A              A  8821    	LD	(IY+%A),E
                           A  8822    ; 3076				}
                           A  8823    ; 3077			}
                           A  8824    .LINE 3077
                           A  8825    
042927 C3 69 28 04         A  8826    	JR	L_396
                           A  8827    ; 3078		}
04292B                     A  8828    L_401:
                           A  8829    .LINE 3078
                           A  8830    
                           A  8831    ; 3079	
                           A  8832    ; 3080		return res;
                           A  8833    .LINE 3080
                           A  8834    
04292B DD27FD              A  8835    	LD	HL,(IX+%FFFFFFFD)
                           A  8836    ; 3081	}
                           A  8837    .LINE 3081
                           A  8838    
04292E DDF9                A  8839    	LD	SP,IX
042930 DDE1                A  8840    	POP	IX
042932 C9                  A  8841    	RET	
                           A  8842    
                           A  8843    
                           A  8844    ;**************************** _follow_path ****
                           A  8845    ;Name                         Addr/Register   S
                           A  8846    ;G_22                                 IX-10    
                           A  8847    ;fs                                    IX-7    
                           A  8848    ;ns                                    IX-4    
                           A  8849    ;res                                   IX-3    
                           A  8850    ;path                                  IX+9    
                           A  8851    ;dp                                    IX+6    
                           A  8852    
                           A  8853    
                           A  8854    ; Stack Frame Size: 25 (bytes)
                           A  8855    ;       Spill Code: 0 (instruction)
                           A  8856    
                           A  8857    
                           A  8858    .ENDFUNC "follow_path",3081,"_follow_path"
                           A  8859    ; 3082	
                           A  8860    ; 3083	
                           A  8861    ; 3084	
                           A  8862    ; 3085	
                           A  8863    ; 3086	/*-------------------------------------
                           A  8864    ; 3087	/* Get logical drive number from path n
                           A  8865    ; 3088	/*-------------------------------------
                           A  8866    ; 3089	
                           A  8867    ; 3090	static int get_ldnumber (	/* Returns 
                           A  8868    ; 3091		const TCHAR** path		/* Pointer 
                           A  8869    ; 3092	)
                           A  8870    ; 3093	{
042933                     A  8871    _get_ldnumber:
                           A  8872    .DEFINE "_get_ldnumber"
                           A  8873    
                           A  8874    .VALUE _get_ldnumber
                           A  8875    
                           A  8876    .CLASS 3
                           A  8877    
                           A  8878    .TYPE 68
                           A  8879    
                           A  8880    .ENDEF
                           A  8881    
                           A  8882    .BEGFUNC "get_ldnumber",3093,"_get_ldnumber"
                           A  8883    
                           A  8884    .LINE 3093
                           A  8885    
                           A  8886    .DEFINE "path"
                           A  8887    
                           A  8888    .CLASS 65
                           A  8889    
                           A  8890    .VALUE 6
                           A  8891    
                           A  8892    .TYPE 1570
                           A  8893    
                           A  8894    .ENDEF
                           A  8895    
                           A  8896    .DEFINE "tp"
                           A  8897    
                           A  8898    .CLASS 65
                           A  8899    
                           A  8900    .VALUE -3
                           A  8901    
                           A  8902    .TYPE 194
                           A  8903    
                           A  8904    .ENDEF
                           A  8905    
                           A  8906    .DEFINE "tt"
                           A  8907    
                           A  8908    .CLASS 65
                           A  8909    
                           A  8910    .VALUE -6
                           A  8911    
                           A  8912    .TYPE 194
                           A  8913    
                           A  8914    .ENDEF
                           A  8915    
                           A  8916    .DEFINE "tc"
                           A  8917    
                           A  8918    .CLASS 65
                           A  8919    
                           A  8920    .VALUE -7
                           A  8921    
                           A  8922    .TYPE 2
                           A  8923    
                           A  8924    .ENDEF
                           A  8925    
                           A  8926    .DEFINE "i"
                           A  8927    
                           A  8928    .CLASS 65
                           A  8929    
                           A  8930    .VALUE -10
                           A  8931    
                           A  8932    .TYPE 4
                           A  8933    
                           A  8934    .ENDEF
                           A  8935    
                           A  8936    .DEFINE "vol"
                           A  8937    
                           A  8938    .CLASS 65
                           A  8939    
                           A  8940    .VALUE -13
                           A  8941    
                           A  8942    .TYPE 4
                           A  8943    
                           A  8944    .ENDEF
                           A  8945    
042933 DDE5                A  8946    	PUSH	IX
042935 DD210000 00         A  8947    	LD	IX,0
04293A DD39                A  8948    	ADD	IX,SP
04293C ED22F0              A  8949    	LEA	HL,IX+%FFFFFFF0
04293F F9                  A  8950    	LD	SP,HL
                           A  8951    ; 3094		const TCHAR *tp, *tt;
                           A  8952    ; 3095		TCHAR tc;
                           A  8953    ; 3096		int i;
                           A  8954    ; 3097		int vol = -1;
                           A  8955    .LINE 3097
                           A  8956    
042940 01FFFFFF            A  8957    	LD	BC,16777215
042944 DD0FF3              A  8958    	LD	(IX+%FFFFFFF3),BC
                           A  8959    ; 3098	#if FF_STR_VOLUME_ID		/* Find str
                           A  8960    ; 3099		const char *sp;
                           A  8961    ; 3100		char c;
                           A  8962    ; 3101	#endif
                           A  8963    ; 3102	
                           A  8964    ; 3103		tt = tp = *path;
                           A  8965    .LINE 3103
                           A  8966    
042947 DD2706              A  8967    	LD	HL,(IX+%6)
04294A ED07                A  8968    	LD	BC,(HL)
04294C DD0FFD              A  8969    	LD	(IX+%FFFFFFFD),BC
04294F DD0FFA              A  8970    	LD	(IX+%FFFFFFFA),BC
                           A  8971    ; 3104		if (!tp) return vol;	/* Invalid 
                           A  8972    .LINE 3104
                           A  8973    
042952 C5E1                A  8974    	LD	HL,BC
042954 CD 07 46 04         A  8975    	CALL	__icmpzero
042958 20 08               A  8976    	JR	NZ,L_406
04295A 21FFFFFF            A  8977    	LD	HL,16777215
04295E C3 17 2A 04         A  8978    	JR	L_418
                           A  8979    ; 3105		do tc = *tt++; while (!IsTerminator
042962                     A  8980    L_406:
                           A  8981    .LINE 3105
                           A  8982    
042962 DD07FA              A  8983    	LD	BC,(IX+%FFFFFFFA)
042965 DD0FF0              A  8984    	LD	(IX+%FFFFFFF0),BC
042968 C5E1                A  8985    	LD	HL,BC
04296A 7E                  A  8986    	LD	A,(HL)
04296B DD77F9              A  8987    	LD	(IX+%FFFFFFF9),A
04296E DD07FA              A  8988    	LD	BC,(IX+%FFFFFFFA)
042971 03                  A  8989    	INC	BC
042972 DD0FFA              A  8990    	LD	(IX+%FFFFFFFA),BC
042975 DD7EF9              A  8991    	LD	A,(IX+%FFFFFFF9)
042978 FE20                A  8992    	CP	A,%20
04297A 38 07               A  8993    	JR	C,L_416
04297C DD7EF9              A  8994    	LD	A,(IX+%FFFFFFF9)
04297F FE3A                A  8995    	CP	A,%3A
042981 20 DF               A  8996    	JR	NZ,L_406
042983                     A  8997    L_416:
                           A  8998    ; 3106	
                           A  8999    ; 3107		if (tc == ':') {	/* DOS/Windows 
                           A  9000    .LINE 3107
                           A  9001    
042983 DD7EF9              A  9002    	LD	A,(IX+%FFFFFFF9)
042986 FE3A                A  9003    	CP	A,%3A
042988 20 7A               A  9004    	JR	NZ,L_417
                           A  9005    ; 3108			i = FF_VOLUMES;
                           A  9006    .LINE 3108
                           A  9007    
04298A 01010000            A  9008    	LD	BC,1
04298E DD0FF6              A  9009    	LD	(IX+%FFFFFFF6),BC
                           A  9010    ; 3109			if (IsDigit(*tp) && tp + 2 == t
                           A  9011    .LINE 3109
                           A  9012    
042991 DD27FD              A  9013    	LD	HL,(IX+%FFFFFFFD)
042994 7E                  A  9014    	LD	A,(HL)
042995 47                  A  9015    	LD	B,A
042996 17ED62              A  9016    	SEXT	HL
042999 68                  A  9017    	LD	L,B
04299A 01300000            A  9018    	LD	BC,48
04299E B7                  A  9019    	OR	A,A
04299F ED42                A  9020    	SBC	HL,BC
0429A1 FA DF 29 04         A  9021    	JP	M,L_413
0429A5 DD27FD              A  9022    	LD	HL,(IX+%FFFFFFFD)
0429A8 7E                  A  9023    	LD	A,(HL)
0429A9 47                  A  9024    	LD	B,A
0429AA 17ED62              A  9025    	SEXT	HL
0429AD 68                  A  9026    	LD	L,B
0429AE E5C1                A  9027    	LD	BC,HL
0429B0 21390000            A  9028    	LD	HL,57
0429B4 B7                  A  9029    	OR	A,A
0429B5 ED42                A  9030    	SBC	HL,BC
0429B7 CD A9 43 04         A  9031    	CALL	__setflag
0429BB FA DF 29 04         A  9032    	JP	M,L_413
0429BF DD31FD              A  9033    	LD	IY,(IX+%FFFFFFFD)
0429C2 ED2302              A  9034    	LEA	HL,IY+%2
0429C5 DD07FA              A  9035    	LD	BC,(IX+%FFFFFFFA)
0429C8 B7                  A  9036    	OR	A,A
0429C9 ED42                A  9037    	SBC	HL,BC
0429CB 20 12               A  9038    	JR	NZ,L_413
                           A  9039    ; 3110				i = (int)*tp - '0';	/* Get 
                           A  9040    .LINE 3110
                           A  9041    
0429CD DD27FD              A  9042    	LD	HL,(IX+%FFFFFFFD)
0429D0 7E                  A  9043    	LD	A,(HL)
0429D1 47                  A  9044    	LD	B,A
0429D2 17ED62              A  9045    	SEXT	HL
0429D5 68                  A  9046    	LD	L,B
0429D6 E5FDE1              A  9047    	LD	IY,HL
0429D9 ED33D0              A  9048    	LEA	IY,IY+%FFFFFFD0
0429DC DD3EF6              A  9049    	LD	(IX+%FFFFFFF6),IY
                           A  9050    ; 3111			}
0429DF                     A  9051    L_413:
                           A  9052    .LINE 3111
                           A  9053    
                           A  9054    ; 3112	#if FF_STR_VOLUME_ID == 1	/* Arbitrar
                           A  9055    ; 3113			else {
                           A  9056    ; 3114				i = 0;
                           A  9057    ; 3115				do {
                           A  9058    ; 3116					sp = VolumeStr[i]; tp =
                           A  9059    ; 3117					do {	/* Compare the 
                           A  9060    ; 3118						c = *sp++; tc = *tp
                           A  9061    ; 3119						if (IsLower(c)) c -
                           A  9062    ; 3120						if (IsLower(tc)) tc
                           A  9063    ; 3121					} while (c && (TCHAR)c 
                           A  9064    ; 3122				} while ((c || tp != tt) &&
                           A  9065    ; 3123			}
                           A  9066    ; 3124	#endif
                           A  9067    ; 3125			if (i < FF_VOLUMES) {	/* If a
                           A  9068    .LINE 3125
                           A  9069    
0429DF 01010000            A  9070    	LD	BC,1
0429E3 DD27F6              A  9071    	LD	HL,(IX+%FFFFFFF6)
0429E6 B7                  A  9072    	OR	A,A
0429E7 ED42                A  9073    	SBC	HL,BC
0429E9 CD A9 43 04         A  9074    	CALL	__setflag
0429ED F2 FF 29 04         A  9075    	JP	P,L_414
                           A  9076    ; 3126				vol = i;		/* Drive nu
                           A  9077    .LINE 3126
                           A  9078    
0429F1 DD07F6              A  9079    	LD	BC,(IX+%FFFFFFF6)
0429F4 DD0FF3              A  9080    	LD	(IX+%FFFFFFF3),BC
                           A  9081    ; 3127				*path = tt;		/* Snip the
                           A  9082    .LINE 3127
                           A  9083    
0429F7 DD2706              A  9084    	LD	HL,(IX+%6)
0429FA DD07FA              A  9085    	LD	BC,(IX+%FFFFFFFA)
0429FD ED0F                A  9086    	LD	(HL),BC
                           A  9087    ; 3128			}
0429FF                     A  9088    L_414:
                           A  9089    .LINE 3128
                           A  9090    
                           A  9091    ; 3129			return vol;
                           A  9092    .LINE 3129
                           A  9093    
0429FF DD27F3              A  9094    	LD	HL,(IX+%FFFFFFF3)
042A02 18 13               A  9095    	JR	L_418
                           A  9096    ; 3130		}
042A04                     A  9097    L_417:
                           A  9098    .LINE 3130
                           A  9099    
                           A  9100    ; 3131	#if FF_STR_VOLUME_ID == 2		/* Unix
                           A  9101    ; 3132		if (*tp == '/') {			/* Is t
                           A  9102    ; 3133			while (*(tp + 1) == '/') tp++;	
                           A  9103    ; 3134			i = 0;
                           A  9104    ; 3135			do {
                           A  9105    ; 3136				tt = tp; sp = VolumeStr[i];
                           A  9106    ; 3137				do {	/* Compare the volu
                           A  9107    ; 3138					c = *sp++; tc = *(++tt)
                           A  9108    ; 3139					if (IsLower(c)) c -= 0x
                           A  9109    ; 3140					if (IsLower(tc)) tc -= 
                           A  9110    ; 3141				} while (c && (TCHAR)c == t
                           A  9111    ; 3142			} while ((c || (tc != '/' && !I
                           A  9112    ; 3143			if (i < FF_VOLUMES) {	/* If a
                           A  9113    ; 3144				vol = i;		/* Drive nu
                           A  9114    ; 3145				*path = tt;		/* Snip the
                           A  9115    ; 3146			}
                           A  9116    ; 3147			return vol;
                           A  9117    ; 3148		}
                           A  9118    ; 3149	#endif
                           A  9119    ; 3150		/* No drive prefix is found */
                           A  9120    ; 3151	#if FF_FS_RPATH != 0
                           A  9121    ; 3152		vol = CurrVol;	/* Default drive is
                           A  9122    .LINE 3152
                           A  9123    
042A04 3A B8 4A 04         A  9124    	LD	A,(_CurrVol)
042A08 B7ED62              A  9125    	UEXT	HL
042A0B 6F                  A  9126    	LD	L,A
042A0C DD2FF3              A  9127    	LD	(IX+%FFFFFFF3),HL
                           A  9128    ; 3153	#else
                           A  9129    ; 3154		vol = 0;		/* Default drive is
                           A  9130    ; 3155	#endif
                           A  9131    ; 3156		return vol;		/* Return the defau
                           A  9132    .LINE 3156
                           A  9133    
042A0F 3A B8 4A 04         A  9134    	LD	A,(_CurrVol)
042A13 B7ED62              A  9135    	UEXT	HL
042A16 6F                  A  9136    	LD	L,A
                           A  9137    ; 3157	}
042A17                     A  9138    L_418:
                           A  9139    .LINE 3157
                           A  9140    
042A17 DDF9                A  9141    	LD	SP,IX
042A19 DDE1                A  9142    	POP	IX
042A1B C9                  A  9143    	RET	
                           A  9144    
                           A  9145    
                           A  9146    ;**************************** _get_ldnumber ***
                           A  9147    ;Name                         Addr/Register   S
                           A  9148    ;_CurrVol                            STATIC    
                           A  9149    ;vol                                  IX-13    
                           A  9150    ;i                                    IX-10    
                           A  9151    ;tc                                    IX-7    
                           A  9152    ;tt                                    IX-6    
                           A  9153    ;tp                                    IX-3    
                           A  9154    ;path                                  IX+6    
                           A  9155    
                           A  9156    
                           A  9157    ; Stack Frame Size: 25 (bytes)
                           A  9158    ;       Spill Code: 0 (instruction)
                           A  9159    
                           A  9160    
                           A  9161    .ENDFUNC "get_ldnumber",3157,"_get_ldnumber"
                           A  9162    ; 3158	
                           A  9163    ; 3159	
                           A  9164    ; 3160	
                           A  9165    ; 3161	
                           A  9166    ; 3162	/*-------------------------------------
                           A  9167    ; 3163	/* GPT support functions               
                           A  9168    ; 3164	/*-------------------------------------
                           A  9169    ; 3165	
                           A  9170    ; 3166	#if FF_LBA64
                           A  9171    ; 3167	
                           A  9172    ; 3168	/* Calculate CRC32 in byte-by-byte */
                           A  9173    ; 3169	
                           A  9174    ; 3170	static DWORD crc32 (	/* Returns next
                           A  9175    ; 3171		DWORD crc,			/* Current CRC 
                           A  9176    ; 3172		BYTE d				/* A byte to be
                           A  9177    ; 3173	)
                           A  9178    ; 3174	{
                           A  9179    ; 3175		BYTE b;
                           A  9180    ; 3176	
                           A  9181    ; 3177	
                           A  9182    ; 3178		for (b = 1; b; b <<= 1) {
                           A  9183    ; 3179			crc ^= (d & b) ? 1 : 0;
                           A  9184    ; 3180			crc = (crc & 1) ? crc >> 1 ^ 0x
                           A  9185    ; 3181		}
                           A  9186    ; 3182		return crc;
                           A  9187    ; 3183	}
                           A  9188    ; 3184	
                           A  9189    ; 3185	
                           A  9190    ; 3186	/* Check validity of GPT header */
                           A  9191    ; 3187	
                           A  9192    ; 3188	static int test_gpt_header (	/* 0:In
                           A  9193    ; 3189		const BYTE* gpth			/* Poin
                           A  9194    ; 3190	)
                           A  9195    ; 3191	{
                           A  9196    ; 3192		UINT i;
                           A  9197    ; 3193		DWORD bcc;
                           A  9198    ; 3194	
                           A  9199    ; 3195	
                           A  9200    ; 3196		if (memcmp(gpth + GPTH_Sign, "EFI P
                           A  9201    ; 3197		for (i = 0, bcc = 0xFFFFFFFF; i < 9
                           A  9202    ; 3198			bcc = crc32(bcc, i - GPTH_Bcc <
                           A  9203    ; 3199		}
                           A  9204    ; 3200		if (~bcc != ld_dword(gpth + GPTH_Bc
                           A  9205    ; 3201		if (ld_dword(gpth + GPTH_PteSize) !
                           A  9206    ; 3202		if (ld_dword(gpth + GPTH_PtNum) > 1
                           A  9207    ; 3203	
                           A  9208    ; 3204		return 1;
                           A  9209    ; 3205	}
                           A  9210    ; 3206	
                           A  9211    ; 3207	#if !FF_FS_READONLY && FF_USE_MKFS
                           A  9212    ; 3208	
                           A  9213    ; 3209	/* Generate random value */
                           A  9214    ; 3210	static DWORD make_rand (
                           A  9215    ; 3211		DWORD seed,		/* Seed value */
                           A  9216    ; 3212		BYTE* buff,		/* Output buffer */
                           A  9217    ; 3213		UINT n			/* Data length */
                           A  9218    ; 3214	)
                           A  9219    ; 3215	{
                           A  9220    ; 3216		UINT r;
                           A  9221    ; 3217	
                           A  9222    ; 3218	
                           A  9223    ; 3219		if (seed == 0) seed = 1;
                           A  9224    ; 3220		do {
                           A  9225    ; 3221			for (r = 0; r < 8; r++) seed = 
                           A  9226    ; 3222			*buff++ = (BYTE)seed;
                           A  9227    ; 3223		} while (--n);
                           A  9228    ; 3224		return seed;
                           A  9229    ; 3225	}
                           A  9230    ; 3226	
                           A  9231    ; 3227	#endif
                           A  9232    ; 3228	#endif
                           A  9233    ; 3229	
                           A  9234    ; 3230	
                           A  9235    ; 3231	
                           A  9236    ; 3232	/*-------------------------------------
                           A  9237    ; 3233	/* Load a sector and check if it is an 
                           A  9238    ; 3234	/*-------------------------------------
                           A  9239    ; 3235	
                           A  9240    ; 3236	/* Check what the sector is */
                           A  9241    ; 3237	
                           A  9242    ; 3238	static UINT check_fs (	/* 0:FAT/FAT32 
                           A  9243    ; 3239		FATFS* fs,			/* Filesystem o
                           A  9244    ; 3240		LBA_t sect			/* Sector to lo
                           A  9245    ; 3241	)
                           A  9246    ; 3242	{
042A1C                     A  9247    _check_fs:
                           A  9248    .DEFINE "_check_fs"
                           A  9249    
                           A  9250    .VALUE _check_fs
                           A  9251    
                           A  9252    .CLASS 3
                           A  9253    
                           A  9254    .TYPE 78
                           A  9255    
                           A  9256    .ENDEF
                           A  9257    
                           A  9258    .BEGFUNC "check_fs",3242,"_check_fs"
                           A  9259    
                           A  9260    .LINE 3242
                           A  9261    
                           A  9262    .DEFINE "fs"
                           A  9263    
                           A  9264    .CLASS 65
                           A  9265    
                           A  9266    .VALUE 6
                           A  9267    
                           A  9268    .TAG "NONAME0"
                           A  9269    
                           A  9270    .TYPE 40
                           A  9271    
                           A  9272    .ENDEF
                           A  9273    
                           A  9274    .DEFINE "sect"
                           A  9275    
                           A  9276    .CLASS 65
                           A  9277    
                           A  9278    .VALUE 9
                           A  9279    
                           A  9280    .TYPE 15
                           A  9281    
                           A  9282    .ENDEF
                           A  9283    
                           A  9284    .DEFINE "b"
                           A  9285    
                           A  9286    .CLASS 65
                           A  9287    
                           A  9288    .VALUE -4
                           A  9289    
                           A  9290    .TYPE 12
                           A  9291    
                           A  9292    .ENDEF
                           A  9293    
                           A  9294    .DEFINE "w"
                           A  9295    
                           A  9296    .CLASS 65
                           A  9297    
                           A  9298    .VALUE -9
                           A  9299    
                           A  9300    .TYPE 13
                           A  9301    
                           A  9302    .ENDEF
                           A  9303    
                           A  9304    .DEFINE "sign"
                           A  9305    
                           A  9306    .CLASS 65
                           A  9307    
                           A  9308    .VALUE -11
                           A  9309    
                           A  9310    .TYPE 13
                           A  9311    
                           A  9312    .ENDEF
                           A  9313    
042A1C DDE5                A  9314    	PUSH	IX
042A1E DD210000 00         A  9315    	LD	IX,0
042A23 DD39                A  9316    	ADD	IX,SP
042A25 ED22EC              A  9317    	LEA	HL,IX+%FFFFFFEC
042A28 F9                  A  9318    	LD	SP,HL
                           A  9319    ; 3243		WORD w, sign;
                           A  9320    ; 3244		BYTE b;
                           A  9321    ; 3245	
                           A  9322    ; 3246	
                           A  9323    ; 3247		fs->wflag = 0; fs->winsect = (LBA_t
                           A  9324    .LINE 3247
                           A  9325    
042A29 DD3106              A  9326    	LD	IY,(IX+%6)
042A2C FD360300            A  9327    	LD	(IY+%3),%0
042A30 01FFFFFF            A  9328    	LD	BC,16777215
042A34 FD0F2A              A  9329    	LD	(IY+%2A),BC
042A37 FD362DFF            A  9330    	LD	(IY+%2D),%FF
                           A  9331    ; 3248		if (move_window(fs, sect) != FR_OK)
                           A  9332    .LINE 3248
                           A  9333    
042A3B DD4E0C              A  9334    	LD	C,(IX+%C)
042A3E 0600                A  9335    	LD	B,%0
042A40 C5                  A  9336    	PUSH	BC
042A41 DD0709              A  9337    	LD	BC,(IX+%9)
042A44 C5                  A  9338    	PUSH	BC
042A45 DD0706              A  9339    	LD	BC,(IX+%6)
042A48 C5                  A  9340    	PUSH	BC
042A49 CD D7 10 04         A  9341    	CALL	_move_window
042A4D C1                  A  9342    	POP	BC
042A4E C1                  A  9343    	POP	BC
042A4F C1                  A  9344    	POP	BC
042A50 CD 07 46 04         A  9345    	CALL	__icmpzero
042A54 28 08               A  9346    	JR	Z,L_420
042A56 21040000            A  9347    	LD	HL,4
042A5A C3 F4 2B 04         A  9348    	JR	L_443
042A5E                     A  9349    L_420:
                           A  9350    ; 3249		sign = ld_word(fs->win + BS_55AA);
                           A  9351    .LINE 3249
                           A  9352    
042A5E DD3106              A  9353    	LD	IY,(IX+%6)
042A61 ED032E              A  9354    	LEA	BC,IY+%2E
042A64 DD0FF9              A  9355    	LD	(IX+%FFFFFFF9),BC
042A67 DD0FEF              A  9356    	LD	(IX+%FFFFFFEF),BC
042A6A 01FE0100            A  9357    	LD	BC,510
042A6E DD27F9              A  9358    	LD	HL,(IX+%FFFFFFF9)
042A71 09                  A  9359    	ADD	HL,BC
042A72 E5                  A  9360    	PUSH	HL
042A73 CD 7A 0E 04         A  9361    	CALL	_ld_word
042A77 C1                  A  9362    	POP	BC
042A78 DD75F5              A  9363    	LD	(IX+%FFFFFFF5),L
042A7B DD74F6              A  9364    	LD	(IX+%FFFFFFF6),H
                           A  9365    ; 3250	#if FF_FS_EXFAT
                           A  9366    ; 3251		if (sign == 0xAA55 && !memcmp(fs->w
                           A  9367    ; 3252	#endif
                           A  9368    ; 3253		b = fs->win[BS_JmpBoot];
                           A  9369    .LINE 3253
                           A  9370    
042A7E DD27F9              A  9371    	LD	HL,(IX+%FFFFFFF9)
042A81 7E                  A  9372    	LD	A,(HL)
042A82 DD77FC              A  9373    	LD	(IX+%FFFFFFFC),A
                           A  9374    ; 3254		if (b == 0xEB || b == 0xE9 || b == 
                           A  9375    .LINE 3254
                           A  9376    
042A85 FEEB                A  9377    	CP	A,%EB
042A87 28 10               A  9378    	JR	Z,L_437
042A89 DD7EFC              A  9379    	LD	A,(IX+%FFFFFFFC)
042A8C FEE9                A  9380    	CP	A,%E9
042A8E 28 09               A  9381    	JR	Z,L_437
042A90 DD7EFC              A  9382    	LD	A,(IX+%FFFFFFFC)
042A93 FEE8                A  9383    	CP	A,%E8
042A95 C2 D4 2B 04         A  9384    	JR	NZ,L_442
042A99                     A  9385    L_437:
                           A  9386    ; 3255			if (sign == 0xAA55 && !memcmp(f
                           A  9387    .LINE 3255
                           A  9388    
042A99 490155AA            A  9389    	LD.LIS	BC,43605
042A9D DD27F5              A  9390    	LD	HL,(IX+%FFFFFFF5)
042AA0 B7                  A  9391    	OR	A,A
042AA1 40ED42              A  9392    	SBC.SIS	HL,BC
042AA4 20 2B               A  9393    	JR	NZ,L_425
042AA6 DD07F9              A  9394    	LD	BC,(IX+%FFFFFFF9)
042AA9 DD0FEF              A  9395    	LD	(IX+%FFFFFFEF),BC
042AAC 01080000            A  9396    	LD	BC,8
042AB0 C5                  A  9397    	PUSH	BC
042AB1 01 7C 48 04         A  9398    	LD	BC,L__220
042AB5 C5                  A  9399    	PUSH	BC
042AB6 DD31F9              A  9400    	LD	IY,(IX+%FFFFFFF9)
042AB9 ED0352              A  9401    	LEA	BC,IY+%52
042ABC C5                  A  9402    	PUSH	BC
042ABD CD CB 45 04         A  9403    	CALL	_memcmp
042AC1 C1                  A  9404    	POP	BC
042AC2 C1                  A  9405    	POP	BC
042AC3 C1                  A  9406    	POP	BC
042AC4 CD 07 46 04         A  9407    	CALL	__icmpzero
042AC8 20 07               A  9408    	JR	NZ,L_425
                           A  9409    ; 3256				return 0;	/* It is an FAT
                           A  9410    .LINE 3256
                           A  9411    
042ACA B7                  A  9412    	OR	A,A
042ACB ED62                A  9413    	SBC	HL,HL
042ACD C3 F4 2B 04         A  9414    	JR	L_443
                           A  9415    ; 3257			}
042AD1                     A  9416    L_425:
                           A  9417    .LINE 3257
                           A  9418    
                           A  9419    ; 3258			/* FAT volumes formatted with e
                           A  9420    ; 3259			w = ld_word(fs->win + BPB_BytsP
                           A  9421    .LINE 3259
                           A  9422    
042AD1 DD07EF              A  9423    	LD	BC,(IX+%FFFFFFEF)
042AD4 DD0FFD              A  9424    	LD	(IX+%FFFFFFFD),BC
042AD7 DD31FD              A  9425    	LD	IY,(IX+%FFFFFFFD)
042ADA ED030B              A  9426    	LEA	BC,IY+%B
042ADD C5                  A  9427    	PUSH	BC
042ADE CD 7A 0E 04         A  9428    	CALL	_ld_word
042AE2 C1                  A  9429    	POP	BC
042AE3 DD75F7              A  9430    	LD	(IX+%FFFFFFF7),L
042AE6 DD74F8              A  9431    	LD	(IX+%FFFFFFF8),H
                           A  9432    ; 3260			b = fs->win[BPB_SecPerClus];
                           A  9433    .LINE 3260
                           A  9434    
042AE9 DD31FD              A  9435    	LD	IY,(IX+%FFFFFFFD)
042AEC ED230D              A  9436    	LEA	HL,IY+%D
042AEF 7E                  A  9437    	LD	A,(HL)
042AF0 DD77FC              A  9438    	LD	(IX+%FFFFFFFC),A
                           A  9439    ; 3261			if ((w & (w - 1)) == 0 && w >= 
                           A  9440    .LINE 3261
                           A  9441    
042AF3 DD07F7              A  9442    	LD	BC,(IX+%FFFFFFF7)
042AF6 CD 95 44 04         A  9443    	CALL	__stoiu
042AFA 2B                  A  9444    	DEC	HL
042AFB DD07F7              A  9445    	LD	BC,(IX+%FFFFFFF7)
042AFE CD FE 45 04         A  9446    	CALL	__sand
042B02 CD FA 46 04         A  9447    	CALL	__scmpzero
042B06 C2 D4 2B 04         A  9448    	JR	NZ,L_442
042B0A 49010002            A  9449    	LD.LIS	BC,512
042B0E DD27F7              A  9450    	LD	HL,(IX+%FFFFFFF7)
042B11 B7                  A  9451    	OR	A,A
042B12 40ED42              A  9452    	SBC.SIS	HL,BC
042B15 DA D4 2B 04         A  9453    	JR	C,L_442
                           A  9454    ; 3262				&& b != 0 && (b & (b - 1)) 
                           A  9455    .LINE 3262
                           A  9456    
042B19 DD07F7              A  9457    	LD	BC,(IX+%FFFFFFF7)
042B1C 49210002            A  9458    	LD.LIS	HL,512
042B20 B7                  A  9459    	OR	A,A
042B21 40ED42              A  9460    	SBC.SIS	HL,BC
042B24 DA D4 2B 04         A  9461    	JR	C,L_442
042B28 DD7EFC              A  9462    	LD	A,(IX+%FFFFFFFC)
042B2B B7                  A  9463    	OR	A,A
042B2C CA D4 2B 04         A  9464    	JR	Z,L_442
                           A  9465    ; 3263				&& ld_word(fs->win + BPB_Rs
                           A  9466    .LINE 3263
                           A  9467    
042B30 DD7EFC              A  9468    	LD	A,(IX+%FFFFFFFC)
042B33 B7ED62              A  9469    	UEXT	HL
042B36 6F                  A  9470    	LD	L,A
042B37 2B                  A  9471    	DEC	HL
042B38 7D                  A  9472    	LD	A,L
042B39 DDA6FC              A  9473    	AND	A,(IX+%FFFFFFFC)
042B3C C2 D4 2B 04         A  9474    	JR	NZ,L_442
                           A  9475    ; 3264				&& (UINT)fs->win[BPB_NumFAT
                           A  9476    .LINE 3264
                           A  9477    
042B40 DD31FD              A  9478    	LD	IY,(IX+%FFFFFFFD)
042B43 ED030E              A  9479    	LEA	BC,IY+%E
042B46 C5                  A  9480    	PUSH	BC
042B47 CD 7A 0E 04         A  9481    	CALL	_ld_word
042B4B C1                  A  9482    	POP	BC
042B4C CD FA 46 04         A  9483    	CALL	__scmpzero
042B50 CA D4 2B 04         A  9484    	JR	Z,L_442
                           A  9485    ; 3265				&& ld_word(fs->win + BPB_Ro
                           A  9486    .LINE 3265
                           A  9487    
042B54 DD31FD              A  9488    	LD	IY,(IX+%FFFFFFFD)
042B57 ED2310              A  9489    	LEA	HL,IY+%10
042B5A 7E                  A  9490    	LD	A,(HL)
042B5B B7ED62              A  9491    	UEXT	HL
042B5E 6F                  A  9492    	LD	L,A
042B5F E5C1                A  9493    	LD	BC,HL
042B61 0B                  A  9494    	DEC	BC
042B62 21010000            A  9495    	LD	HL,1
042B66 B7                  A  9496    	OR	A,A
042B67 ED42                A  9497    	SBC	HL,BC
042B69 38 69               A  9498    	JR	C,L_442
                           A  9499    ; 3266				&& (ld_word(fs->win + BPB_T
                           A  9500    .LINE 3266
                           A  9501    
042B6B DD31FD              A  9502    	LD	IY,(IX+%FFFFFFFD)
042B6E ED0311              A  9503    	LEA	BC,IY+%11
042B71 C5                  A  9504    	PUSH	BC
042B72 CD 7A 0E 04         A  9505    	CALL	_ld_word
042B76 C1                  A  9506    	POP	BC
042B77 CD FA 46 04         A  9507    	CALL	__scmpzero
042B7B 28 57               A  9508    	JR	Z,L_442
042B7D DD07FD              A  9509    	LD	BC,(IX+%FFFFFFFD)
042B80 DD0FEC              A  9510    	LD	(IX+%FFFFFFEC),BC
042B83 DD31FD              A  9511    	LD	IY,(IX+%FFFFFFFD)
042B86 ED0313              A  9512    	LEA	BC,IY+%13
042B89 C5                  A  9513    	PUSH	BC
042B8A CD 7A 0E 04         A  9514    	CALL	_ld_word
042B8E C1                  A  9515    	POP	BC
042B8F E5C1                A  9516    	LD	BC,HL
042B91 CD 95 44 04         A  9517    	CALL	__stoiu
042B95 01800000            A  9518    	LD	BC,128
042B99 B7                  A  9519    	OR	A,A
042B9A ED42                A  9520    	SBC	HL,BC
042B9C F2 BD 2B 04         A  9521    	JP	P,L_435
042BA0 DD07FD              A  9522    	LD	BC,(IX+%FFFFFFFD)
042BA3 DD0FEC              A  9523    	LD	(IX+%FFFFFFEC),BC
042BA6 DD31FD              A  9524    	LD	IY,(IX+%FFFFFFFD)
042BA9 ED0320              A  9525    	LEA	BC,IY+%20
042BAC C5                  A  9526    	PUSH	BC
042BAD CD B6 0E 04         A  9527    	CALL	_ld_dword
042BB1 C1                  A  9528    	POP	BC
042BB2 01000001            A  9529    	LD	BC,65536
042BB6 AF                  A  9530    	XOR	A,A
042BB7 CD AA 46 04         A  9531    	CALL	__lcmpu
042BBB 38 17               A  9532    	JR	C,L_442
                           A  9533    ; 3267				&& ld_word(fs->win + BPB_FA
042BBD                     A  9534    L_435:
                           A  9535    .LINE 3267
                           A  9536    
042BBD DD31EC              A  9537    	LD	IY,(IX+%FFFFFFEC)
042BC0 ED0316              A  9538    	LEA	BC,IY+%16
042BC3 C5                  A  9539    	PUSH	BC
042BC4 CD 7A 0E 04         A  9540    	CALL	_ld_word
042BC8 C1                  A  9541    	POP	BC
042BC9 CD FA 46 04         A  9542    	CALL	__scmpzero
042BCD 28 05               A  9543    	JR	Z,L_442
                           A  9544    ; 3268					return 0;	/* It can b
                           A  9545    .LINE 3268
                           A  9546    
042BCF B7                  A  9547    	OR	A,A
042BD0 ED62                A  9548    	SBC	HL,HL
042BD2 18 20               A  9549    	JR	L_443
                           A  9550    ; 3269			}
                           A  9551    ; 3270		}
042BD4                     A  9552    L_442:
                           A  9553    .LINE 3270
                           A  9554    
                           A  9555    ; 3271		return sign == 0xAA55 ? 2 : 3;	/* 
                           A  9556    .LINE 3271
                           A  9557    
042BD4 490155AA            A  9558    	LD.LIS	BC,43605
042BD8 DD27F5              A  9559    	LD	HL,(IX+%FFFFFFF5)
042BDB B7                  A  9560    	OR	A,A
042BDC 40ED42              A  9561    	SBC.SIS	HL,BC
042BDF 20 09               A  9562    	JR	NZ,L_440
042BE1 01020000            A  9563    	LD	BC,2
042BE5 DD0FF2              A  9564    	LD	(IX+%FFFFFFF2),BC
042BE8 18 07               A  9565    	JR	L_441
042BEA                     A  9566    L_440:
042BEA 01030000            A  9567    	LD	BC,3
042BEE DD0FF2              A  9568    	LD	(IX+%FFFFFFF2),BC
042BF1                     A  9569    L_441:
042BF1 DD27F2              A  9570    	LD	HL,(IX+%FFFFFFF2)
                           A  9571    ; 3272	}
042BF4                     A  9572    L_443:
                           A  9573    .LINE 3272
                           A  9574    
042BF4 DDF9                A  9575    	LD	SP,IX
042BF6 DDE1                A  9576    	POP	IX
042BF8 C9                  A  9577    	RET	
                           A  9578    
                           A  9579    
                           A  9580    ;**************************** _check_fs *******
                           A  9581    ;Name                         Addr/Register   S
                           A  9582    ;_memcmp                             IMPORT  --
                           A  9583    ;G_31                                 IX-20    
                           A  9584    ;G_25                                 IX-17    
                           A  9585    ;temp438                              IX-14    
                           A  9586    ;sign                                 IX-11    
                           A  9587    ;w                                     IX-9    
                           A  9588    ;G_24                                  IX-7    
                           A  9589    ;b                                     IX-4    
                           A  9590    ;G_26                                  IX-3    
                           A  9591    ;sect                                  IX+9    
                           A  9592    ;fs                                    IX+6    
                           A  9593    
                           A  9594    
                           A  9595    ; Stack Frame Size: 35 (bytes)
                           A  9596    ;       Spill Code: 0 (instruction)
                           A  9597    
                           A  9598    
                           A  9599    .ENDFUNC "check_fs",3272,"_check_fs"
                           A  9600    	SEGMENT STRSECT
04487C                     A  9601    L__220:
04487C 46415433 32202020   A  9602    	DB	"FAT32   "
044884 00                  A  9603    	DB	0
                           A  9604    	SEGMENT CODE
                           A  9605    ; 3273	
                           A  9606    ; 3274	
                           A  9607    ; 3275	/* Find an FAT volume */
                           A  9608    ; 3276	/* (It supports only generic partitioni
                           A  9609    ; 3277	
                           A  9610    ; 3278	static UINT find_volume (	/* Returns 
                           A  9611    ; 3279		FATFS* fs,		/* Filesystem objec
                           A  9612    ; 3280		UINT part		/* Partition to fin
                           A  9613    ; 3281	)
                           A  9614    ; 3282	{
042BF9                     A  9615    _find_volume:
                           A  9616    .DEFINE "_find_volume"
                           A  9617    
                           A  9618    .VALUE _find_volume
                           A  9619    
                           A  9620    .CLASS 3
                           A  9621    
                           A  9622    .TYPE 78
                           A  9623    
                           A  9624    .ENDEF
                           A  9625    
                           A  9626    .BEGFUNC "find_volume",3282,"_find_volume"
                           A  9627    
                           A  9628    .LINE 3282
                           A  9629    
                           A  9630    .DEFINE "fs"
                           A  9631    
                           A  9632    .CLASS 65
                           A  9633    
                           A  9634    .VALUE 6
                           A  9635    
                           A  9636    .TAG "NONAME0"
                           A  9637    
                           A  9638    .TYPE 40
                           A  9639    
                           A  9640    .ENDEF
                           A  9641    
                           A  9642    .DEFINE "part"
                           A  9643    
                           A  9644    .CLASS 65
                           A  9645    
                           A  9646    .VALUE 9
                           A  9647    
                           A  9648    .TYPE 14
                           A  9649    
                           A  9650    .ENDEF
                           A  9651    
                           A  9652    .DEFINE "i"
                           A  9653    
                           A  9654    .CLASS 65
                           A  9655    
                           A  9656    .VALUE -3
                           A  9657    
                           A  9658    .TYPE 14
                           A  9659    
                           A  9660    .ENDEF
                           A  9661    
                           A  9662    .DEFINE "fmt"
                           A  9663    
                           A  9664    .CLASS 65
                           A  9665    
                           A  9666    .VALUE -6
                           A  9667    
                           A  9668    .TYPE 14
                           A  9669    
                           A  9670    .ENDEF
                           A  9671    
                           A  9672    .DEFINE "mbr_pt"
                           A  9673    
                           A  9674    .CLASS 65
                           A  9675    
                           A  9676    .VALUE -31
                           A  9677    
                           A  9678    .DIM 4
                           A  9679    
                           A  9680    .TYPE 111
                           A  9681    
                           A  9682    .ENDEF
                           A  9683    
042BF9 DDE5                A  9684    	PUSH	IX
042BFB DD210000 00         A  9685    	LD	IX,0
042C00 DD39                A  9686    	ADD	IX,SP
042C02 ED22DB              A  9687    	LEA	HL,IX+%FFFFFFDB
042C05 F9                  A  9688    	LD	SP,HL
                           A  9689    ; 3283		UINT fmt, i;
                           A  9690    ; 3284		DWORD mbr_pt[4];
                           A  9691    ; 3285	
                           A  9692    ; 3286	
                           A  9693    ; 3287		fmt = check_fs(fs, 0);				
                           A  9694    .LINE 3287
                           A  9695    
042C06 01000000            A  9696    	LD	BC,0
042C0A C5                  A  9697    	PUSH	BC
042C0B C5                  A  9698    	PUSH	BC
042C0C DD0706              A  9699    	LD	BC,(IX+%6)
042C0F C5                  A  9700    	PUSH	BC
042C10 CD 1C 2A 04         A  9701    	CALL	_check_fs
042C14 C1                  A  9702    	POP	BC
042C15 C1                  A  9703    	POP	BC
042C16 C1                  A  9704    	POP	BC
042C17 DD2FFA              A  9705    	LD	(IX+%FFFFFFFA),HL
                           A  9706    ; 3288		if (fmt != 2 && (fmt >= 3 || part =
                           A  9707    .LINE 3288
                           A  9708    
042C1A 01020000            A  9709    	LD	BC,2
042C1E DD27FA              A  9710    	LD	HL,(IX+%FFFFFFFA)
042C21 B7                  A  9711    	OR	A,A
042C22 ED42                A  9712    	SBC	HL,BC
042C24 28 1C               A  9713    	JR	Z,L_453
042C26 01030000            A  9714    	LD	BC,3
042C2A DD27FA              A  9715    	LD	HL,(IX+%FFFFFFFA)
042C2D B7                  A  9716    	OR	A,A
042C2E ED42                A  9717    	SBC	HL,BC
042C30 30 09               A  9718    	JR	NC,L_446
042C32 DD2709              A  9719    	LD	HL,(IX+%9)
042C35 CD 07 46 04         A  9720    	CALL	__icmpzero
042C39 20 07               A  9721    	JR	NZ,L_453
042C3B                     A  9722    L_446:
042C3B DD27FA              A  9723    	LD	HL,(IX+%FFFFFFFA)
042C3E C3 39 2D 04         A  9724    	JR	L_468
                           A  9725    ; 3289	
                           A  9726    ; 3290		/* Sector 0 is not an FAT VBR or fo
                           A  9727    ; 3291	
                           A  9728    ; 3292	#if FF_LBA64
                           A  9729    ; 3293		if (fs->win[MBR_Table + PTE_System]
                           A  9730    ; 3294			DWORD n_ent, v_ent, ofs;
                           A  9731    ; 3295			QWORD pt_lba;
                           A  9732    ; 3296	
                           A  9733    ; 3297			if (move_window(fs, 1) != FR_OK
                           A  9734    ; 3298			if (!test_gpt_header(fs->win)) 
                           A  9735    ; 3299			n_ent = ld_dword(fs->win + GPTH
                           A  9736    ; 3300			pt_lba = ld_qword(fs->win + GPT
                           A  9737    ; 3301			for (v_ent = i = 0; i < n_ent; 
                           A  9738    ; 3302				if (move_window(fs, pt_lba 
                           A  9739    ; 3303				ofs = i * SZ_GPTE % SS(fs);
                           A  9740    ; 3304				if (!memcmp(fs->win + ofs +
                           A  9741    ; 3305					v_ent++;
                           A  9742    ; 3306					fmt = check_fs(fs, ld_q
                           A  9743    ; 3307					if (part == 0 && fmt <=
                           A  9744    ; 3308					if (part != 0 && v_ent 
                           A  9745    ; 3309				}
                           A  9746    ; 3310			}
                           A  9747    ; 3311			return 3;	/* Not found */
                           A  9748    ; 3312		}
                           A  9749    ; 3313	#endif
                           A  9750    ; 3314		if (FF_MULTI_PARTITION && part > 4)
042C42                     A  9751    L_453:
                           A  9752    .LINE 3314
                           A  9753    
                           A  9754    ; 3315		for (i = 0; i < 4; i++) {		/* 
                           A  9755    .LINE 3315
                           A  9756    
042C42 01000000            A  9757    	LD	BC,0
042C46 DD0FFD              A  9758    	LD	(IX+%FFFFFFFD),BC
042C49 18 4E               A  9759    	JR	L_452
042C4B                     A  9760    L_450:
                           A  9761    ; 3316			mbr_pt[i] = ld_dword(fs->win + 
                           A  9762    .LINE 3316
                           A  9763    
042C4B 01BE0100            A  9764    	LD	BC,446
042C4F DD3106              A  9765    	LD	IY,(IX+%6)
042C52 ED232E              A  9766    	LEA	HL,IY+%2E
042C55 09                  A  9767    	ADD	HL,BC
042C56 E5C1                A  9768    	LD	BC,HL
042C58 DD27FD              A  9769    	LD	HL,(IX+%FFFFFFFD)
042C5B 29                  A  9770    	ADD	HL,HL
042C5C 29                  A  9771    	ADD	HL,HL
042C5D 29                  A  9772    	ADD	HL,HL
042C5E 29                  A  9773    	ADD	HL,HL
042C5F 09                  A  9774    	ADD	HL,BC
042C60 E5FDE1              A  9775    	LD	IY,HL
042C63 ED0308              A  9776    	LEA	BC,IY+%8
042C66 C5                  A  9777    	PUSH	BC
042C67 CD B6 0E 04         A  9778    	CALL	_ld_dword
042C6B C1                  A  9779    	POP	BC
042C6C E5C1                A  9780    	LD	BC,HL
042C6E DD27FD              A  9781    	LD	HL,(IX+%FFFFFFFD)
042C71 29                  A  9782    	ADD	HL,HL
042C72 29                  A  9783    	ADD	HL,HL
042C73 DD0FDE              A  9784    	LD	(IX+%FFFFFFDE),BC	; spill
042C76 ED02E1              A  9785    	LEA	BC,IX+%FFFFFFE1
042C79 DD0FDB              A  9786    	LD	(IX+%FFFFFFDB),BC	; spill
042C7C DD07DE              A  9787    	LD	BC,(IX+%FFFFFFDE)	; unspill
042C7F DD0FDE              A  9788    	LD	(IX+%FFFFFFDE),BC	; spill
042C82 DD07DB              A  9789    	LD	BC,(IX+%FFFFFFDB)	; unspill
042C85 09                  A  9790    	ADD	HL,BC
042C86 DD07DE              A  9791    	LD	BC,(IX+%FFFFFFDE)	; unspill
042C89 E5FDE1              A  9792    	LD	IY,HL
042C8C FD0F00              A  9793    	LD	(IY),BC
042C8F FD7303              A  9794    	LD	(IY+%3),E
042C92 DD07FD              A  9795    	LD	BC,(IX+%FFFFFFFD)
042C95 03                  A  9796    	INC	BC
042C96 DD0FFD              A  9797    	LD	(IX+%FFFFFFFD),BC
                           A  9798    ; 3317		}
042C99                     A  9799    L_452:
                           A  9800    .LINE 3317
                           A  9801    
042C99 01040000            A  9802    	LD	BC,4
042C9D DD27FD              A  9803    	LD	HL,(IX+%FFFFFFFD)
042CA0 B7                  A  9804    	OR	A,A
042CA1 ED42                A  9805    	SBC	HL,BC
042CA3 38 A6               A  9806    	JR	C,L_450
                           A  9807    ; 3318		i = part ? part - 1 : 0;		/* 
                           A  9808    .LINE 3318
                           A  9809    
042CA5 DD2709              A  9810    	LD	HL,(IX+%9)
042CA8 CD 07 46 04         A  9811    	CALL	__icmpzero
042CAC 28 0B               A  9812    	JR	Z,L_456
042CAE DD3109              A  9813    	LD	IY,(IX+%9)
042CB1 ED33FF              A  9814    	LEA	IY,IY+%FFFFFFFF
042CB4 DD3EF7              A  9815    	LD	(IX+%FFFFFFF7),IY
042CB7 18 07               A  9816    	JR	L_457
042CB9                     A  9817    L_456:
042CB9 01000000            A  9818    	LD	BC,0
042CBD DD0FF7              A  9819    	LD	(IX+%FFFFFFF7),BC
042CC0                     A  9820    L_457:
042CC0 DD07F7              A  9821    	LD	BC,(IX+%FFFFFFF7)
042CC3 DD0FFD              A  9822    	LD	(IX+%FFFFFFFD),BC
                           A  9823    ; 3319		do {							/* 
042CC6                     A  9824    L_465:
                           A  9825    .LINE 3319
                           A  9826    
                           A  9827    ; 3320			fmt = mbr_pt[i] ? check_fs(fs, 
                           A  9828    .LINE 3320
                           A  9829    
042CC6 DD27FD              A  9830    	LD	HL,(IX+%FFFFFFFD)
042CC9 29                  A  9831    	ADD	HL,HL
042CCA 29                  A  9832    	ADD	HL,HL
042CCB E5C1                A  9833    	LD	BC,HL
042CCD ED22E1              A  9834    	LEA	HL,IX+%FFFFFFE1
042CD0 09                  A  9835    	ADD	HL,BC
042CD1 DD2FF1              A  9836    	LD	(IX+%FFFFFFF1),HL
042CD4 DD31F1              A  9837    	LD	IY,(IX+%FFFFFFF1)
042CD7 FD2700              A  9838    	LD	HL,(IY)
042CDA FD5E03              A  9839    	LD	E,(IY+%3)
042CDD CD DA 44 04         A  9840    	CALL	__lcmpzero
042CE1 28 1E               A  9841    	JR	Z,L_461
042CE3 DD31F1              A  9842    	LD	IY,(IX+%FFFFFFF1)
042CE6 FD0700              A  9843    	LD	BC,(IY)
042CE9 FD7E03              A  9844    	LD	A,(IY+%3)
042CEC 2600                A  9845    	LD	H,%0
042CEE 6F                  A  9846    	LD	L,A
042CEF E5                  A  9847    	PUSH	HL
042CF0 C5                  A  9848    	PUSH	BC
042CF1 DD0706              A  9849    	LD	BC,(IX+%6)
042CF4 C5                  A  9850    	PUSH	BC
042CF5 CD 1C 2A 04         A  9851    	CALL	_check_fs
042CF9 C1                  A  9852    	POP	BC
042CFA C1                  A  9853    	POP	BC
042CFB C1                  A  9854    	POP	BC
042CFC DD2FF4              A  9855    	LD	(IX+%FFFFFFF4),HL
042CFF 18 07               A  9856    	JR	L_462
042D01                     A  9857    L_461:
042D01 01030000            A  9858    	LD	BC,3
042D05 DD0FF4              A  9859    	LD	(IX+%FFFFFFF4),BC
042D08                     A  9860    L_462:
042D08 DD07F4              A  9861    	LD	BC,(IX+%FFFFFFF4)
042D0B DD0FFA              A  9862    	LD	(IX+%FFFFFFFA),BC
                           A  9863    ; 3321		} while (part == 0 && fmt >= 2 && +
                           A  9864    .LINE 3321
                           A  9865    
042D0E DD2709              A  9866    	LD	HL,(IX+%9)
042D11 CD 07 46 04         A  9867    	CALL	__icmpzero
042D15 20 1F               A  9868    	JR	NZ,L_467
042D17 01020000            A  9869    	LD	BC,2
042D1B DD27FA              A  9870    	LD	HL,(IX+%FFFFFFFA)
042D1E B7                  A  9871    	OR	A,A
042D1F ED42                A  9872    	SBC	HL,BC
042D21 38 13               A  9873    	JR	C,L_467
042D23 DD07FD              A  9874    	LD	BC,(IX+%FFFFFFFD)
042D26 03                  A  9875    	INC	BC
042D27 DD0FFD              A  9876    	LD	(IX+%FFFFFFFD),BC
042D2A 01040000            A  9877    	LD	BC,4
042D2E DD27FD              A  9878    	LD	HL,(IX+%FFFFFFFD)
042D31 B7                  A  9879    	OR	A,A
042D32 ED42                A  9880    	SBC	HL,BC
042D34 38 90               A  9881    	JR	C,L_465
042D36                     A  9882    L_467:
                           A  9883    ; 3322		return fmt;
                           A  9884    .LINE 3322
                           A  9885    
042D36 DD27FA              A  9886    	LD	HL,(IX+%FFFFFFFA)
                           A  9887    ; 3323	}
042D39                     A  9888    L_468:
                           A  9889    .LINE 3323
                           A  9890    
042D39 DDF9                A  9891    	LD	SP,IX
042D3B DDE1                A  9892    	POP	IX
042D3D C9                  A  9893    	RET	
                           A  9894    
                           A  9895    
                           A  9896    ;**************************** _find_volume ****
                           A  9897    ;Name                         Addr/Register   S
                           A  9898    ;mbr_pt                               IX-31    
                           A  9899    ;G_32                                 IX-15    
                           A  9900    ;temp459                              IX-12    
                           A  9901    ;temp454                               IX-9    
                           A  9902    ;fmt                                   IX-6    
                           A  9903    ;i                                     IX-3    
                           A  9904    ;part                                  IX+9    
                           A  9905    ;fs                                    IX+6    
                           A  9906    
                           A  9907    
                           A  9908    ; Stack Frame Size: 49 (bytes)
                           A  9909    ;       Spill Code: 0 (instruction)
                           A  9910    
                           A  9911    
                           A  9912    .ENDFUNC "find_volume",3323,"_find_volume"
                           A  9913    ; 3324	
                           A  9914    ; 3325	
                           A  9915    ; 3326	
                           A  9916    ; 3327	
                           A  9917    ; 3328	/*-------------------------------------
                           A  9918    ; 3329	/* Determine logical drive number and m
                           A  9919    ; 3330	/*-------------------------------------
                           A  9920    ; 3331	
                           A  9921    ; 3332	static FRESULT mount_volume (	/* FR_O
                           A  9922    ; 3333		const TCHAR** path,			/* Poin
                           A  9923    ; 3334		FATFS** rfs,				/* Poin
                           A  9924    ; 3335		BYTE mode					/* !=0:
                           A  9925    ; 3336	)
                           A  9926    ; 3337	{
042D3E                     A  9927    _mount_volume:
                           A  9928    .DEFINE "_mount_volume"
                           A  9929    
                           A  9930    .VALUE _mount_volume
                           A  9931    
                           A  9932    .CLASS 3
                           A  9933    
                           A  9934    .TYPE 68
                           A  9935    
                           A  9936    .ENDEF
                           A  9937    
                           A  9938    .BEGFUNC "mount_volume",3337,"_mount_volume"
                           A  9939    
                           A  9940    .LINE 3337
                           A  9941    
                           A  9942    .DEFINE "path"
                           A  9943    
                           A  9944    .CLASS 65
                           A  9945    
                           A  9946    .VALUE 6
                           A  9947    
                           A  9948    .TYPE 1570
                           A  9949    
                           A  9950    .ENDEF
                           A  9951    
                           A  9952    .DEFINE "rfs"
                           A  9953    
                           A  9954    .CLASS 65
                           A  9955    
                           A  9956    .VALUE 9
                           A  9957    
                           A  9958    .TAG "NONAME0"
                           A  9959    
                           A  9960    .TYPE 296
                           A  9961    
                           A  9962    .ENDEF
                           A  9963    
                           A  9964    .DEFINE "mode"
                           A  9965    
                           A  9966    .CLASS 65
                           A  9967    
                           A  9968    .VALUE 12
                           A  9969    
                           A  9970    .TYPE 12
                           A  9971    
                           A  9972    .ENDEF
                           A  9973    
                           A  9974    .DEFINE "fs"
                           A  9975    
                           A  9976    .CLASS 65
                           A  9977    
                           A  9978    .VALUE -3
                           A  9979    
                           A  9980    .TAG "NONAME0"
                           A  9981    
                           A  9982    .TYPE 40
                           A  9983    
                           A  9984    .ENDEF
                           A  9985    
                           A  9986    .DEFINE "fmt"
                           A  9987    
                           A  9988    .CLASS 65
                           A  9989    
                           A  9990    .VALUE -6
                           A  9991    
                           A  9992    .TYPE 14
                           A  9993    
                           A  9994    .ENDEF
                           A  9995    
                           A  9996    .DEFINE "fasize"
                           A  9997    
                           A  9998    .CLASS 65
                           A  9999    
                           A 10000    .VALUE -10
                           A 10001    
                           A 10002    .TYPE 15
                           A 10003    
                           A 10004    .ENDEF
                           A 10005    
                           A 10006    .DEFINE "stat"
                           A 10007    
                           A 10008    .CLASS 65
                           A 10009    
                           A 10010    .VALUE -12
                           A 10011    
                           A 10012    .TYPE 12
                           A 10013    
                           A 10014    .ENDEF
                           A 10015    
                           A 10016    .DEFINE "nclst"
                           A 10017    
                           A 10018    .CLASS 65
                           A 10019    
                           A 10020    .VALUE -22
                           A 10021    
                           A 10022    .TYPE 15
                           A 10023    
                           A 10024    .ENDEF
                           A 10025    
                           A 10026    .DEFINE "nrsv"
                           A 10027    
                           A 10028    .CLASS 65
                           A 10029    
                           A 10030    .VALUE -24
                           A 10031    
                           A 10032    .TYPE 13
                           A 10033    
                           A 10034    .ENDEF
                           A 10035    
                           A 10036    .DEFINE "vol"
                           A 10037    
                           A 10038    .CLASS 65
                           A 10039    
                           A 10040    .VALUE -30
                           A 10041    
                           A 10042    .TYPE 4
                           A 10043    
                           A 10044    .ENDEF
                           A 10045    
                           A 10046    .DEFINE "tsect"
                           A 10047    
                           A 10048    .CLASS 65
                           A 10049    
                           A 10050    .VALUE -34
                           A 10051    
                           A 10052    .TYPE 15
                           A 10053    
                           A 10054    .ENDEF
                           A 10055    
                           A 10056    .DEFINE "sysect"
                           A 10057    
                           A 10058    .CLASS 65
                           A 10059    
                           A 10060    .VALUE -38
                           A 10061    
                           A 10062    .TYPE 15
                           A 10063    
                           A 10064    .ENDEF
                           A 10065    
                           A 10066    .DEFINE "bsect"
                           A 10067    
                           A 10068    .CLASS 65
                           A 10069    
                           A 10070    .VALUE -45
                           A 10071    
                           A 10072    .TYPE 15
                           A 10073    
                           A 10074    .ENDEF
                           A 10075    
                           A 10076    .DEFINE "szbfat"
                           A 10077    
                           A 10078    .CLASS 65
                           A 10079    
                           A 10080    .VALUE -56
                           A 10081    
                           A 10082    .TYPE 15
                           A 10083    
                           A 10084    .ENDEF
                           A 10085    
042D3E DDE5                A 10086    	PUSH	IX
042D40 DD210000 00         A 10087    	LD	IX,0
042D45 DD39                A 10088    	ADD	IX,SP
042D47 ED22B8              A 10089    	LEA	HL,IX+%FFFFFFB8
042D4A F9                  A 10090    	LD	SP,HL
                           A 10091    ; 3338		int vol;
                           A 10092    ; 3339		DSTATUS stat;
                           A 10093    ; 3340		LBA_t bsect;
                           A 10094    ; 3341		DWORD tsect, sysect, fasize, nclst,
                           A 10095    ; 3342		WORD nrsv;
                           A 10096    ; 3343		FATFS *fs;
                           A 10097    ; 3344		UINT fmt;
                           A 10098    ; 3345	
                           A 10099    ; 3346	
                           A 10100    ; 3347		/* Get logical drive number */
                           A 10101    ; 3348		*rfs = 0;
                           A 10102    .LINE 3348
                           A 10103    
042D4B DD2709              A 10104    	LD	HL,(IX+%9)
042D4E 01000000            A 10105    	LD	BC,0
042D52 ED0F                A 10106    	LD	(HL),BC
                           A 10107    ; 3349		vol = get_ldnumber(path);
                           A 10108    .LINE 3349
                           A 10109    
042D54 DD0706              A 10110    	LD	BC,(IX+%6)
042D57 C5                  A 10111    	PUSH	BC
042D58 CD 33 29 04         A 10112    	CALL	_get_ldnumber
042D5C C1                  A 10113    	POP	BC
042D5D DD2FE2              A 10114    	LD	(IX+%FFFFFFE2),HL
                           A 10115    ; 3350		if (vol < 0) return FR_INVALID_DRIV
                           A 10116    .LINE 3350
                           A 10117    
042D60 CD 07 46 04         A 10118    	CALL	__icmpzero
042D64 CD A9 43 04         A 10119    	CALL	__setflag
042D68 F2 74 2D 04         A 10120    	JP	P,L_470
042D6C 210B0000            A 10121    	LD	HL,11
042D70 C3 81 32 04         A 10122    	JR	L_529
042D74                     A 10123    L_470:
                           A 10124    ; 3351	
                           A 10125    ; 3352		/* Check if the filesystem object i
                           A 10126    ; 3353		fs = FatFs[vol];					
                           A 10127    .LINE 3353
                           A 10128    
042D74 DD27E2              A 10129    	LD	HL,(IX+%FFFFFFE2)
042D77 E5C1                A 10130    	LD	BC,HL
042D79 29                  A 10131    	ADD	HL,HL
042D7A 09                  A 10132    	ADD	HL,BC
042D7B 01 B3 4A 04         A 10133    	LD	BC,_FatFs
042D7F 09                  A 10134    	ADD	HL,BC
042D80 ED07                A 10135    	LD	BC,(HL)
042D82 DD0FFD              A 10136    	LD	(IX+%FFFFFFFD),BC
                           A 10137    ; 3354		if (!fs) return FR_NOT_ENABLED;		
                           A 10138    .LINE 3354
                           A 10139    
042D85 C5E1                A 10140    	LD	HL,BC
042D87 CD 07 46 04         A 10141    	CALL	__icmpzero
042D8B 20 08               A 10142    	JR	NZ,L_472
042D8D 210C0000            A 10143    	LD	HL,12
042D91 C3 81 32 04         A 10144    	JR	L_529
042D95                     A 10145    L_472:
                           A 10146    ; 3355	#if FF_FS_REENTRANT
                           A 10147    ; 3356		if (!lock_fs(fs)) return FR_TIMEOUT
                           A 10148    ; 3357	#endif
                           A 10149    ; 3358		*rfs = fs;							
                           A 10150    .LINE 3358
                           A 10151    
042D95 DD2709              A 10152    	LD	HL,(IX+%9)
042D98 DD07FD              A 10153    	LD	BC,(IX+%FFFFFFFD)
042D9B ED0F                A 10154    	LD	(HL),BC
                           A 10155    ; 3359	
                           A 10156    ; 3360		mode &= (BYTE)~FA_READ;				
                           A 10157    ; 3361		if (fs->fs_type != 0) {				
                           A 10158    .LINE 3361
                           A 10159    
042D9D DD31FD              A 10160    	LD	IY,(IX+%FFFFFFFD)
042DA0 FD7E00              A 10161    	LD	A,(IY+%0)
042DA3 B7                  A 10162    	OR	A,A
042DA4 28 1C               A 10163    	JR	Z,L_477
                           A 10164    ; 3362			stat = disk_status(fs->pdrv);
                           A 10165    .LINE 3362
                           A 10166    
042DA6 DD31FD              A 10167    	LD	IY,(IX+%FFFFFFFD)
042DA9 FD4E01              A 10168    	LD	C,(IY+%1)
042DAC 0600                A 10169    	LD	B,%0
042DAE C5                  A 10170    	PUSH	BC
042DAF CD F3 3D 04         A 10171    	CALL	_disk_status
042DB3 C1                  A 10172    	POP	BC
042DB4 DD77F4              A 10173    	LD	(IX+%FFFFFFF4),A
                           A 10174    ; 3363			if (!(stat & STA_NOINIT)) {		
                           A 10175    .LINE 3363
                           A 10176    
042DB7 E601                A 10177    	AND	A,%1
042DB9 20 07               A 10178    	JR	NZ,L_477
                           A 10179    ; 3364				if (!FF_FS_READONLY && mode
                           A 10180    ; 3365					return FR_WRITE_PROTECT
                           A 10181    ; 3366				}
                           A 10182    ; 3367				return FR_OK;				
                           A 10183    .LINE 3367
                           A 10184    
042DBB B7                  A 10185    	OR	A,A
042DBC ED62                A 10186    	SBC	HL,HL
042DBE C3 81 32 04         A 10187    	JR	L_529
                           A 10188    ; 3368			}
                           A 10189    ; 3369		}
042DC2                     A 10190    L_477:
                           A 10191    .LINE 3369
                           A 10192    
                           A 10193    ; 3370	
                           A 10194    ; 3371		/* The filesystem object is not val
                           A 10195    ; 3372		/* Following code attempts to mount
                           A 10196    ; 3373	
                           A 10197    ; 3374		fs->fs_type = 0;					
                           A 10198    .LINE 3374
                           A 10199    
042DC2 DD31FD              A 10200    	LD	IY,(IX+%FFFFFFFD)
042DC5 FD360000            A 10201    	LD	(IY+%0),%0
                           A 10202    ; 3375		fs->pdrv = LD2PD(vol);				
                           A 10203    .LINE 3375
                           A 10204    
042DC9 DD7EE2              A 10205    	LD	A,(IX+%FFFFFFE2)
042DCC FD7701              A 10206    	LD	(IY+%1),A
                           A 10207    ; 3376		stat = disk_initialize(fs->pdrv);	
                           A 10208    .LINE 3376
                           A 10209    
042DCF FD4E01              A 10210    	LD	C,(IY+%1)
042DD2 0600                A 10211    	LD	B,%0
042DD4 C5                  A 10212    	PUSH	BC
042DD5 CD 02 3E 04         A 10213    	CALL	_disk_initialize
042DD9 C1                  A 10214    	POP	BC
042DDA DD77F4              A 10215    	LD	(IX+%FFFFFFF4),A
                           A 10216    ; 3377		if (stat & STA_NOINIT) { 			
                           A 10217    .LINE 3377
                           A 10218    
042DDD E601                A 10219    	AND	A,%1
042DDF 28 08               A 10220    	JR	Z,L_481
                           A 10221    ; 3378			return FR_NOT_READY;			
                           A 10222    .LINE 3378
                           A 10223    
042DE1 21030000            A 10224    	LD	HL,3
042DE5 C3 81 32 04         A 10225    	JR	L_529
                           A 10226    ; 3379		}
                           A 10227    .LINE 3379
                           A 10228    
                           A 10229    ; 3380		if (!FF_FS_READONLY && mode && (sta
                           A 10230    ; 3381			return FR_WRITE_PROTECTED;
                           A 10231    ; 3382		}
042DE9                     A 10232    L_481:
                           A 10233    .LINE 3382
                           A 10234    
                           A 10235    ; 3383	#if FF_MAX_SS != FF_MIN_SS				
                           A 10236    ; 3384		if (disk_ioctl(fs->pdrv, GET_SECTOR
                           A 10237    ; 3385		if (SS(fs) > FF_MAX_SS || SS(fs) < 
                           A 10238    ; 3386	#endif
                           A 10239    ; 3387	
                           A 10240    ; 3388		/* Find an FAT volume on the drive 
                           A 10241    ; 3389		fmt = find_volume(fs, LD2PT(vol));
                           A 10242    .LINE 3389
                           A 10243    
042DE9 01000000            A 10244    	LD	BC,0
042DED C5                  A 10245    	PUSH	BC
042DEE DD07FD              A 10246    	LD	BC,(IX+%FFFFFFFD)
042DF1 C5                  A 10247    	PUSH	BC
042DF2 CD F9 2B 04         A 10248    	CALL	_find_volume
042DF6 C1                  A 10249    	POP	BC
042DF7 C1                  A 10250    	POP	BC
042DF8 DD2FFA              A 10251    	LD	(IX+%FFFFFFFA),HL
                           A 10252    ; 3390		if (fmt == 4) return FR_DISK_ERR;	
                           A 10253    .LINE 3390
                           A 10254    
042DFB 01040000            A 10255    	LD	BC,4
042DFF DD27FA              A 10256    	LD	HL,(IX+%FFFFFFFA)
042E02 B7                  A 10257    	OR	A,A
042E03 ED42                A 10258    	SBC	HL,BC
042E05 20 08               A 10259    	JR	NZ,L_484
042E07 21010000            A 10260    	LD	HL,1
042E0B C3 81 32 04         A 10261    	JR	L_529
042E0F                     A 10262    L_484:
                           A 10263    ; 3391		if (fmt >= 2) return FR_NO_FILESYST
                           A 10264    .LINE 3391
                           A 10265    
042E0F 01020000            A 10266    	LD	BC,2
042E13 DD27FA              A 10267    	LD	HL,(IX+%FFFFFFFA)
042E16 B7                  A 10268    	OR	A,A
042E17 ED42                A 10269    	SBC	HL,BC
042E19 38 08               A 10270    	JR	C,L_485
042E1B 210D0000            A 10271    	LD	HL,13
042E1F C3 81 32 04         A 10272    	JR	L_529
042E23                     A 10273    L_485:
                           A 10274    ; 3392		bsect = fs->winsect;				
                           A 10275    .LINE 3392
                           A 10276    
042E23 DD31FD              A 10277    	LD	IY,(IX+%FFFFFFFD)
042E26 FD072A              A 10278    	LD	BC,(IY+%2A)
042E29 FD7E2D              A 10279    	LD	A,(IY+%2D)
042E2C DD0FD3              A 10280    	LD	(IX+%FFFFFFD3),BC
042E2F DD77D6              A 10281    	LD	(IX+%FFFFFFD6),A
                           A 10282    ; 3393	
                           A 10283    ; 3394		/* An FAT volume is found (bsect). 
                           A 10284    ; 3395	
                           A 10285    ; 3396	#if FF_FS_EXFAT
                           A 10286    ; 3397		if (fmt == 1) {
                           A 10287    ; 3398			QWORD maxlba;
                           A 10288    ; 3399			DWORD so, cv, bcl, i;
                           A 10289    ; 3400	
                           A 10290    ; 3401			for (i = BPB_ZeroedEx; i < BPB_
                           A 10291    ; 3402			if (i < BPB_ZeroedEx + 53) retu
                           A 10292    ; 3403	
                           A 10293    ; 3404			if (ld_word(fs->win + BPB_FSVer
                           A 10294    ; 3405	
                           A 10295    ; 3406			if (1 << fs->win[BPB_BytsPerSec
                           A 10296    ; 3407				return FR_NO_FILESYSTEM;
                           A 10297    ; 3408			}
                           A 10298    ; 3409	
                           A 10299    ; 3410			maxlba = ld_qword(fs->win + BPB
                           A 10300    ; 3411			if (!FF_LBA64 && maxlba >= 0x10
                           A 10301    ; 3412	
                           A 10302    ; 3413			fs->fsize = ld_dword(fs->win + 
                           A 10303    ; 3414	
                           A 10304    ; 3415			fs->n_fats = fs->win[BPB_NumFAT
                           A 10305    ; 3416			if (fs->n_fats != 1) return FR_
                           A 10306    ; 3417	
                           A 10307    ; 3418			fs->csize = 1 << fs->win[BPB_Se
                           A 10308    ; 3419			if (fs->csize == 0)	return FR_N
                           A 10309    ; 3420	
                           A 10310    ; 3421			nclst = ld_dword(fs->win + BPB_
                           A 10311    ; 3422			if (nclst > MAX_EXFAT) return F
                           A 10312    ; 3423			fs->n_fatent = nclst + 2;
                           A 10313    ; 3424	
                           A 10314    ; 3425			/* Boundaries and Limits */
                           A 10315    ; 3426			fs->volbase = bsect;
                           A 10316    ; 3427			fs->database = bsect + ld_dword
                           A 10317    ; 3428			fs->fatbase = bsect + ld_dword(
                           A 10318    ; 3429			if (maxlba < (QWORD)fs->databas
                           A 10319    ; 3430			fs->dirbase = ld_dword(fs->win 
                           A 10320    ; 3431	
                           A 10321    ; 3432			/* Get bitmap location and chec
                           A 10322    ; 3433			so = i = 0;
                           A 10323    ; 3434			for (;;) {	/* Find the bitmap 
                           A 10324    ; 3435				if (i == 0) {
                           A 10325    ; 3436					if (so >= fs->csize) re
                           A 10326    ; 3437					if (move_window(fs, cls
                           A 10327    ; 3438					so++;
                           A 10328    ; 3439				}
                           A 10329    ; 3440				if (fs->win[i] == ET_BITMAP
                           A 10330    ; 3441				i = (i + SZDIRE) % SS(fs);	
                           A 10331    ; 3442			}
                           A 10332    ; 3443			bcl = ld_dword(fs->win + i + 20
                           A 10333    ; 3444			if (bcl < 2 || bcl >= fs->n_fat
                           A 10334    ; 3445			fs->bitbase = fs->database + fs
                           A 10335    ; 3446			for (;;) {	/* Check if bitmap 
                           A 10336    ; 3447				if (move_window(fs, fs->fat
                           A 10337    ; 3448				cv = ld_dword(fs->win + bcl
                           A 10338    ; 3449				if (cv == 0xFFFFFFFF) break
                           A 10339    ; 3450				if (cv != ++bcl) return FR_
                           A 10340    ; 3451			}
                           A 10341    ; 3452	
                           A 10342    ; 3453	#if !FF_FS_READONLY
                           A 10343    ; 3454			fs->last_clst = fs->free_clst =
                           A 10344    ; 3455	#endif
                           A 10345    ; 3456			fmt = FS_EXFAT;			/* FAT 
                           A 10346    ; 3457		} else
                           A 10347    ; 3458	#endif	/* FF_FS_EXFAT */
                           A 10348    ; 3459		{
                           A 10349    ; 3460			if (ld_word(fs->win + BPB_BytsP
                           A 10350    .LINE 3460
                           A 10351    
042E32 ED032E              A 10352    	LEA	BC,IY+%2E
042E35 DD0FEF              A 10353    	LD	(IX+%FFFFFFEF),BC
042E38 DD31EF              A 10354    	LD	IY,(IX+%FFFFFFEF)
042E3B ED030B              A 10355    	LEA	BC,IY+%B
042E3E C5                  A 10356    	PUSH	BC
042E3F CD 7A 0E 04         A 10357    	CALL	_ld_word
042E43 C1                  A 10358    	POP	BC
042E44 E5C1                A 10359    	LD	BC,HL
042E46 CD 95 44 04         A 10360    	CALL	__stoiu
042E4A 01000200            A 10361    	LD	BC,512
042E4E B7                  A 10362    	OR	A,A
042E4F ED42                A 10363    	SBC	HL,BC
042E51 28 08               A 10364    	JR	Z,L_487
042E53 210D0000            A 10365    	LD	HL,13
042E57 C3 81 32 04         A 10366    	JR	L_529
042E5B                     A 10367    L_487:
                           A 10368    ; 3461	
                           A 10369    ; 3462			fasize = ld_word(fs->win + BPB_
                           A 10370    .LINE 3462
                           A 10371    
042E5B DD31EF              A 10372    	LD	IY,(IX+%FFFFFFEF)
042E5E ED0316              A 10373    	LEA	BC,IY+%16
042E61 C5                  A 10374    	PUSH	BC
042E62 CD 7A 0E 04         A 10375    	CALL	_ld_word
042E66 C1                  A 10376    	POP	BC
042E67 E5C1                A 10377    	LD	BC,HL
042E69 CD 95 44 04         A 10378    	CALL	__stoiu
042E6D AF                  A 10379    	XOR	A,A
042E6E DD2FF6              A 10380    	LD	(IX+%FFFFFFF6),HL
042E71 DD77F9              A 10381    	LD	(IX+%FFFFFFF9),A
                           A 10382    ; 3463			if (fasize == 0) fasize = ld_dw
                           A 10383    .LINE 3463
                           A 10384    
042E74 DD27F6              A 10385    	LD	HL,(IX+%FFFFFFF6)
042E77 DD5EF9              A 10386    	LD	E,(IX+%FFFFFFF9)
042E7A CD DA 44 04         A 10387    	CALL	__lcmpzero
042E7E 20 12               A 10388    	JR	NZ,L_489
042E80 DD31EF              A 10389    	LD	IY,(IX+%FFFFFFEF)
042E83 ED0324              A 10390    	LEA	BC,IY+%24
042E86 C5                  A 10391    	PUSH	BC
042E87 CD B6 0E 04         A 10392    	CALL	_ld_dword
042E8B C1                  A 10393    	POP	BC
042E8C DD2FF6              A 10394    	LD	(IX+%FFFFFFF6),HL
042E8F DD73F9              A 10395    	LD	(IX+%FFFFFFF9),E
042E92                     A 10396    L_489:
                           A 10397    ; 3464			fs->fsize = fasize;
                           A 10398    .LINE 3464
                           A 10399    
042E92 DD07F6              A 10400    	LD	BC,(IX+%FFFFFFF6)
042E95 DD7EF9              A 10401    	LD	A,(IX+%FFFFFFF9)
042E98 DD31FD              A 10402    	LD	IY,(IX+%FFFFFFFD)
042E9B FD0F16              A 10403    	LD	(IY+%16),BC
042E9E FD7719              A 10404    	LD	(IY+%19),A
                           A 10405    ; 3465	
                           A 10406    ; 3466			fs->n_fats = fs->win[BPB_NumFAT
                           A 10407    .LINE 3466
                           A 10408    
042EA1 FD7E3E              A 10409    	LD	A,(IY+%3E)
042EA4 FD7702              A 10410    	LD	(IY+%2),A
                           A 10411    ; 3467			if (fs->n_fats != 1 && fs->n_fa
                           A 10412    .LINE 3467
                           A 10413    
042EA7 FD7E02              A 10414    	LD	A,(IY+%2)
042EAA DD77F5              A 10415    	LD	(IX+%FFFFFFF5),A
042EAD DD77EE              A 10416    	LD	(IX+%FFFFFFEE),A
042EB0 DD7EF5              A 10417    	LD	A,(IX+%FFFFFFF5)
042EB3 FE01                A 10418    	CP	A,%1
042EB5 28 15               A 10419    	JR	Z,L_492
042EB7 DD7EF5              A 10420    	LD	A,(IX+%FFFFFFF5)
042EBA DD77EE              A 10421    	LD	(IX+%FFFFFFEE),A
042EBD DD7EF5              A 10422    	LD	A,(IX+%FFFFFFF5)
042EC0 FE02                A 10423    	CP	A,%2
042EC2 28 08               A 10424    	JR	Z,L_492
042EC4 210D0000            A 10425    	LD	HL,13
042EC8 C3 81 32 04         A 10426    	JR	L_529
042ECC                     A 10427    L_492:
                           A 10428    ; 3468			fasize *= fs->n_fats;			
                           A 10429    .LINE 3468
                           A 10430    
042ECC B7ED62              A 10431    	UEXT	HL
042ECF DD6EEE              A 10432    	LD	L,(IX+%FFFFFFEE)
042ED2 E5C1                A 10433    	LD	BC,HL
042ED4 7C                  A 10434    	LD	A,H
042ED5 DD27F6              A 10435    	LD	HL,(IX+%FFFFFFF6)
042ED8 DD5EF9              A 10436    	LD	E,(IX+%FFFFFFF9)
042EDB CD DF 47 04         A 10437    	CALL	__lmulu
042EDF DD2FF6              A 10438    	LD	(IX+%FFFFFFF6),HL
042EE2 DD73F9              A 10439    	LD	(IX+%FFFFFFF9),E
                           A 10440    ; 3469	
                           A 10441    ; 3470			fs->csize = fs->win[BPB_SecPerC
                           A 10442    .LINE 3470
                           A 10443    
042EE5 DD31FD              A 10444    	LD	IY,(IX+%FFFFFFFD)
042EE8 ED233B              A 10445    	LEA	HL,IY+%3B
042EEB 4E                  A 10446    	LD	C,(HL)
042EEC FD7109              A 10447    	LD	(IY+%9),C
042EEF FD360A00            A 10448    	LD	(IY+%A),%0
                           A 10449    ; 3471			if (fs->csize == 0 || (fs->csiz
                           A 10450    .LINE 3471
                           A 10451    
042EF3 FD0709              A 10452    	LD	BC,(IY+%9)
042EF6 DD71F2              A 10453    	LD	(IX+%FFFFFFF2),C
042EF9 DD70F3              A 10454    	LD	(IX+%FFFFFFF3),B
042EFC DD27F2              A 10455    	LD	HL,(IX+%FFFFFFF2)
042EFF CD FA 46 04         A 10456    	CALL	__scmpzero
042F03 28 15               A 10457    	JR	Z,L_494
042F05 DD07F2              A 10458    	LD	BC,(IX+%FFFFFFF2)
042F08 CD 95 44 04         A 10459    	CALL	__stoiu
042F0C 2B                  A 10460    	DEC	HL
042F0D DD07F2              A 10461    	LD	BC,(IX+%FFFFFFF2)
042F10 CD FE 45 04         A 10462    	CALL	__sand
042F14 CD FA 46 04         A 10463    	CALL	__scmpzero
042F18 28 08               A 10464    	JR	Z,L_495
042F1A                     A 10465    L_494:
042F1A 210D0000            A 10466    	LD	HL,13
042F1E C3 81 32 04         A 10467    	JR	L_529
042F22                     A 10468    L_495:
                           A 10469    ; 3472	
                           A 10470    ; 3473			fs->n_rootdir = ld_word(fs->win
                           A 10471    .LINE 3473
                           A 10472    
042F22 DD31FD              A 10473    	LD	IY,(IX+%FFFFFFFD)
042F25 ED033F              A 10474    	LEA	BC,IY+%3F
042F28 C5                  A 10475    	PUSH	BC
042F29 CD 7A 0E 04         A 10476    	CALL	_ld_word
042F2D C1                  A 10477    	POP	BC
042F2E DD31FD              A 10478    	LD	IY,(IX+%FFFFFFFD)
042F31 E5C1                A 10479    	LD	BC,HL
042F33 FD7107              A 10480    	LD	(IY+%7),C
042F36 FD7008              A 10481    	LD	(IY+%8),B
                           A 10482    ; 3474			if (fs->n_rootdir % (SS(fs) / S
                           A 10483    .LINE 3474
                           A 10484    
042F39 FD0707              A 10485    	LD	BC,(IY+%7)
042F3C CD 95 44 04         A 10486    	CALL	__stoiu
042F40 7D                  A 10487    	LD	A,L
042F41 E60F                A 10488    	AND	A,%F
042F43 B7ED62              A 10489    	UEXT	HL
042F46 6F                  A 10490    	LD	L,A
042F47 CD 07 46 04         A 10491    	CALL	__icmpzero
042F4B 28 08               A 10492    	JR	Z,L_497
042F4D 210D0000            A 10493    	LD	HL,13
042F51 C3 81 32 04         A 10494    	JR	L_529
042F55                     A 10495    L_497:
                           A 10496    ; 3475	
                           A 10497    ; 3476			tsect = ld_word(fs->win + BPB_T
                           A 10498    .LINE 3476
                           A 10499    
042F55 DD31FD              A 10500    	LD	IY,(IX+%FFFFFFFD)
042F58 ED032E              A 10501    	LEA	BC,IY+%2E
042F5B DD0FE5              A 10502    	LD	(IX+%FFFFFFE5),BC
042F5E DD0FD7              A 10503    	LD	(IX+%FFFFFFD7),BC
042F61 DD31E5              A 10504    	LD	IY,(IX+%FFFFFFE5)
042F64 ED0313              A 10505    	LEA	BC,IY+%13
042F67 C5                  A 10506    	PUSH	BC
042F68 CD 7A 0E 04         A 10507    	CALL	_ld_word
042F6C C1                  A 10508    	POP	BC
042F6D E5C1                A 10509    	LD	BC,HL
042F6F CD 95 44 04         A 10510    	CALL	__stoiu
042F73 AF                  A 10511    	XOR	A,A
042F74 DD2FDE              A 10512    	LD	(IX+%FFFFFFDE),HL
042F77 DD77E1              A 10513    	LD	(IX+%FFFFFFE1),A
                           A 10514    ; 3477			if (tsect == 0) tsect = ld_dwor
                           A 10515    .LINE 3477
                           A 10516    
042F7A DD27DE              A 10517    	LD	HL,(IX+%FFFFFFDE)
042F7D DD5EE1              A 10518    	LD	E,(IX+%FFFFFFE1)
042F80 CD DA 44 04         A 10519    	CALL	__lcmpzero
042F84 20 18               A 10520    	JR	NZ,L_499
042F86 DD07E5              A 10521    	LD	BC,(IX+%FFFFFFE5)
042F89 DD0FD7              A 10522    	LD	(IX+%FFFFFFD7),BC
042F8C DD31E5              A 10523    	LD	IY,(IX+%FFFFFFE5)
042F8F ED0320              A 10524    	LEA	BC,IY+%20
042F92 C5                  A 10525    	PUSH	BC
042F93 CD B6 0E 04         A 10526    	CALL	_ld_dword
042F97 C1                  A 10527    	POP	BC
042F98 DD2FDE              A 10528    	LD	(IX+%FFFFFFDE),HL
042F9B DD73E1              A 10529    	LD	(IX+%FFFFFFE1),E
042F9E                     A 10530    L_499:
                           A 10531    ; 3478	
                           A 10532    ; 3479			nrsv = ld_word(fs->win + BPB_Rs
                           A 10533    .LINE 3479
                           A 10534    
042F9E DD31D7              A 10535    	LD	IY,(IX+%FFFFFFD7)
042FA1 ED030E              A 10536    	LEA	BC,IY+%E
042FA4 C5                  A 10537    	PUSH	BC
042FA5 CD 7A 0E 04         A 10538    	CALL	_ld_word
042FA9 C1                  A 10539    	POP	BC
042FAA DD75E8              A 10540    	LD	(IX+%FFFFFFE8),L
042FAD DD74E9              A 10541    	LD	(IX+%FFFFFFE9),H
                           A 10542    ; 3480			if (nrsv == 0) return FR_NO_FIL
                           A 10543    .LINE 3480
                           A 10544    
042FB0 DD27E8              A 10545    	LD	HL,(IX+%FFFFFFE8)
042FB3 CD FA 46 04         A 10546    	CALL	__scmpzero
042FB7 20 08               A 10547    	JR	NZ,L_501
042FB9 210D0000            A 10548    	LD	HL,13
042FBD C3 81 32 04         A 10549    	JR	L_529
042FC1                     A 10550    L_501:
                           A 10551    ; 3481	
                           A 10552    ; 3482			/* Determine the FAT sub type *
                           A 10553    ; 3483			sysect = nrsv + fasize + fs->n_
                           A 10554    .LINE 3483
                           A 10555    
042FC1 DD31FD              A 10556    	LD	IY,(IX+%FFFFFFFD)
042FC4 FD0707              A 10557    	LD	BC,(IY+%7)
042FC7 CD 95 44 04         A 10558    	CALL	__stoiu
042FCB 3E04                A 10559    	LD	A,%4
042FCD CD 7E 46 04         A 10560    	CALL	__ishru_b
042FD1 AF                  A 10561    	XOR	A,A
042FD2 DD77BB              A 10562    	LD	(IX+%FFFFFFBB),A
042FD5 DD2FB8              A 10563    	LD	(IX+%FFFFFFB8),HL
042FD8 DD07E8              A 10564    	LD	BC,(IX+%FFFFFFE8)
042FDB CD 95 44 04         A 10565    	CALL	__stoiu
042FDF E5C1                A 10566    	LD	BC,HL
042FE1 AF                  A 10567    	XOR	A,A
042FE2 DD27F6              A 10568    	LD	HL,(IX+%FFFFFFF6)
042FE5 DD5EF9              A 10569    	LD	E,(IX+%FFFFFFF9)
042FE8 CD C7 43 04         A 10570    	CALL	__ladd
042FEC 7B                  A 10571    	LD	A,E
042FED E5C1                A 10572    	LD	BC,HL
042FEF DD5EBB              A 10573    	LD	E,(IX+%FFFFFFBB)
042FF2 DD27B8              A 10574    	LD	HL,(IX+%FFFFFFB8)
042FF5 CD C7 43 04         A 10575    	CALL	__ladd
042FF9 DD2FDA              A 10576    	LD	(IX+%FFFFFFDA),HL
042FFC DD73DD              A 10577    	LD	(IX+%FFFFFFDD),E
                           A 10578    ; 3484			if (tsect < sysect) return FR_N
                           A 10579    .LINE 3484
                           A 10580    
042FFF DD27DE              A 10581    	LD	HL,(IX+%FFFFFFDE)
043002 DD5EE1              A 10582    	LD	E,(IX+%FFFFFFE1)
043005 DD07DA              A 10583    	LD	BC,(IX+%FFFFFFDA)
043008 DD7EDD              A 10584    	LD	A,(IX+%FFFFFFDD)
04300B CD AA 46 04         A 10585    	CALL	__lcmpu
04300F 30 08               A 10586    	JR	NC,L_503
043011 210D0000            A 10587    	LD	HL,13
043015 C3 81 32 04         A 10588    	JR	L_529
043019                     A 10589    L_503:
                           A 10590    ; 3485			nclst = (tsect - sysect) / fs->
                           A 10591    .LINE 3485
                           A 10592    
043019 DD27DE              A 10593    	LD	HL,(IX+%FFFFFFDE)
04301C DD5EE1              A 10594    	LD	E,(IX+%FFFFFFE1)
04301F DD07DA              A 10595    	LD	BC,(IX+%FFFFFFDA)
043022 DD7EDD              A 10596    	LD	A,(IX+%FFFFFFDD)
043025 CD 9D 45 04         A 10597    	CALL	__lsub
043029 DD2FBC              A 10598    	LD	(IX+%FFFFFFBC),HL
04302C DD31FD              A 10599    	LD	IY,(IX+%FFFFFFFD)
04302F FD0709              A 10600    	LD	BC,(IY+%9)
043032 CD 95 44 04         A 10601    	CALL	__stoiu
043036 E5C1                A 10602    	LD	BC,HL
043038 AF                  A 10603    	XOR	A,A
043039 DD27BC              A 10604    	LD	HL,(IX+%FFFFFFBC)
04303C CD 4B 45 04         A 10605    	CALL	__ldivu
043040 DD2FEA              A 10606    	LD	(IX+%FFFFFFEA),HL
043043 DD73ED              A 10607    	LD	(IX+%FFFFFFED),E
                           A 10608    ; 3486			if (nclst == 0) return FR_NO_FI
                           A 10609    .LINE 3486
                           A 10610    
043046 DD27EA              A 10611    	LD	HL,(IX+%FFFFFFEA)
043049 DD5EED              A 10612    	LD	E,(IX+%FFFFFFED)
04304C CD DA 44 04         A 10613    	CALL	__lcmpzero
043050 20 08               A 10614    	JR	NZ,L_505
043052 210D0000            A 10615    	LD	HL,13
043056 C3 81 32 04         A 10616    	JR	L_529
04305A                     A 10617    L_505:
                           A 10618    ; 3487			fmt = 0;
                           A 10619    .LINE 3487
                           A 10620    
04305A 01000000            A 10621    	LD	BC,0
04305E DD0FFA              A 10622    	LD	(IX+%FFFFFFFA),BC
                           A 10623    ; 3488			if (nclst <= MAX_FAT32) fmt = F
                           A 10624    .LINE 3488
                           A 10625    
043061 21F5FFFF            A 10626    	LD	HL,16777205
043065 1E0F                A 10627    	LD	E,%F
043067 DD07EA              A 10628    	LD	BC,(IX+%FFFFFFEA)
04306A DD7EED              A 10629    	LD	A,(IX+%FFFFFFED)
04306D CD AA 46 04         A 10630    	CALL	__lcmpu
043071 38 07               A 10631    	JR	C,L_508
043073 01030000            A 10632    	LD	BC,3
043077 DD0FFA              A 10633    	LD	(IX+%FFFFFFFA),BC
04307A                     A 10634    L_508:
                           A 10635    ; 3489			if (nclst <= MAX_FAT16) fmt = F
                           A 10636    .LINE 3489
                           A 10637    
04307A 21F5FF00            A 10638    	LD	HL,65525
04307E 1E00                A 10639    	LD	E,%0
043080 DD07EA              A 10640    	LD	BC,(IX+%FFFFFFEA)
043083 DD7EED              A 10641    	LD	A,(IX+%FFFFFFED)
043086 CD AA 46 04         A 10642    	CALL	__lcmpu
04308A 38 07               A 10643    	JR	C,L_510
04308C 01020000            A 10644    	LD	BC,2
043090 DD0FFA              A 10645    	LD	(IX+%FFFFFFFA),BC
043093                     A 10646    L_510:
                           A 10647    ; 3490			if (nclst <= MAX_FAT12) fmt = F
                           A 10648    .LINE 3490
                           A 10649    
043093 21F50F00            A 10650    	LD	HL,4085
043097 DD07EA              A 10651    	LD	BC,(IX+%FFFFFFEA)
04309A DD7EED              A 10652    	LD	A,(IX+%FFFFFFED)
04309D CD AA 46 04         A 10653    	CALL	__lcmpu
0430A1 38 07               A 10654    	JR	C,L_512
0430A3 01010000            A 10655    	LD	BC,1
0430A7 DD0FFA              A 10656    	LD	(IX+%FFFFFFFA),BC
0430AA                     A 10657    L_512:
                           A 10658    ; 3491			if (fmt == 0) return FR_NO_FILE
                           A 10659    .LINE 3491
                           A 10660    
0430AA DD27FA              A 10661    	LD	HL,(IX+%FFFFFFFA)
0430AD CD 07 46 04         A 10662    	CALL	__icmpzero
0430B1 20 08               A 10663    	JR	NZ,L_513
0430B3 210D0000            A 10664    	LD	HL,13
0430B7 C3 81 32 04         A 10665    	JR	L_529
0430BB                     A 10666    L_513:
                           A 10667    ; 3492	
                           A 10668    ; 3493			/* Boundaries and Limits */
                           A 10669    ; 3494			fs->n_fatent = nclst + 2;		
                           A 10670    .LINE 3494
                           A 10671    
0430BB DD27EA              A 10672    	LD	HL,(IX+%FFFFFFEA)
0430BE DD5EED              A 10673    	LD	E,(IX+%FFFFFFED)
0430C1 3E02                A 10674    	LD	A,%2
0430C3 CD B8 43 04         A 10675    	CALL	__ladd_b
0430C7 DD31FD              A 10676    	LD	IY,(IX+%FFFFFFFD)
0430CA FD2F12              A 10677    	LD	(IY+%12),HL
0430CD FD7315              A 10678    	LD	(IY+%15),E
                           A 10679    ; 3495			fs->volbase = bsect;			
                           A 10680    .LINE 3495
                           A 10681    
0430D0 DD07D3              A 10682    	LD	BC,(IX+%FFFFFFD3)
0430D3 DD7ED6              A 10683    	LD	A,(IX+%FFFFFFD6)
0430D6 FD0F1A              A 10684    	LD	(IY+%1A),BC
0430D9 FD771D              A 10685    	LD	(IY+%1D),A
                           A 10686    ; 3496			fs->fatbase = bsect + nrsv; 	
                           A 10687    .LINE 3496
                           A 10688    
0430DC DD07E8              A 10689    	LD	BC,(IX+%FFFFFFE8)
0430DF CD 95 44 04         A 10690    	CALL	__stoiu
0430E3 E5C1                A 10691    	LD	BC,HL
0430E5 AF                  A 10692    	XOR	A,A
0430E6 DD27D3              A 10693    	LD	HL,(IX+%FFFFFFD3)
0430E9 DD5ED6              A 10694    	LD	E,(IX+%FFFFFFD6)
0430EC CD C7 43 04         A 10695    	CALL	__ladd
0430F0 FD2F1E              A 10696    	LD	(IY+%1E),HL
0430F3 FD7321              A 10697    	LD	(IY+%21),E
                           A 10698    ; 3497			fs->database = bsect + sysect;	
                           A 10699    .LINE 3497
                           A 10700    
0430F6 DD27DA              A 10701    	LD	HL,(IX+%FFFFFFDA)
0430F9 DD5EDD              A 10702    	LD	E,(IX+%FFFFFFDD)
0430FC DD07D3              A 10703    	LD	BC,(IX+%FFFFFFD3)
0430FF DD7ED6              A 10704    	LD	A,(IX+%FFFFFFD6)
043102 CD C7 43 04         A 10705    	CALL	__ladd
043106 FD2F26              A 10706    	LD	(IY+%26),HL
043109 FD7329              A 10707    	LD	(IY+%29),E
                           A 10708    ; 3498			if (fmt == FS_FAT32) {
                           A 10709    .LINE 3498
                           A 10710    
04310C 01030000            A 10711    	LD	BC,3
043110 DD27FA              A 10712    	LD	HL,(IX+%FFFFFFFA)
043113 B7                  A 10713    	OR	A,A
043114 ED42                A 10714    	SBC	HL,BC
043116 20 65               A 10715    	JR	NZ,L_525
                           A 10716    ; 3499				if (ld_word(fs->win + BPB_F
                           A 10717    .LINE 3499
                           A 10718    
043118 DD31FD              A 10719    	LD	IY,(IX+%FFFFFFFD)
04311B ED032E              A 10720    	LEA	BC,IY+%2E
04311E DD0FD0              A 10721    	LD	(IX+%FFFFFFD0),BC
043121 DD31D0              A 10722    	LD	IY,(IX+%FFFFFFD0)
043124 ED032A              A 10723    	LEA	BC,IY+%2A
043127 C5                  A 10724    	PUSH	BC
043128 CD 7A 0E 04         A 10725    	CALL	_ld_word
04312C C1                  A 10726    	POP	BC
04312D CD FA 46 04         A 10727    	CALL	__scmpzero
043131 28 08               A 10728    	JR	Z,L_516
043133 210D0000            A 10729    	LD	HL,13
043137 C3 81 32 04         A 10730    	JR	L_529
04313B                     A 10731    L_516:
                           A 10732    ; 3500				if (fs->n_rootdir != 0) ret
                           A 10733    .LINE 3500
                           A 10734    
04313B DD31FD              A 10735    	LD	IY,(IX+%FFFFFFFD)
04313E FD2707              A 10736    	LD	HL,(IY+%7)
043141 CD FA 46 04         A 10737    	CALL	__scmpzero
043145 28 08               A 10738    	JR	Z,L_517
043147 210D0000            A 10739    	LD	HL,13
04314B C3 81 32 04         A 10740    	JR	L_529
04314F                     A 10741    L_517:
                           A 10742    ; 3501				fs->dirbase = ld_dword(fs->
                           A 10743    .LINE 3501
                           A 10744    
04314F DD31D0              A 10745    	LD	IY,(IX+%FFFFFFD0)
043152 ED032C              A 10746    	LEA	BC,IY+%2C
043155 C5                  A 10747    	PUSH	BC
043156 CD B6 0E 04         A 10748    	CALL	_ld_dword
04315A C1                  A 10749    	POP	BC
04315B DD31FD              A 10750    	LD	IY,(IX+%FFFFFFFD)
04315E FD2F22              A 10751    	LD	(IY+%22),HL
043161 FD7325              A 10752    	LD	(IY+%25),E
                           A 10753    ; 3502				szbfat = fs->n_fatent * 4;	
                           A 10754    .LINE 3502
                           A 10755    
043164 FD2712              A 10756    	LD	HL,(IY+%12)
043167 FD5E15              A 10757    	LD	E,(IY+%15)
04316A 01040000            A 10758    	LD	BC,4
04316E AF                  A 10759    	XOR	A,A
04316F CD DF 47 04         A 10760    	CALL	__lmulu
043173 DD2FC8              A 10761    	LD	(IX+%FFFFFFC8),HL
043176 DD73CB              A 10762    	LD	(IX+%FFFFFFCB),E
                           A 10763    ; 3503			} else {
                           A 10764    .LINE 3503
                           A 10765    
043179 C3 25 32 04         A 10766    	JR	L_527
04317D                     A 10767    L_525:
                           A 10768    ; 3504				if (fs->n_rootdir == 0)	ret
                           A 10769    .LINE 3504
                           A 10770    
04317D DD31FD              A 10771    	LD	IY,(IX+%FFFFFFFD)
043180 FD2707              A 10772    	LD	HL,(IY+%7)
043183 CD FA 46 04         A 10773    	CALL	__scmpzero
043187 20 08               A 10774    	JR	NZ,L_519
043189 210D0000            A 10775    	LD	HL,13
04318D C3 81 32 04         A 10776    	JR	L_529
043191                     A 10777    L_519:
                           A 10778    ; 3505				fs->dirbase = fs->fatbase +
                           A 10779    .LINE 3505
                           A 10780    
043191 DD31FD              A 10781    	LD	IY,(IX+%FFFFFFFD)
043194 FD271E              A 10782    	LD	HL,(IY+%1E)
043197 FD5E21              A 10783    	LD	E,(IY+%21)
04319A DD07F6              A 10784    	LD	BC,(IX+%FFFFFFF6)
04319D DD7EF9              A 10785    	LD	A,(IX+%FFFFFFF9)
0431A0 CD C7 43 04         A 10786    	CALL	__ladd
0431A4 FD2F22              A 10787    	LD	(IY+%22),HL
0431A7 FD7325              A 10788    	LD	(IY+%25),E
                           A 10789    ; 3506				szbfat = (fmt == FS_FAT16) 
                           A 10790    .LINE 3506
                           A 10791    
0431AA 01020000            A 10792    	LD	BC,2
0431AE DD27FA              A 10793    	LD	HL,(IX+%FFFFFFFA)
0431B1 B7                  A 10794    	OR	A,A
0431B2 ED42                A 10795    	SBC	HL,BC
0431B4 20 16               A 10796    	JR	NZ,L_522
                           A 10797    ; 3507					fs->n_fatent * 2 : fs->
                           A 10798    .LINE 3507
                           A 10799    
0431B6 DD31FD              A 10800    	LD	IY,(IX+%FFFFFFFD)
0431B9 FD2712              A 10801    	LD	HL,(IY+%12)
0431BC FD5E15              A 10802    	LD	E,(IY+%15)
0431BF AF                  A 10803    	XOR	A,A
0431C0 CD DF 47 04         A 10804    	CALL	__lmulu
0431C4 DD2FCC              A 10805    	LD	(IX+%FFFFFFCC),HL
0431C7 DD73CF              A 10806    	LD	(IX+%FFFFFFCF),E
0431CA 18 4D               A 10807    	JR	L_523
0431CC                     A 10808    L_522:
0431CC DD31FD              A 10809    	LD	IY,(IX+%FFFFFFFD)
0431CF FD1712              A 10810    	LD	DE,(IY+%12)
0431D2 DD1FC2              A 10811    	LD	(IX+%FFFFFFC2),DE	; spill
0431D5 FD5E15              A 10812    	LD	E,(IY+%15)
0431D8 DD1FC5              A 10813    	LD	(IX+%FFFFFFC5),DE	; spill
0431DB DD27C2              A 10814    	LD	HL,(IX+%FFFFFFC2)
0431DE DD17C5              A 10815    	LD	DE,(IX+%FFFFFFC5)	; unspill
0431E1 01030000            A 10816    	LD	BC,3
0431E5 AF                  A 10817    	XOR	A,A
0431E6 CD DF 47 04         A 10818    	CALL	__lmulu
0431EA 7B                  A 10819    	LD	A,E
0431EB E5C1                A 10820    	LD	BC,HL
0431ED 2E01                A 10821    	LD	L,%1
0431EF CD A9 45 04         A 10822    	CALL	__lshru
0431F3 DD0FBF              A 10823    	LD	(IX+%FFFFFFBF),BC
0431F6 5F                  A 10824    	LD	E,A
0431F7 DD1FC5              A 10825    	LD	(IX+%FFFFFFC5),DE	; spill
0431FA DD17C2              A 10826    	LD	DE,(IX+%FFFFFFC2)	; unspill
0431FD D5C1                A 10827    	LD	BC,DE
0431FF DD17C5              A 10828    	LD	DE,(IX+%FFFFFFC5)	; unspill
043202 79                  A 10829    	LD	A,C
043203 E601                A 10830    	AND	A,%1
043205 B7ED62              A 10831    	UEXT	HL
043208 6F                  A 10832    	LD	L,A
043209 E5C1                A 10833    	LD	BC,HL
04320B 7C                  A 10834    	LD	A,H
04320C DD27BF              A 10835    	LD	HL,(IX+%FFFFFFBF)
04320F CD C7 43 04         A 10836    	CALL	__ladd
043213 DD2FCC              A 10837    	LD	(IX+%FFFFFFCC),HL
043216 DD73CF              A 10838    	LD	(IX+%FFFFFFCF),E
043219                     A 10839    L_523:
043219 DD07CC              A 10840    	LD	BC,(IX+%FFFFFFCC)
04321C DD7ECF              A 10841    	LD	A,(IX+%FFFFFFCF)
04321F DD0FC8              A 10842    	LD	(IX+%FFFFFFC8),BC
043222 DD77CB              A 10843    	LD	(IX+%FFFFFFCB),A
                           A 10844    ; 3508			}
043225                     A 10845    L_527:
                           A 10846    .LINE 3508
                           A 10847    
                           A 10848    ; 3509			if (fs->fsize < (szbfat + (SS(f
                           A 10849    .LINE 3509
                           A 10850    
043225 DD27C8              A 10851    	LD	HL,(IX+%FFFFFFC8)
043228 DD5ECB              A 10852    	LD	E,(IX+%FFFFFFCB)
04322B 01FF0100            A 10853    	LD	BC,511
04322F AF                  A 10854    	XOR	A,A
043230 CD C7 43 04         A 10855    	CALL	__ladd
043234 7B                  A 10856    	LD	A,E
043235 E5C1                A 10857    	LD	BC,HL
043237 2E09                A 10858    	LD	L,%9
043239 CD A9 45 04         A 10859    	CALL	__lshru
04323D DD31FD              A 10860    	LD	IY,(IX+%FFFFFFFD)
043240 FD2716              A 10861    	LD	HL,(IY+%16)
043243 FD5E19              A 10862    	LD	E,(IY+%19)
043246 CD AA 46 04         A 10863    	CALL	__lcmpu
04324A 30 06               A 10864    	JR	NC,L_528
04324C 210D0000            A 10865    	LD	HL,13
043250 18 2F               A 10866    	JR	L_529
                           A 10867    ; 3510	
                           A 10868    ; 3511	#if !FF_FS_READONLY
                           A 10869    ; 3512			/* Get FSInfo if available */
                           A 10870    ; 3513			fs->last_clst = fs->free_clst =
                           A 10871    ; 3514			fs->fsi_flag = 0x80;
                           A 10872    ; 3515	#if (FF_FS_NOFSINFO & 3) != 3
                           A 10873    ; 3516			if (fmt == FS_FAT32				
                           A 10874    ; 3517				&& ld_word(fs->win + BPB_FS
                           A 10875    ; 3518				&& move_window(fs, bsect + 
                           A 10876    ; 3519			{
                           A 10877    ; 3520				fs->fsi_flag = 0;
                           A 10878    ; 3521				if (ld_word(fs->win + BS_55
                           A 10879    ; 3522					&& ld_dword(fs->win + F
                           A 10880    ; 3523					&& ld_dword(fs->win + F
                           A 10881    ; 3524				{
                           A 10882    ; 3525	#if (FF_FS_NOFSINFO & 1) == 0
                           A 10883    ; 3526					fs->free_clst = ld_dwor
                           A 10884    ; 3527	#endif
                           A 10885    ; 3528	#if (FF_FS_NOFSINFO & 2) == 0
                           A 10886    ; 3529					fs->last_clst = ld_dwor
                           A 10887    ; 3530	#endif
                           A 10888    ; 3531				}
                           A 10889    ; 3532			}
                           A 10890    ; 3533	#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
                           A 10891    ; 3534	#endif	/* !FF_FS_READONLY */
                           A 10892    ; 3535		}
043252                     A 10893    L_528:
                           A 10894    .LINE 3535
                           A 10895    
                           A 10896    ; 3536	
                           A 10897    ; 3537		fs->fs_type = (BYTE)fmt;/* FAT sub-
                           A 10898    .LINE 3537
                           A 10899    
043252 DD7EFA              A 10900    	LD	A,(IX+%FFFFFFFA)
043255 DD31FD              A 10901    	LD	IY,(IX+%FFFFFFFD)
043258 FD7700              A 10902    	LD	(IY+%0),A
                           A 10903    ; 3538		fs->id = ++Fsid;		/* Volume m
                           A 10904    .LINE 3538
                           A 10905    
04325B ED4B B6 4A 04       A 10906    	LD	BC,(_Fsid)
043260 03                  A 10907    	INC	BC
043261 21 B6 4A 04         A 10908    	LD	HL,_Fsid
043265 71                  A 10909    	LD	(HL),C
043266 23                  A 10910    	INC	HL
043267 70                  A 10911    	LD	(HL),B
043268 ED4B B6 4A 04       A 10912    	LD	BC,(_Fsid)
04326D FD7105              A 10913    	LD	(IY+%5),C
043270 FD7006              A 10914    	LD	(IY+%6),B
                           A 10915    ; 3539	#if FF_USE_LFN == 1
                           A 10916    ; 3540		fs->lfnbuf = LfnBuf;	/* Static L
                           A 10917    ; 3541	#if FF_FS_EXFAT
                           A 10918    ; 3542		fs->dirbuf = DirBuf;	/* Static d
                           A 10919    ; 3543	#endif
                           A 10920    ; 3544	#endif
                           A 10921    ; 3545	#if FF_FS_RPATH != 0
                           A 10922    ; 3546		fs->cdir = 0;			/* Initiali
                           A 10923    .LINE 3546
                           A 10924    
043273 01000000            A 10925    	LD	BC,0
043277 FD0F0E              A 10926    	LD	(IY+%E),BC
04327A FD361100            A 10927    	LD	(IY+%11),%0
                           A 10928    ; 3547	#endif
                           A 10929    ; 3548	#if FF_FS_LOCK != 0			/* Clear fi
                           A 10930    ; 3549		clear_lock(fs);
                           A 10931    ; 3550	#endif
                           A 10932    ; 3551		return FR_OK;
                           A 10933    .LINE 3551
                           A 10934    
04327E B7                  A 10935    	OR	A,A
04327F ED62                A 10936    	SBC	HL,HL
                           A 10937    ; 3552	}
043281                     A 10938    L_529:
                           A 10939    .LINE 3552
                           A 10940    
043281 DDF9                A 10941    	LD	SP,IX
043283 DDE1                A 10942    	POP	IX
043285 C9                  A 10943    	RET	
                           A 10944    
                           A 10945    
                           A 10946    ;**************************** _mount_volume ***
                           A 10947    ;Name                         Addr/Register   S
                           A 10948    ;_Fsid                               STATIC    
                           A 10949    ;_disk_initialize                    IMPORT  --
                           A 10950    ;_disk_status                        IMPORT  --
                           A 10951    ;_FatFs                              STATIC    
                           A 10952    ;szbfat                               IX-56    
                           A 10953    ;temp520                              IX-52    
                           A 10954    ;G_40                                 IX-48    
                           A 10955    ;bsect                                IX-45    
                           A 10956    ;G_39                                 IX-41    
                           A 10957    ;sysect                               IX-38    
                           A 10958    ;tsect                                IX-34    
                           A 10959    ;vol                                  IX-30    
                           A 10960    ;G_38                                 IX-27    
                           A 10961    ;nrsv                                 IX-24    
                           A 10962    ;nclst                                IX-22    
                           A 10963    ;G_36                                 IX-18    
                           A 10964    ;G_33                                 IX-17    
                           A 10965    ;G_37                                 IX-14    
                           A 10966    ;stat                                 IX-12    
                           A 10967    ;G_35                                 IX-11    
                           A 10968    ;fasize                               IX-10    
                           A 10969    ;fmt                                   IX-6    
                           A 10970    ;fs                                    IX-3    
                           A 10971    ;mode                                 IX+12    
                           A 10972    ;rfs                                   IX+9    
                           A 10973    ;path                                  IX+6    
                           A 10974    
                           A 10975    
                           A 10976    ; Stack Frame Size: 87 (bytes)
                           A 10977    ;       Spill Code: -1 (instruction)
                           A 10978    
                           A 10979    
                           A 10980    .ENDFUNC "mount_volume",3552,"_mount_volume"
                           A 10981    ; 3553	
                           A 10982    ; 3554	
                           A 10983    ; 3555	
                           A 10984    ; 3556	
                           A 10985    ; 3557	/*-------------------------------------
                           A 10986    ; 3558	/* Check if the file/directory object i
                           A 10987    ; 3559	/*-------------------------------------
                           A 10988    ; 3560	
                           A 10989    ; 3561	static FRESULT validate (	/* Returns 
                           A 10990    ; 3562		FFOBJID* obj,			/* Pointer 
                           A 10991    ; 3563		FATFS** rfs				/* Pointer 
                           A 10992    ; 3564	)
                           A 10993    ; 3565	{
043286                     A 10994    _validate:
                           A 10995    .DEFINE "_validate"
                           A 10996    
                           A 10997    .VALUE _validate
                           A 10998    
                           A 10999    .CLASS 3
                           A 11000    
                           A 11001    .TYPE 68
                           A 11002    
                           A 11003    .ENDEF
                           A 11004    
                           A 11005    .BEGFUNC "validate",3565,"_validate"
                           A 11006    
                           A 11007    .LINE 3565
                           A 11008    
                           A 11009    .DEFINE "obj"
                           A 11010    
                           A 11011    .CLASS 65
                           A 11012    
                           A 11013    .VALUE 6
                           A 11014    
                           A 11015    .TAG "NONAME1"
                           A 11016    
                           A 11017    .TYPE 40
                           A 11018    
                           A 11019    .ENDEF
                           A 11020    
                           A 11021    .DEFINE "rfs"
                           A 11022    
                           A 11023    .CLASS 65
                           A 11024    
                           A 11025    .VALUE 9
                           A 11026    
                           A 11027    .TAG "NONAME0"
                           A 11028    
                           A 11029    .TYPE 296
                           A 11030    
                           A 11031    .ENDEF
                           A 11032    
                           A 11033    .DEFINE "res"
                           A 11034    
                           A 11035    .CLASS 65
                           A 11036    
                           A 11037    .VALUE -6
                           A 11038    
                           A 11039    .TYPE 4
                           A 11040    
                           A 11041    .ENDEF
                           A 11042    
043286 DDE5                A 11043    	PUSH	IX
043288 DD210000 00         A 11044    	LD	IX,0
04328D DD39                A 11045    	ADD	IX,SP
04328F C5                  A 11046    	PUSH	BC
043290 C5                  A 11047    	PUSH	BC
043291 C5                  A 11048    	PUSH	BC
                           A 11049    ; 3566		FRESULT res = FR_INVALID_OBJECT;
                           A 11050    .LINE 3566
                           A 11051    
043292 01090000            A 11052    	LD	BC,9
043296 DD0FFA              A 11053    	LD	(IX+%FFFFFFFA),BC
                           A 11054    ; 3567	
                           A 11055    ; 3568	
                           A 11056    ; 3569		if (obj && obj->fs && obj->fs->fs_t
                           A 11057    .LINE 3569
                           A 11058    
043299 DD2706              A 11059    	LD	HL,(IX+%6)
04329C CD 07 46 04         A 11060    	CALL	__icmpzero
0432A0 28 45               A 11061    	JR	Z,L_539
0432A2 DD3106              A 11062    	LD	IY,(IX+%6)
0432A5 FD0700              A 11063    	LD	BC,(IY+%0)
0432A8 DD0FFD              A 11064    	LD	(IX+%FFFFFFFD),BC
0432AB C5E1                A 11065    	LD	HL,BC
0432AD CD 07 46 04         A 11066    	CALL	__icmpzero
0432B1 28 34               A 11067    	JR	Z,L_539
0432B3 DD31FD              A 11068    	LD	IY,(IX+%FFFFFFFD)
0432B6 FD7E00              A 11069    	LD	A,(IY+%0)
0432B9 B7                  A 11070    	OR	A,A
0432BA 28 2B               A 11071    	JR	Z,L_539
0432BC DD31FD              A 11072    	LD	IY,(IX+%FFFFFFFD)
0432BF FD0705              A 11073    	LD	BC,(IY+%5)
0432C2 DD3106              A 11074    	LD	IY,(IX+%6)
0432C5 FD2703              A 11075    	LD	HL,(IY+%3)
0432C8 B7                  A 11076    	OR	A,A
0432C9 40ED42              A 11077    	SBC.SIS	HL,BC
0432CC 20 19               A 11078    	JR	NZ,L_539
                           A 11079    ; 3570	#if FF_FS_REENTRANT
                           A 11080    ; 3571			if (lock_fs(obj->fs)) {	/* Obta
                           A 11081    ; 3572				if (!(disk_status(obj->fs->
                           A 11082    ; 3573					res = FR_OK;
                           A 11083    ; 3574				} else {
                           A 11084    ; 3575					unlock_fs(obj->fs, FR_O
                           A 11085    ; 3576				}
                           A 11086    ; 3577			} else {
                           A 11087    ; 3578				res = FR_TIMEOUT;
                           A 11088    ; 3579			}
                           A 11089    ; 3580	#else
                           A 11090    ; 3581			if (!(disk_status(obj->fs->pdrv
                           A 11091    .LINE 3581
                           A 11092    
0432CE DD31FD              A 11093    	LD	IY,(IX+%FFFFFFFD)
0432D1 FD4E01              A 11094    	LD	C,(IY+%1)
0432D4 0600                A 11095    	LD	B,%0
0432D6 C5                  A 11096    	PUSH	BC
0432D7 CD F3 3D 04         A 11097    	CALL	_disk_status
0432DB C1                  A 11098    	POP	BC
0432DC E601                A 11099    	AND	A,%1
0432DE 20 07               A 11100    	JR	NZ,L_539
                           A 11101    ; 3582				res = FR_OK;
                           A 11102    .LINE 3582
                           A 11103    
0432E0 01000000            A 11104    	LD	BC,0
0432E4 DD0FFA              A 11105    	LD	(IX+%FFFFFFFA),BC
                           A 11106    ; 3583			}
                           A 11107    ; 3584	#endif
                           A 11108    ; 3585		}
0432E7                     A 11109    L_539:
                           A 11110    .LINE 3585
                           A 11111    
                           A 11112    ; 3586		*rfs = (res == FR_OK) ? obj->fs : 0
                           A 11113    .LINE 3586
                           A 11114    
0432E7 DD27FA              A 11115    	LD	HL,(IX+%FFFFFFFA)
0432EA CD 07 46 04         A 11116    	CALL	__icmpzero
0432EE 20 0B               A 11117    	JR	NZ,L_537
0432F0 DD3106              A 11118    	LD	IY,(IX+%6)
0432F3 FD0700              A 11119    	LD	BC,(IY+%0)
0432F6 DD0FF7              A 11120    	LD	(IX+%FFFFFFF7),BC
0432F9 18 07               A 11121    	JR	L_538
0432FB                     A 11122    L_537:
0432FB 01000000            A 11123    	LD	BC,0
0432FF DD0FF7              A 11124    	LD	(IX+%FFFFFFF7),BC
043302                     A 11125    L_538:
043302 DD2709              A 11126    	LD	HL,(IX+%9)
043305 DD07F7              A 11127    	LD	BC,(IX+%FFFFFFF7)
043308 ED0F                A 11128    	LD	(HL),BC
                           A 11129    ; 3587		return res;
                           A 11130    .LINE 3587
                           A 11131    
04330A DD27FA              A 11132    	LD	HL,(IX+%FFFFFFFA)
                           A 11133    ; 3588	}
                           A 11134    .LINE 3588
                           A 11135    
04330D DDF9                A 11136    	LD	SP,IX
04330F DDE1                A 11137    	POP	IX
043311 C9                  A 11138    	RET	
                           A 11139    
                           A 11140    
                           A 11141    ;**************************** _validate *******
                           A 11142    ;Name                         Addr/Register   S
                           A 11143    ;_disk_status                        IMPORT  --
                           A 11144    ;temp535                               IX-9    
                           A 11145    ;res                                   IX-6    
                           A 11146    ;G_41                                  IX-3    
                           A 11147    ;rfs                                   IX+9    
                           A 11148    ;obj                                   IX+6    
                           A 11149    
                           A 11150    
                           A 11151    ; Stack Frame Size: 21 (bytes)
                           A 11152    ;       Spill Code: -1 (instruction)
                           A 11153    
                           A 11154    
                           A 11155    .ENDFUNC "validate",3588,"_validate"
                           A 11156    ; 3589	
                           A 11157    ; 3590	
                           A 11158    ; 3591	
                           A 11159    ; 3592	
                           A 11160    ; 3593	/*-------------------------------------
                           A 11161    ; 3594	
                           A 11162    ; 3595	   Public Functions (FatFs API)
                           A 11163    ; 3596	
                           A 11164    ; 3597	---------------------------------------
                           A 11165    ; 3598	
                           A 11166    ; 3599	
                           A 11167    ; 3600	
                           A 11168    ; 3601	/*-------------------------------------
                           A 11169    ; 3602	/* Mount/Unmount a Logical Drive       
                           A 11170    ; 3603	/*-------------------------------------
                           A 11171    ; 3604	
                           A 11172    ; 3605	FRESULT f_mount (
                           A 11173    ; 3606		FATFS* fs,			/* Pointer to t
                           A 11174    ; 3607		const TCHAR* path,	/* Logical driv
                           A 11175    ; 3608		BYTE opt			/* Mount option
                           A 11176    ; 3609	)
                           A 11177    ; 3610	{
043312                     A 11178    _f_mount:
                           A 11179    .DEFINE "_f_mount"
                           A 11180    
                           A 11181    .VALUE _f_mount
                           A 11182    
                           A 11183    .CLASS 2
                           A 11184    
                           A 11185    .TYPE 68
                           A 11186    
                           A 11187    .ENDEF
                           A 11188    
                           A 11189    .BEGFUNC "f_mount",3610,"_f_mount"
                           A 11190    
                           A 11191    .LINE 3610
                           A 11192    
                           A 11193    .DEFINE "fs"
                           A 11194    
                           A 11195    .CLASS 65
                           A 11196    
                           A 11197    .VALUE 6
                           A 11198    
                           A 11199    .TAG "NONAME0"
                           A 11200    
                           A 11201    .TYPE 40
                           A 11202    
                           A 11203    .ENDEF
                           A 11204    
                           A 11205    .DEFINE "path"
                           A 11206    
                           A 11207    .CLASS 65
                           A 11208    
                           A 11209    .VALUE 9
                           A 11210    
                           A 11211    .TYPE 194
                           A 11212    
                           A 11213    .ENDEF
                           A 11214    
                           A 11215    .DEFINE "opt"
                           A 11216    
                           A 11217    .CLASS 65
                           A 11218    
                           A 11219    .VALUE 12
                           A 11220    
                           A 11221    .TYPE 12
                           A 11222    
                           A 11223    .ENDEF
                           A 11224    
                           A 11225    .DEFINE "cfs"
                           A 11226    
                           A 11227    .CLASS 65
                           A 11228    
                           A 11229    .VALUE -3
                           A 11230    
                           A 11231    .TAG "NONAME0"
                           A 11232    
                           A 11233    .TYPE 40
                           A 11234    
                           A 11235    .ENDEF
                           A 11236    
                           A 11237    .DEFINE "vol"
                           A 11238    
                           A 11239    .CLASS 65
                           A 11240    
                           A 11241    .VALUE -6
                           A 11242    
                           A 11243    .TYPE 4
                           A 11244    
                           A 11245    .ENDEF
                           A 11246    
                           A 11247    .DEFINE "res"
                           A 11248    
                           A 11249    .CLASS 65
                           A 11250    
                           A 11251    .VALUE -12
                           A 11252    
                           A 11253    .TYPE 4
                           A 11254    
                           A 11255    .ENDEF
                           A 11256    
                           A 11257    .DEFINE "rp"
                           A 11258    
                           A 11259    .CLASS 65
                           A 11260    
                           A 11261    .VALUE -15
                           A 11262    
                           A 11263    .TYPE 194
                           A 11264    
                           A 11265    .ENDEF
                           A 11266    
043312 DDE5                A 11267    	PUSH	IX
043314 DD210000 00         A 11268    	LD	IX,0
043319 DD39                A 11269    	ADD	IX,SP
04331B ED22F1              A 11270    	LEA	HL,IX+%FFFFFFF1
04331E F9                  A 11271    	LD	SP,HL
                           A 11272    ; 3611		FATFS *cfs;
                           A 11273    ; 3612		int vol;
                           A 11274    ; 3613		FRESULT res;
                           A 11275    ; 3614		const TCHAR *rp = path;
                           A 11276    .LINE 3614
                           A 11277    
04331F DD0709              A 11278    	LD	BC,(IX+%9)
043322 DD0FF1              A 11279    	LD	(IX+%FFFFFFF1),BC
                           A 11280    ; 3615	
                           A 11281    ; 3616	
                           A 11282    ; 3617		/* Get logical drive number */
                           A 11283    ; 3618		vol = get_ldnumber(&rp);
                           A 11284    .LINE 3618
                           A 11285    
043325 ED65F1              A 11286    	PEA	IX+%FFFFFFF1
043328 CD 33 29 04         A 11287    	CALL	_get_ldnumber
04332C C1                  A 11288    	POP	BC
04332D DD2FFA              A 11289    	LD	(IX+%FFFFFFFA),HL
                           A 11290    ; 3619		if (vol < 0) return FR_INVALID_DRIV
                           A 11291    .LINE 3619
                           A 11292    
043330 CD 07 46 04         A 11293    	CALL	__icmpzero
043334 F2 3E 33 04         A 11294    	JP	P,L_542
043338 210B0000            A 11295    	LD	HL,11
04333C 18 5B               A 11296    	JR	L_549
04333E                     A 11297    L_542:
                           A 11298    ; 3620		cfs = FatFs[vol];					
                           A 11299    .LINE 3620
                           A 11300    
04333E DD27FA              A 11301    	LD	HL,(IX+%FFFFFFFA)
043341 E5C1                A 11302    	LD	BC,HL
043343 29                  A 11303    	ADD	HL,HL
043344 09                  A 11304    	ADD	HL,BC
043345 01 B3 4A 04         A 11305    	LD	BC,_FatFs
043349 09                  A 11306    	ADD	HL,BC
04334A DD2FF7              A 11307    	LD	(IX+%FFFFFFF7),HL
04334D ED07                A 11308    	LD	BC,(HL)
04334F DD0FFD              A 11309    	LD	(IX+%FFFFFFFD),BC
                           A 11310    ; 3621	
                           A 11311    ; 3622		if (cfs) {
                           A 11312    .LINE 3622
                           A 11313    
043352 C5E1                A 11314    	LD	HL,BC
043354 CD 07 46 04         A 11315    	CALL	__icmpzero
043358 28 07               A 11316    	JR	Z,L_545
                           A 11317    ; 3623	#if FF_FS_LOCK != 0
                           A 11318    ; 3624			clear_lock(cfs);
                           A 11319    ; 3625	#endif
                           A 11320    ; 3626	#if FF_FS_REENTRANT						
                           A 11321    ; 3627			if (!ff_del_syncobj(cfs->sobj))
                           A 11322    ; 3628	#endif
                           A 11323    ; 3629			cfs->fs_type = 0;				
                           A 11324    .LINE 3629
                           A 11325    
04335A DD31FD              A 11326    	LD	IY,(IX+%FFFFFFFD)
04335D FD360000            A 11327    	LD	(IY+%0),%0
                           A 11328    ; 3630		}
043361                     A 11329    L_545:
                           A 11330    .LINE 3630
                           A 11331    
                           A 11332    ; 3631	
                           A 11333    ; 3632		if (fs) {
                           A 11334    .LINE 3632
                           A 11335    
043361 DD2706              A 11336    	LD	HL,(IX+%6)
043364 CD 07 46 04         A 11337    	CALL	__icmpzero
043368 28 07               A 11338    	JR	Z,L_546
                           A 11339    ; 3633			fs->fs_type = 0;				
                           A 11340    .LINE 3633
                           A 11341    
04336A DD3106              A 11342    	LD	IY,(IX+%6)
04336D FD360000            A 11343    	LD	(IY+%0),%0
                           A 11344    ; 3634	#if FF_FS_REENTRANT						
                           A 11345    ; 3635			if (!ff_cre_syncobj((BYTE)vol, 
                           A 11346    ; 3636	#endif
                           A 11347    ; 3637		}
043371                     A 11348    L_546:
                           A 11349    .LINE 3637
                           A 11350    
                           A 11351    ; 3638		FatFs[vol] = fs;					
                           A 11352    .LINE 3638
                           A 11353    
043371 DD27F7              A 11354    	LD	HL,(IX+%FFFFFFF7)
043374 DD0706              A 11355    	LD	BC,(IX+%6)
043377 ED0F                A 11356    	LD	(HL),BC
                           A 11357    ; 3639	
                           A 11358    ; 3640		if (opt == 0) return FR_OK;			
                           A 11359    .LINE 3640
                           A 11360    
043379 DD7E0C              A 11361    	LD	A,(IX+%C)
04337C B7                  A 11362    	OR	A,A
04337D 20 05               A 11363    	JR	NZ,L_548
04337F B7                  A 11364    	OR	A,A
043380 ED62                A 11365    	SBC	HL,HL
043382 18 15               A 11366    	JR	L_549
043384                     A 11367    L_548:
                           A 11368    ; 3641	
                           A 11369    ; 3642		res = mount_volume(&path, &fs, 0);	
                           A 11370    .LINE 3642
                           A 11371    
043384 01000000            A 11372    	LD	BC,0
043388 C5                  A 11373    	PUSH	BC
043389 ED6506              A 11374    	PEA	IX+%6
04338C ED6509              A 11375    	PEA	IX+%9
04338F CD 3E 2D 04         A 11376    	CALL	_mount_volume
043393 C1                  A 11377    	POP	BC
043394 C1                  A 11378    	POP	BC
043395 C1                  A 11379    	POP	BC
043396 DD2FF4              A 11380    	LD	(IX+%FFFFFFF4),HL
                           A 11381    ; 3643		LEAVE_FF(fs, res);
                           A 11382    .LINE 3643
                           A 11383    
                           A 11384    ; 3644	}
043399                     A 11385    L_549:
                           A 11386    .LINE 3644
                           A 11387    
043399 DDF9                A 11388    	LD	SP,IX
04339B DDE1                A 11389    	POP	IX
04339D C9                  A 11390    	RET	
                           A 11391    
                           A 11392    
                           A 11393    ;**************************** _f_mount ********
                           A 11394    ;Name                         Addr/Register   S
                           A 11395    ;_FatFs                              STATIC    
                           A 11396    ;rp                                   IX-15    
                           A 11397    ;res                                  IX-12    
                           A 11398    ;G_44                                  IX-9    
                           A 11399    ;vol                                   IX-6    
                           A 11400    ;cfs                                   IX-3    
                           A 11401    ;opt                                  IX+12    
                           A 11402    ;path                                  IX+9    
                           A 11403    ;fs                                    IX+6    
                           A 11404    
                           A 11405    
                           A 11406    ; Stack Frame Size: 30 (bytes)
                           A 11407    ;       Spill Code: -1 (instruction)
                           A 11408    
                           A 11409    
                           A 11410    .ENDFUNC "f_mount",3644,"_f_mount"
                           A 11411    ; 3645	
                           A 11412    ; 3646	
                           A 11413    ; 3647	
                           A 11414    ; 3648	
                           A 11415    ; 3649	/*-------------------------------------
                           A 11416    ; 3650	/* Open or Create a File               
                           A 11417    ; 3651	/*-------------------------------------
                           A 11418    ; 3652	
                           A 11419    ; 3653	FRESULT f_open (
                           A 11420    ; 3654		FIL* fp,			/* Pointer to t
                           A 11421    ; 3655		const TCHAR* path,	/* Pointer to t
                           A 11422    ; 3656		BYTE mode			/* Access mode 
                           A 11423    ; 3657	)
                           A 11424    ; 3658	{
04339E                     A 11425    _f_open:
                           A 11426    .DEFINE "_f_open"
                           A 11427    
                           A 11428    .VALUE _f_open
                           A 11429    
                           A 11430    .CLASS 2
                           A 11431    
                           A 11432    .TYPE 68
                           A 11433    
                           A 11434    .ENDEF
                           A 11435    
                           A 11436    .BEGFUNC "f_open",3658,"_f_open"
                           A 11437    
                           A 11438    .LINE 3658
                           A 11439    
                           A 11440    .DEFINE "fp"
                           A 11441    
                           A 11442    .CLASS 65
                           A 11443    
                           A 11444    .VALUE 6
                           A 11445    
                           A 11446    .TAG "NONAME2"
                           A 11447    
                           A 11448    .TYPE 40
                           A 11449    
                           A 11450    .ENDEF
                           A 11451    
                           A 11452    .DEFINE "path"
                           A 11453    
                           A 11454    .CLASS 65
                           A 11455    
                           A 11456    .VALUE 9
                           A 11457    
                           A 11458    .TYPE 194
                           A 11459    
                           A 11460    .ENDEF
                           A 11461    
                           A 11462    .DEFINE "mode"
                           A 11463    
                           A 11464    .CLASS 65
                           A 11465    
                           A 11466    .VALUE 12
                           A 11467    
                           A 11468    .TYPE 12
                           A 11469    
                           A 11470    .ENDEF
                           A 11471    
                           A 11472    .DEFINE "res"
                           A 11473    
                           A 11474    .CLASS 65
                           A 11475    
                           A 11476    .VALUE -3
                           A 11477    
                           A 11478    .TYPE 4
                           A 11479    
                           A 11480    .ENDEF
                           A 11481    
                           A 11482    .DEFINE "fs"
                           A 11483    
                           A 11484    .CLASS 65
                           A 11485    
                           A 11486    .VALUE -6
                           A 11487    
                           A 11488    .TAG "NONAME0"
                           A 11489    
                           A 11490    .TYPE 40
                           A 11491    
                           A 11492    .ENDEF
                           A 11493    
                           A 11494    .DEFINE "dj"
                           A 11495    
                           A 11496    .CLASS 65
                           A 11497    
                           A 11498    .VALUE -52
                           A 11499    
                           A 11500    .TAG "NONAME3"
                           A 11501    
                           A 11502    .TYPE 8
                           A 11503    
                           A 11504    .ENDEF
                           A 11505    
                           A 11506    .DEFINE "lbuf"
                           A 11507    
                           A 11508    .CLASS 65
                           A 11509    
                           A 11510    .VALUE -564
                           A 11511    
                           A 11512    .DIM 256
                           A 11513    
                           A 11514    .TYPE 109
                           A 11515    
                           A 11516    .ENDEF
                           A 11517    
04339E DDE5                A 11518    	PUSH	IX
0433A0 DD210000 00         A 11519    	LD	IX,0
0433A5 DD39                A 11520    	ADD	IX,SP
0433A7 21C3FDFF            A 11521    	LD	HL,-573
0433AB 39                  A 11522    	ADD	HL,SP
0433AC F9                  A 11523    	LD	SP,HL
                           A 11524    ; 3659		FRESULT res;
                           A 11525    ; 3660		DIR dj;
                           A 11526    ; 3661		FATFS *fs;
                           A 11527    ; 3662	#if !FF_FS_READONLY
                           A 11528    ; 3663		DWORD cl, bcs, clst, tm;
                           A 11529    ; 3664		LBA_t sc;
                           A 11530    ; 3665		FSIZE_t ofs;
                           A 11531    ; 3666	#endif
                           A 11532    ; 3667		DEF_NAMBUF
                           A 11533    ; 3668	
                           A 11534    ; 3669	
                           A 11535    ; 3670		if (!fp) return FR_INVALID_OBJECT;
                           A 11536    .LINE 3670
                           A 11537    
0433AD DD2706              A 11538    	LD	HL,(IX+%6)
0433B0 CD 07 46 04         A 11539    	CALL	__icmpzero
0433B4 20 08               A 11540    	JR	NZ,L_551
0433B6 21090000            A 11541    	LD	HL,9
0433BA C3 E9 34 04         A 11542    	JR	L_563
0433BE                     A 11543    L_551:
                           A 11544    ; 3671	
                           A 11545    ; 3672		/* Get logical drive number */
                           A 11546    ; 3673		mode &= FF_FS_READONLY ? FA_READ : 
                           A 11547    .LINE 3673
                           A 11548    
0433BE DD7E0C              A 11549    	LD	A,(IX+%C)
0433C1 E601                A 11550    	AND	A,%1
0433C3 DD770C              A 11551    	LD	(IX+%C),A
                           A 11552    ; 3674		res = mount_volume(&path, &fs, mode
                           A 11553    .LINE 3674
                           A 11554    
0433C6 DD4E0C              A 11555    	LD	C,(IX+%C)
0433C9 0600                A 11556    	LD	B,%0
0433CB C5                  A 11557    	PUSH	BC
0433CC ED65FA              A 11558    	PEA	IX+%FFFFFFFA
0433CF ED6509              A 11559    	PEA	IX+%9
0433D2 CD 3E 2D 04         A 11560    	CALL	_mount_volume
0433D6 C1                  A 11561    	POP	BC
0433D7 C1                  A 11562    	POP	BC
0433D8 C1                  A 11563    	POP	BC
0433D9 DD2FFD              A 11564    	LD	(IX+%FFFFFFFD),HL
                           A 11565    ; 3675		if (res == FR_OK) {
                           A 11566    .LINE 3675
                           A 11567    
0433DC CD 07 46 04         A 11568    	CALL	__icmpzero
0433E0 C2 D3 34 04         A 11569    	JR	NZ,L_561
                           A 11570    ; 3676			dj.obj.fs = fs;
                           A 11571    .LINE 3676
                           A 11572    
0433E4 DD07FA              A 11573    	LD	BC,(IX+%FFFFFFFA)
0433E7 DD0FCC              A 11574    	LD	(IX+%FFFFFFCC),BC
                           A 11575    ; 3677			INIT_NAMBUF(fs);
                           A 11576    .LINE 3677
                           A 11577    
0433EA DDE5E1              A 11578    	LD	HL,IX
0433ED 01CCFDFF            A 11579    	LD	BC,-564
0433F1 09                  A 11580    	ADD	HL,BC
0433F2 DD31FA              A 11581    	LD	IY,(IX+%FFFFFFFA)
0433F5 FD2F0B              A 11582    	LD	(IY+%B),HL
                           A 11583    ; 3678			res = follow_path(&dj, path);	
                           A 11584    .LINE 3678
                           A 11585    
0433F8 DD0709              A 11586    	LD	BC,(IX+%9)
0433FB C5                  A 11587    	PUSH	BC
0433FC ED65CC              A 11588    	PEA	IX+%FFFFFFCC
0433FF CD AA 27 04         A 11589    	CALL	_follow_path
043403 C1                  A 11590    	POP	BC
043404 C1                  A 11591    	POP	BC
043405 DD2FFD              A 11592    	LD	(IX+%FFFFFFFD),HL
                           A 11593    ; 3679	#if !FF_FS_READONLY	/* Read/Write confi
                           A 11594    ; 3680			if (res == FR_OK) {
                           A 11595    ; 3681				if (dj.fn[NSFLAG] & NS_NONA
                           A 11596    ; 3682					res = FR_INVALID_NAME;
                           A 11597    ; 3683				}
                           A 11598    ; 3684	#if FF_FS_LOCK != 0
                           A 11599    ; 3685				else {
                           A 11600    ; 3686					res = chk_lock(&dj, (mo
                           A 11601    ; 3687				}
                           A 11602    ; 3688	#endif
                           A 11603    ; 3689			}
                           A 11604    ; 3690			/* Create or Open a file */
                           A 11605    ; 3691			if (mode & (FA_CREATE_ALWAYS | 
                           A 11606    ; 3692				if (res != FR_OK) {			
                           A 11607    ; 3693					if (res == FR_NO_FILE) 
                           A 11608    ; 3694	#if FF_FS_LOCK != 0
                           A 11609    ; 3695						res = enq_lock() ? 
                           A 11610    ; 3696	#else
                           A 11611    ; 3697						res = dir_register(
                           A 11612    ; 3698	#endif
                           A 11613    ; 3699					}
                           A 11614    ; 3700					mode |= FA_CREATE_ALWAY
                           A 11615    ; 3701				}
                           A 11616    ; 3702				else {						
                           A 11617    ; 3703					if (dj.obj.attr & (AM_R
                           A 11618    ; 3704						res = FR_DENIED;
                           A 11619    ; 3705					} else {
                           A 11620    ; 3706						if (mode & FA_CREAT
                           A 11621    ; 3707					}
                           A 11622    ; 3708				}
                           A 11623    ; 3709				if (res == FR_OK && (mode &
                           A 11624    ; 3710	#if FF_FS_EXFAT
                           A 11625    ; 3711					if (fs->fs_type == FS_E
                           A 11626    ; 3712						/* Get current allo
                           A 11627    ; 3713						fp->obj.fs = fs;
                           A 11628    ; 3714						init_alloc_info(fs,
                           A 11629    ; 3715						/* Set directory en
                           A 11630    ; 3716						memset(fs->dirbuf +
                           A 11631    ; 3717						memset(fs->dirbuf +
                           A 11632    ; 3718						fs->dirbuf[XDIR_Att
                           A 11633    ; 3719						st_dword(fs->dirbuf
                           A 11634    ; 3720						fs->dirbuf[XDIR_Gen
                           A 11635    ; 3721						res = store_xdir(&d
                           A 11636    ; 3722						if (res == FR_OK &&
                           A 11637    ; 3723							res = remove_ch
                           A 11638    ; 3724							fs->last_clst =
                           A 11639    ; 3725						}
                           A 11640    ; 3726					} else
                           A 11641    ; 3727	#endif
                           A 11642    ; 3728					{
                           A 11643    ; 3729						/* Set directory en
                           A 11644    ; 3730						tm = GET_FATTIME();
                           A 11645    ; 3731						st_dword(dj.dir + D
                           A 11646    ; 3732						st_dword(dj.dir + D
                           A 11647    ; 3733						cl = ld_clust(fs, d
                           A 11648    ; 3734						dj.dir[DIR_Attr] = 
                           A 11649    ; 3735						st_clust(fs, dj.dir
                           A 11650    ; 3736						st_dword(dj.dir + D
                           A 11651    ; 3737						fs->wflag = 1;
                           A 11652    ; 3738						if (cl != 0) {		
                           A 11653    ; 3739							sc = fs->winsec
                           A 11654    ; 3740							res = remove_ch
                           A 11655    ; 3741							if (res == FR_O
                           A 11656    ; 3742								res = move_
                           A 11657    ; 3743								fs->last_cl
                           A 11658    ; 3744							}
                           A 11659    ; 3745						}
                           A 11660    ; 3746					}
                           A 11661    ; 3747				}
                           A 11662    ; 3748			}
                           A 11663    ; 3749			else {	/* Open an existing fil
                           A 11664    ; 3750				if (res == FR_OK) {			
                           A 11665    ; 3751					if (dj.obj.attr & AM_DI
                           A 11666    ; 3752						res = FR_NO_FILE;
                           A 11667    ; 3753					} else {
                           A 11668    ; 3754						if ((mode & FA_WRIT
                           A 11669    ; 3755							res = FR_DENIED
                           A 11670    ; 3756						}
                           A 11671    ; 3757					}
                           A 11672    ; 3758				}
                           A 11673    ; 3759			}
                           A 11674    ; 3760			if (res == FR_OK) {
                           A 11675    ; 3761				if (mode & FA_CREATE_ALWAYS
                           A 11676    ; 3762				fp->dir_sect = fs->winsect;
                           A 11677    ; 3763				fp->dir_ptr = dj.dir;
                           A 11678    ; 3764	#if FF_FS_LOCK != 0
                           A 11679    ; 3765				fp->obj.lockid = inc_lock(&
                           A 11680    ; 3766				if (fp->obj.lockid == 0) re
                           A 11681    ; 3767	#endif
                           A 11682    ; 3768			}
                           A 11683    ; 3769	#else		/* R/O configuration */
                           A 11684    ; 3770			if (res == FR_OK) {
                           A 11685    .LINE 3770
                           A 11686    
043408 CD 07 46 04         A 11687    	CALL	__icmpzero
04340C 20 21               A 11688    	JR	NZ,L_557
                           A 11689    ; 3771				if (dj.fn[NSFLAG] & NS_NONA
                           A 11690    .LINE 3771
                           A 11691    
04340E ED55EA              A 11692    	LEA	IY,IX+%FFFFFFEA
043411 FD7E0B              A 11693    	LD	A,(IY+%B)
043414 E680                A 11694    	AND	A,%80
043416 28 09               A 11695    	JR	Z,L_554
                           A 11696    ; 3772					res = FR_INVALID_NAME;
                           A 11697    .LINE 3772
                           A 11698    
043418 01060000            A 11699    	LD	BC,6
04341C DD0FFD              A 11700    	LD	(IX+%FFFFFFFD),BC
                           A 11701    ; 3773				} else {
                           A 11702    .LINE 3773
                           A 11703    
04341F 18 0E               A 11704    	JR	L_557
043421                     A 11705    L_554:
                           A 11706    ; 3774					if (dj.obj.attr & AM_DI
                           A 11707    .LINE 3774
                           A 11708    
043421 DD7ED1              A 11709    	LD	A,(IX+%FFFFFFD1)
043424 E610                A 11710    	AND	A,%10
043426 28 07               A 11711    	JR	Z,L_557
                           A 11712    ; 3775						res = FR_NO_FILE;
                           A 11713    .LINE 3775
                           A 11714    
043428 01040000            A 11715    	LD	BC,4
04342C DD0FFD              A 11716    	LD	(IX+%FFFFFFFD),BC
                           A 11717    ; 3776					}
                           A 11718    ; 3777				}
                           A 11719    ; 3778			}
04342F                     A 11720    L_557:
                           A 11721    .LINE 3778
                           A 11722    
                           A 11723    ; 3779	#endif
                           A 11724    ; 3780	
                           A 11725    ; 3781			if (res == FR_OK) {
                           A 11726    .LINE 3781
                           A 11727    
04342F DD27FD              A 11728    	LD	HL,(IX+%FFFFFFFD)
043432 CD 07 46 04         A 11729    	CALL	__icmpzero
043436 C2 D3 34 04         A 11730    	JR	NZ,L_558
                           A 11731    ; 3782	#if FF_FS_EXFAT
                           A 11732    ; 3783				if (fs->fs_type == FS_EXFAT
                           A 11733    ; 3784					fp->obj.c_scl = dj.obj.
                           A 11734    ; 3785					fp->obj.c_size = ((DWOR
                           A 11735    ; 3786					fp->obj.c_ofs = dj.blk_
                           A 11736    ; 3787					init_alloc_info(fs, &fp
                           A 11737    ; 3788				} else
                           A 11738    ; 3789	#endif
                           A 11739    ; 3790				{
                           A 11740    ; 3791					fp->obj.sclust = ld_clu
                           A 11741    .LINE 3791
                           A 11742    
04343A DD3106              A 11743    	LD	IY,(IX+%6)
04343D ED2300              A 11744    	LEA	HL,IY+%0
043440 01C9FDFF            A 11745    	LD	BC,-567
043444 CD 65 44 04         A 11746    	CALL	__istix
043448 DD07E7              A 11747    	LD	BC,(IX+%FFFFFFE7)
04344B C5                  A 11748    	PUSH	BC
04344C DD07FA              A 11749    	LD	BC,(IX+%FFFFFFFA)
04344F C5                  A 11750    	PUSH	BC
043450 CD 21 18 04         A 11751    	CALL	_ld_clust
043454 C1                  A 11752    	POP	BC
043455 C1                  A 11753    	POP	BC
043456 DD3106              A 11754    	LD	IY,(IX+%6)
043459 FD2F07              A 11755    	LD	(IY+%7),HL
04345C FD730A              A 11756    	LD	(IY+%A),E
                           A 11757    ; 3792					fp->obj.objsize = ld_dw
                           A 11758    .LINE 3792
                           A 11759    
04345F DD31E7              A 11760    	LD	IY,(IX+%FFFFFFE7)
043462 ED031C              A 11761    	LEA	BC,IY+%1C
043465 C5                  A 11762    	PUSH	BC
043466 CD B6 0E 04         A 11763    	CALL	_ld_dword
04346A C1                  A 11764    	POP	BC
04346B 01C3FDFF            A 11765    	LD	BC,-573	; spill
04346F CD 65 44 04         A 11766    	CALL	__istix
043473 01C9FDFF            A 11767    	LD	BC,-567
043477 CD B5 47 04         A 11768    	CALL	__ildix
04347B E5FDE1              A 11769    	LD	IY,HL
04347E 01C3FDFF            A 11770    	LD	BC,-573	; unspill
043482 CD B5 47 04         A 11771    	CALL	__ildix
043486 FD2F0B              A 11772    	LD	(IY+%B),HL
043489 FD730E              A 11773    	LD	(IY+%E),E
                           A 11774    ; 3793				}
                           A 11775    ; 3794	#if FF_USE_FASTSEEK
                           A 11776    ; 3795				fp->cltbl = 0;		/* Disa
                           A 11777    ; 3796	#endif
                           A 11778    ; 3797				fp->obj.fs = fs;	/* Vali
                           A 11779    .LINE 3797
                           A 11780    
04348C 01C9FDFF            A 11781    	LD	BC,-567
043490 CD B5 47 04         A 11782    	CALL	__ildix
043494 DD07FA              A 11783    	LD	BC,(IX+%FFFFFFFA)
043497 E5FDE1              A 11784    	LD	IY,HL
04349A FD0F00              A 11785    	LD	(IY+%0),BC
                           A 11786    ; 3798				fp->obj.id = fs->id;
                           A 11787    .LINE 3798
                           A 11788    
04349D 01C9FDFF            A 11789    	LD	BC,-567
0434A1 CD B5 47 04         A 11790    	CALL	__ildix
0434A5 DD31FA              A 11791    	LD	IY,(IX+%FFFFFFFA)
0434A8 FD0705              A 11792    	LD	BC,(IY+%5)
0434AB E5FDE1              A 11793    	LD	IY,HL
0434AE FD7103              A 11794    	LD	(IY+%3),C
0434B1 FD7004              A 11795    	LD	(IY+%4),B
                           A 11796    ; 3799				fp->flag = mode;	/* Set 
                           A 11797    .LINE 3799
                           A 11798    
0434B4 DD7E0C              A 11799    	LD	A,(IX+%C)
0434B7 DD3106              A 11800    	LD	IY,(IX+%6)
0434BA FD770F              A 11801    	LD	(IY+%F),A
                           A 11802    ; 3800				fp->err = 0;		/* Clea
                           A 11803    .LINE 3800
                           A 11804    
0434BD FD361000            A 11805    	LD	(IY+%10),%0
                           A 11806    ; 3801				fp->sect = 0;		/* Inva
                           A 11807    .LINE 3801
                           A 11808    
0434C1 01000000            A 11809    	LD	BC,0
0434C5 FD0F19              A 11810    	LD	(IY+%19),BC
0434C8 FD361C00            A 11811    	LD	(IY+%1C),%0
                           A 11812    ; 3802				fp->fptr = 0;		/* Set 
                           A 11813    .LINE 3802
                           A 11814    
0434CC FD0F11              A 11815    	LD	(IY+%11),BC
0434CF FD361400            A 11816    	LD	(IY+%14),%0
                           A 11817    ; 3803	#if !FF_FS_READONLY
                           A 11818    ; 3804	#if !FF_FS_TINY
                           A 11819    ; 3805				memset(fp->buf, 0, sizeof f
                           A 11820    ; 3806	#endif
                           A 11821    ; 3807				if ((mode & FA_SEEKEND) && 
                           A 11822    ; 3808					fp->fptr = fp->obj.objs
                           A 11823    ; 3809					bcs = (DWORD)fs->csize 
                           A 11824    ; 3810					clst = fp->obj.sclust;	
                           A 11825    ; 3811					for (ofs = fp->obj.objs
                           A 11826    ; 3812						clst = get_fat(&fp-
                           A 11827    ; 3813						if (clst <= 1) res 
                           A 11828    ; 3814						if (clst == 0xFFFFF
                           A 11829    ; 3815					}
                           A 11830    ; 3816					fp->clust = clst;
                           A 11831    ; 3817					if (res == FR_OK && ofs
                           A 11832    ; 3818						sc = clst2sect(fs, 
                           A 11833    ; 3819						if (sc == 0) {
                           A 11834    ; 3820							res = FR_INT_ER
                           A 11835    ; 3821						} else {
                           A 11836    ; 3822							fp->sect = sc +
                           A 11837    ; 3823	#if !FF_FS_TINY
                           A 11838    ; 3824							if (disk_read(f
                           A 11839    ; 3825	#endif
                           A 11840    ; 3826						}
                           A 11841    ; 3827					}
                           A 11842    ; 3828	#if FF_FS_LOCK != 0
                           A 11843    ; 3829					if (res != FR_OK) dec_l
                           A 11844    ; 3830	#endif
                           A 11845    ; 3831				}
                           A 11846    ; 3832	#endif
                           A 11847    ; 3833			}
0434D3                     A 11848    L_558:
                           A 11849    .LINE 3833
                           A 11850    
                           A 11851    ; 3834	
                           A 11852    ; 3835			FREE_NAMBUF();
                           A 11853    ; 3836		}
0434D3                     A 11854    L_561:
                           A 11855    .LINE 3836
                           A 11856    
                           A 11857    ; 3837	
                           A 11858    ; 3838		if (res != FR_OK) fp->obj.fs = 0;	
                           A 11859    .LINE 3838
                           A 11860    
0434D3 DD27FD              A 11861    	LD	HL,(IX+%FFFFFFFD)
0434D6 CD 07 46 04         A 11862    	CALL	__icmpzero
0434DA 28 0A               A 11863    	JR	Z,L_562
0434DC 01000000            A 11864    	LD	BC,0
0434E0 DD3106              A 11865    	LD	IY,(IX+%6)
0434E3 FD0F00              A 11866    	LD	(IY+%0),BC
0434E6                     A 11867    L_562:
                           A 11868    ; 3839	
                           A 11869    ; 3840		LEAVE_FF(fs, res);
                           A 11870    .LINE 3840
                           A 11871    
0434E6 DD27FD              A 11872    	LD	HL,(IX+%FFFFFFFD)
                           A 11873    ; 3841	}
0434E9                     A 11874    L_563:
                           A 11875    .LINE 3841
                           A 11876    
0434E9 DDF9                A 11877    	LD	SP,IX
0434EB DDE1                A 11878    	POP	IX
0434ED C9                  A 11879    	RET	
                           A 11880    
                           A 11881    
                           A 11882    ;**************************** _f_open *********
                           A 11883    ;Name                         Addr/Register   S
                           A 11884    ;lbuf                                IX-564    
                           A 11885    ;dj                                   IX-52    
                           A 11886    ;fs                                    IX-6    
                           A 11887    ;res                                   IX-3    
                           A 11888    ;mode                                 IX+12    
                           A 11889    ;path                                  IX+9    
                           A 11890    ;fp                                    IX+6    
                           A 11891    
                           A 11892    
                           A 11893    ; Stack Frame Size: 588 (bytes)
                           A 11894    ;       Spill Code: -1 (instruction)
                           A 11895    
                           A 11896    
                           A 11897    .ENDFUNC "f_open",3841,"_f_open"
                           A 11898    ; 3842	
                           A 11899    ; 3843	
                           A 11900    ; 3844	
                           A 11901    ; 3845	
                           A 11902    ; 3846	/*-------------------------------------
                           A 11903    ; 3847	/* Read File                           
                           A 11904    ; 3848	/*-------------------------------------
                           A 11905    ; 3849	
                           A 11906    ; 3850	FRESULT f_read (
                           A 11907    ; 3851		FIL* fp, 	/* Open file to be read
                           A 11908    ; 3852		void* buff,	/* Data buffer to store
                           A 11909    ; 3853		UINT btr,	/* Number of bytes to r
                           A 11910    ; 3854		UINT* br	/* Number of bytes read
                           A 11911    ; 3855	)
                           A 11912    ; 3856	{
0434EE                     A 11913    _f_read:
                           A 11914    .DEFINE "_f_read"
                           A 11915    
                           A 11916    .VALUE _f_read
                           A 11917    
                           A 11918    .CLASS 2
                           A 11919    
                           A 11920    .TYPE 68
                           A 11921    
                           A 11922    .ENDEF
                           A 11923    
                           A 11924    .BEGFUNC "f_read",3856,"_f_read"
                           A 11925    
                           A 11926    .LINE 3856
                           A 11927    
                           A 11928    .DEFINE "fp"
                           A 11929    
                           A 11930    .CLASS 65
                           A 11931    
                           A 11932    .VALUE 6
                           A 11933    
                           A 11934    .TAG "NONAME2"
                           A 11935    
                           A 11936    .TYPE 40
                           A 11937    
                           A 11938    .ENDEF
                           A 11939    
                           A 11940    .DEFINE "buff"
                           A 11941    
                           A 11942    .CLASS 65
                           A 11943    
                           A 11944    .VALUE 9
                           A 11945    
                           A 11946    .TYPE 33
                           A 11947    
                           A 11948    .ENDEF
                           A 11949    
                           A 11950    .DEFINE "btr"
                           A 11951    
                           A 11952    .CLASS 65
                           A 11953    
                           A 11954    .VALUE 12
                           A 11955    
                           A 11956    .TYPE 14
                           A 11957    
                           A 11958    .ENDEF
                           A 11959    
                           A 11960    .DEFINE "br"
                           A 11961    
                           A 11962    .CLASS 65
                           A 11963    
                           A 11964    .VALUE 15
                           A 11965    
                           A 11966    .TYPE 46
                           A 11967    
                           A 11968    .ENDEF
                           A 11969    
                           A 11970    .DEFINE "rcnt"
                           A 11971    
                           A 11972    .CLASS 65
                           A 11973    
                           A 11974    .VALUE -3
                           A 11975    
                           A 11976    .TYPE 14
                           A 11977    
                           A 11978    .ENDEF
                           A 11979    
                           A 11980    .DEFINE "fs"
                           A 11981    
                           A 11982    .CLASS 65
                           A 11983    
                           A 11984    .VALUE -6
                           A 11985    
                           A 11986    .TAG "NONAME0"
                           A 11987    
                           A 11988    .TYPE 40
                           A 11989    
                           A 11990    .ENDEF
                           A 11991    
                           A 11992    .DEFINE "cc"
                           A 11993    
                           A 11994    .CLASS 65
                           A 11995    
                           A 11996    .VALUE -9
                           A 11997    
                           A 11998    .TYPE 14
                           A 11999    
                           A 12000    .ENDEF
                           A 12001    
                           A 12002    .DEFINE "res"
                           A 12003    
                           A 12004    .CLASS 65
                           A 12005    
                           A 12006    .VALUE -12
                           A 12007    
                           A 12008    .TYPE 4
                           A 12009    
                           A 12010    .ENDEF
                           A 12011    
                           A 12012    .DEFINE "sect"
                           A 12013    
                           A 12014    .CLASS 65
                           A 12015    
                           A 12016    .VALUE -16
                           A 12017    
                           A 12018    .TYPE 15
                           A 12019    
                           A 12020    .ENDEF
                           A 12021    
                           A 12022    .DEFINE "csect"
                           A 12023    
                           A 12024    .CLASS 65
                           A 12025    
                           A 12026    .VALUE -19
                           A 12027    
                           A 12028    .TYPE 14
                           A 12029    
                           A 12030    .ENDEF
                           A 12031    
                           A 12032    .DEFINE "rbuff"
                           A 12033    
                           A 12034    .CLASS 65
                           A 12035    
                           A 12036    .VALUE -22
                           A 12037    
                           A 12038    .TYPE 44
                           A 12039    
                           A 12040    .ENDEF
                           A 12041    
                           A 12042    .DEFINE "clst"
                           A 12043    
                           A 12044    .CLASS 65
                           A 12045    
                           A 12046    .VALUE -26
                           A 12047    
                           A 12048    .TYPE 15
                           A 12049    
                           A 12050    .ENDEF
                           A 12051    
                           A 12052    .DEFINE "remain"
                           A 12053    
                           A 12054    .CLASS 65
                           A 12055    
                           A 12056    .VALUE -34
                           A 12057    
                           A 12058    .TYPE 15
                           A 12059    
                           A 12060    .ENDEF
                           A 12061    
0434EE DDE5                A 12062    	PUSH	IX
0434F0 DD210000 00         A 12063    	LD	IX,0
0434F5 DD39                A 12064    	ADD	IX,SP
0434F7 ED22DA              A 12065    	LEA	HL,IX+%FFFFFFDA
0434FA F9                  A 12066    	LD	SP,HL
                           A 12067    ; 3857		FRESULT res;
                           A 12068    ; 3858		FATFS *fs;
                           A 12069    ; 3859		DWORD clst;
                           A 12070    ; 3860		LBA_t sect;
                           A 12071    ; 3861		FSIZE_t remain;
                           A 12072    ; 3862		UINT rcnt, cc, csect;
                           A 12073    ; 3863		BYTE *rbuff = (BYTE*)buff;
                           A 12074    .LINE 3863
                           A 12075    
0434FB DD0709              A 12076    	LD	BC,(IX+%9)
0434FE DD0FEA              A 12077    	LD	(IX+%FFFFFFEA),BC
                           A 12078    ; 3864	
                           A 12079    ; 3865	
                           A 12080    ; 3866		*br = 0;	/* Clear read byte coun
                           A 12081    .LINE 3866
                           A 12082    
043501 DD270F              A 12083    	LD	HL,(IX+%F)
043504 01000000            A 12084    	LD	BC,0
043508 ED0F                A 12085    	LD	(HL),BC
                           A 12086    ; 3867		res = validate(&fp->obj, &fs);		
                           A 12087    .LINE 3867
                           A 12088    
04350A ED65FA              A 12089    	PEA	IX+%FFFFFFFA
04350D DD3106              A 12090    	LD	IY,(IX+%6)
043510 ED6600              A 12091    	PEA	IY+%0
043513 CD 86 32 04         A 12092    	CALL	_validate
043517 C1                  A 12093    	POP	BC
043518 C1                  A 12094    	POP	BC
043519 DD2FF4              A 12095    	LD	(IX+%FFFFFFF4),HL
                           A 12096    ; 3868		if (res != FR_OK || (res = (FRESULT
                           A 12097    .LINE 3868
                           A 12098    
04351C CD 07 46 04         A 12099    	CALL	__icmpzero
043520 20 13               A 12100    	JR	NZ,L_565
043522 DD3106              A 12101    	LD	IY,(IX+%6)
043525 FD7E10              A 12102    	LD	A,(IY+%10)
043528 B7ED62              A 12103    	UEXT	HL
04352B 6F                  A 12104    	LD	L,A
04352C DD2FF4              A 12105    	LD	(IX+%FFFFFFF4),HL
04352F CD 07 46 04         A 12106    	CALL	__icmpzero
043533 28 07               A 12107    	JR	Z,L_567
043535                     A 12108    L_565:
043535 DD27F4              A 12109    	LD	HL,(IX+%FFFFFFF4)
043538 C3 24 38 04         A 12110    	JR	L_598
04353C                     A 12111    L_567:
                           A 12112    ; 3869		if (!(fp->flag & FA_READ)) LEAVE_FF
                           A 12113    .LINE 3869
                           A 12114    
04353C DD3106              A 12115    	LD	IY,(IX+%6)
04353F FD7E0F              A 12116    	LD	A,(IY+%F)
043542 E601                A 12117    	AND	A,%1
043544 20 08               A 12118    	JR	NZ,L_568
043546 21070000            A 12119    	LD	HL,7
04354A C3 24 38 04         A 12120    	JR	L_598
04354E                     A 12121    L_568:
                           A 12122    ; 3870		remain = fp->obj.objsize - fp->fptr
                           A 12123    .LINE 3870
                           A 12124    
04354E DD3106              A 12125    	LD	IY,(IX+%6)
043551 FD270B              A 12126    	LD	HL,(IY+%B)
043554 FD5E0E              A 12127    	LD	E,(IY+%E)
043557 FD0711              A 12128    	LD	BC,(IY+%11)
04355A FD7E14              A 12129    	LD	A,(IY+%14)
04355D CD 9D 45 04         A 12130    	CALL	__lsub
043561 DD2FDE              A 12131    	LD	(IX+%FFFFFFDE),HL
043564 DD73E1              A 12132    	LD	(IX+%FFFFFFE1),E
                           A 12133    ; 3871		if (btr > remain) btr = (UINT)remai
                           A 12134    .LINE 3871
                           A 12135    
043567 DD070C              A 12136    	LD	BC,(IX+%C)
04356A AF                  A 12137    	XOR	A,A
04356B DD27DE              A 12138    	LD	HL,(IX+%FFFFFFDE)
04356E DD5EE1              A 12139    	LD	E,(IX+%FFFFFFE1)
043571 CD AA 46 04         A 12140    	CALL	__lcmpu
043575 D2 14 38 04         A 12141    	JR	NC,L_595
043579 DD07DE              A 12142    	LD	BC,(IX+%FFFFFFDE)
04357C DD0F0C              A 12143    	LD	(IX+%C),BC
                           A 12144    ; 3872	
                           A 12145    ; 3873		for ( ; btr > 0; btr -= rcnt, *br +
                           A 12146    .LINE 3873
                           A 12147    
04357F C3 14 38 04         A 12148    	JR	L_595
043583                     A 12149    L_593:
                           A 12150    ; 3874			if (fp->fptr % SS(fs) == 0) {	
                           A 12151    .LINE 3874
                           A 12152    
043583 DD3106              A 12153    	LD	IY,(IX+%6)
043586 FD0711              A 12154    	LD	BC,(IY+%11)
043589 FD7E14              A 12155    	LD	A,(IY+%14)
04358C DD0FE2              A 12156    	LD	(IX+%FFFFFFE2),BC
04358F DD77E5              A 12157    	LD	(IX+%FFFFFFE5),A
043592 C5E1                A 12158    	LD	HL,BC
043594 DD5EE5              A 12159    	LD	E,(IX+%FFFFFFE5)
043597 01FF0100            A 12160    	LD	BC,511
04359B AF                  A 12161    	XOR	A,A
04359C CD D6 47 04         A 12162    	CALL	__land
0435A0 CD DA 44 04         A 12163    	CALL	__lcmpzero
0435A4 C2 51 37 04         A 12164    	JR	NZ,L_588
                           A 12165    ; 3875				csect = (UINT)(fp->fptr / S
                           A 12166    .LINE 3875
                           A 12167    
0435A8 DD31FA              A 12168    	LD	IY,(IX+%FFFFFFFA)
0435AB FD0709              A 12169    	LD	BC,(IY+%9)
0435AE CD 95 44 04         A 12170    	CALL	__stoiu
0435B2 2B                  A 12171    	DEC	HL
0435B3 E5C1                A 12172    	LD	BC,HL
0435B5 CD A3 46 04         A 12173    	CALL	__itol
0435B9 DD0FDB              A 12174    	LD	(IX+%FFFFFFDB),BC
0435BC 5F                  A 12175    	LD	E,A
0435BD DD07E2              A 12176    	LD	BC,(IX+%FFFFFFE2)
0435C0 DD7EE5              A 12177    	LD	A,(IX+%FFFFFFE5)
0435C3 2E09                A 12178    	LD	L,%9
0435C5 CD A9 45 04         A 12179    	CALL	__lshru
0435C9 DD27DB              A 12180    	LD	HL,(IX+%FFFFFFDB)
0435CC CD D6 47 04         A 12181    	CALL	__land
0435D0 DD2FED              A 12182    	LD	(IX+%FFFFFFED),HL
                           A 12183    ; 3876				if (csect == 0) {			
                           A 12184    .LINE 3876
                           A 12185    
0435D3 CD 07 46 04         A 12186    	CALL	__icmpzero
0435D7 C2 66 36 04         A 12187    	JR	NZ,L_578
                           A 12188    ; 3877					if (fp->fptr == 0) {	
                           A 12189    .LINE 3877
                           A 12190    
0435DB DD27E2              A 12191    	LD	HL,(IX+%FFFFFFE2)
0435DE DD5EE5              A 12192    	LD	E,(IX+%FFFFFFE5)
0435E1 CD DA 44 04         A 12193    	CALL	__lcmpzero
0435E5 20 11               A 12194    	JR	NZ,L_571
                           A 12195    ; 3878						clst = fp->obj.sclu
                           A 12196    .LINE 3878
                           A 12197    
0435E7 DD3106              A 12198    	LD	IY,(IX+%6)
0435EA FD0707              A 12199    	LD	BC,(IY+%7)
0435ED FD7E0A              A 12200    	LD	A,(IY+%A)
0435F0 DD0FE6              A 12201    	LD	(IX+%FFFFFFE6),BC
0435F3 DD77E9              A 12202    	LD	(IX+%FFFFFFE9),A
                           A 12203    ; 3879					} else {				
                           A 12204    .LINE 3879
                           A 12205    
0435F6 18 1E               A 12206    	JR	L_573
0435F8                     A 12207    L_571:
                           A 12208    ; 3880	#if FF_USE_FASTSEEK
                           A 12209    ; 3881						if (fp->cltbl) {
                           A 12210    ; 3882							clst = clmt_clu
                           A 12211    ; 3883						} else
                           A 12212    ; 3884	#endif
                           A 12213    ; 3885						{
                           A 12214    ; 3886							clst = get_fat(
                           A 12215    .LINE 3886
                           A 12216    
0435F8 DD3106              A 12217    	LD	IY,(IX+%6)
0435FB FD0715              A 12218    	LD	BC,(IY+%15)
0435FE FD7E18              A 12219    	LD	A,(IY+%18)
043601 2600                A 12220    	LD	H,%0
043603 6F                  A 12221    	LD	L,A
043604 E5                  A 12222    	PUSH	HL
043605 C5                  A 12223    	PUSH	BC
043606 ED6600              A 12224    	PEA	IY+%0
043609 CD BC 11 04         A 12225    	CALL	_get_fat
04360D C1                  A 12226    	POP	BC
04360E C1                  A 12227    	POP	BC
04360F C1                  A 12228    	POP	BC
043610 DD2FE6              A 12229    	LD	(IX+%FFFFFFE6),HL
043613 DD73E9              A 12230    	LD	(IX+%FFFFFFE9),E
                           A 12231    ; 3887						}
                           A 12232    ; 3888					}
043616                     A 12233    L_573:
                           A 12234    .LINE 3888
                           A 12235    
                           A 12236    ; 3889					if (clst < 2) ABORT(fs,
                           A 12237    .LINE 3889
                           A 12238    
043616 DD27E6              A 12239    	LD	HL,(IX+%FFFFFFE6)
043619 DD5EE9              A 12240    	LD	E,(IX+%FFFFFFE9)
04361C 01020000            A 12241    	LD	BC,2
043620 AF                  A 12242    	XOR	A,A
043621 CD AA 46 04         A 12243    	CALL	__lcmpu
043625 30 0F               A 12244    	JR	NC,L_574
043627 DD3106              A 12245    	LD	IY,(IX+%6)
04362A FD361002            A 12246    	LD	(IY+%10),%2
04362E 21020000            A 12247    	LD	HL,2
043632 C3 24 38 04         A 12248    	JR	L_598
043636                     A 12249    L_574:
                           A 12250    ; 3890					if (clst == 0xFFFFFFFF)
                           A 12251    .LINE 3890
                           A 12252    
043636 DD27E6              A 12253    	LD	HL,(IX+%FFFFFFE6)
043639 DD5EE9              A 12254    	LD	E,(IX+%FFFFFFE9)
04363C 01FFFFFF            A 12255    	LD	BC,16777215
043640 3EFF                A 12256    	LD	A,%FF
043642 CD AA 46 04         A 12257    	CALL	__lcmpu
043646 20 0F               A 12258    	JR	NZ,L_576
043648 DD3106              A 12259    	LD	IY,(IX+%6)
04364B FD361001            A 12260    	LD	(IY+%10),%1
04364F 21010000            A 12261    	LD	HL,1
043653 C3 24 38 04         A 12262    	JR	L_598
043657                     A 12263    L_576:
                           A 12264    ; 3891					fp->clust = clst;		
                           A 12265    .LINE 3891
                           A 12266    
043657 DD07E6              A 12267    	LD	BC,(IX+%FFFFFFE6)
04365A DD7EE9              A 12268    	LD	A,(IX+%FFFFFFE9)
04365D DD3106              A 12269    	LD	IY,(IX+%6)
043660 FD0F15              A 12270    	LD	(IY+%15),BC
043663 FD7718              A 12271    	LD	(IY+%18),A
                           A 12272    ; 3892				}
043666                     A 12273    L_578:
                           A 12274    .LINE 3892
                           A 12275    
                           A 12276    ; 3893				sect = clst2sect(fs, fp->cl
                           A 12277    .LINE 3893
                           A 12278    
043666 DD3106              A 12279    	LD	IY,(IX+%6)
043669 FD0715              A 12280    	LD	BC,(IY+%15)
04366C FD7E18              A 12281    	LD	A,(IY+%18)
04366F 2600                A 12282    	LD	H,%0
043671 6F                  A 12283    	LD	L,A
043672 E5                  A 12284    	PUSH	HL
043673 C5                  A 12285    	PUSH	BC
043674 DD07FA              A 12286    	LD	BC,(IX+%FFFFFFFA)
043677 C5                  A 12287    	PUSH	BC
043678 CD 51 11 04         A 12288    	CALL	_clst2sect
04367C C1                  A 12289    	POP	BC
04367D C1                  A 12290    	POP	BC
04367E C1                  A 12291    	POP	BC
04367F DD2FF0              A 12292    	LD	(IX+%FFFFFFF0),HL
043682 DD73F3              A 12293    	LD	(IX+%FFFFFFF3),E
                           A 12294    ; 3894				if (sect == 0) ABORT(fs, FR
                           A 12295    .LINE 3894
                           A 12296    
043685 DD27F0              A 12297    	LD	HL,(IX+%FFFFFFF0)
043688 DD5EF3              A 12298    	LD	E,(IX+%FFFFFFF3)
04368B CD DA 44 04         A 12299    	CALL	__lcmpzero
04368F 20 0F               A 12300    	JR	NZ,L_580
043691 DD3106              A 12301    	LD	IY,(IX+%6)
043694 FD361002            A 12302    	LD	(IY+%10),%2
043698 21020000            A 12303    	LD	HL,2
04369C C3 24 38 04         A 12304    	JR	L_598
0436A0                     A 12305    L_580:
                           A 12306    ; 3895				sect += csect;
                           A 12307    .LINE 3895
                           A 12308    
0436A0 DD07ED              A 12309    	LD	BC,(IX+%FFFFFFED)
0436A3 AF                  A 12310    	XOR	A,A
0436A4 DD27F0              A 12311    	LD	HL,(IX+%FFFFFFF0)
0436A7 DD5EF3              A 12312    	LD	E,(IX+%FFFFFFF3)
0436AA CD C7 43 04         A 12313    	CALL	__ladd
0436AE DD2FF0              A 12314    	LD	(IX+%FFFFFFF0),HL
0436B1 DD73F3              A 12315    	LD	(IX+%FFFFFFF3),E
                           A 12316    ; 3896				cc = btr / SS(fs);			
                           A 12317    .LINE 3896
                           A 12318    
0436B4 DD270C              A 12319    	LD	HL,(IX+%C)
0436B7 3E09                A 12320    	LD	A,%9
0436B9 CD 7E 46 04         A 12321    	CALL	__ishru_b
0436BD DD2FF7              A 12322    	LD	(IX+%FFFFFFF7),HL
                           A 12323    ; 3897				if (cc > 0) {				
                           A 12324    .LINE 3897
                           A 12325    
0436C0 E5C1                A 12326    	LD	BC,HL
0436C2 B7                  A 12327    	OR	A,A
0436C3 ED62                A 12328    	SBC	HL,HL
0436C5 B7                  A 12329    	OR	A,A
0436C6 ED42                A 12330    	SBC	HL,BC
0436C8 30 78               A 12331    	JR	NC,L_586
                           A 12332    ; 3898					if (csect + cc > fs->cs
                           A 12333    .LINE 3898
                           A 12334    
0436CA DD31FA              A 12335    	LD	IY,(IX+%FFFFFFFA)
0436CD FD0709              A 12336    	LD	BC,(IY+%9)
0436D0 CD 95 44 04         A 12337    	CALL	__stoiu
0436D4 E5C1                A 12338    	LD	BC,HL
0436D6 DD17F7              A 12339    	LD	DE,(IX+%FFFFFFF7)
0436D9 DD27ED              A 12340    	LD	HL,(IX+%FFFFFFED)
0436DC 19                  A 12341    	ADD	HL,DE
0436DD E5D1                A 12342    	LD	DE,HL
0436DF C5E1                A 12343    	LD	HL,BC
0436E1 B7                  A 12344    	OR	A,A
0436E2 ED52                A 12345    	SBC	HL,DE
0436E4 30 13               A 12346    	JR	NC,L_583
                           A 12347    ; 3899						cc = fs->csize - cs
                           A 12348    .LINE 3899
                           A 12349    
0436E6 DD31FA              A 12350    	LD	IY,(IX+%FFFFFFFA)
0436E9 FD0709              A 12351    	LD	BC,(IY+%9)
0436EC CD 95 44 04         A 12352    	CALL	__stoiu
0436F0 DD07ED              A 12353    	LD	BC,(IX+%FFFFFFED)
0436F3 B7                  A 12354    	OR	A,A
0436F4 ED42                A 12355    	SBC	HL,BC
0436F6 DD2FF7              A 12356    	LD	(IX+%FFFFFFF7),HL
                           A 12357    ; 3900					}
0436F9                     A 12358    L_583:
                           A 12359    .LINE 3900
                           A 12360    
                           A 12361    ; 3901					if (disk_read(fs->pdrv,
                           A 12362    .LINE 3901
                           A 12363    
0436F9 DD07F7              A 12364    	LD	BC,(IX+%FFFFFFF7)
0436FC C5                  A 12365    	PUSH	BC
0436FD DD4EF3              A 12366    	LD	C,(IX+%FFFFFFF3)
043700 0600                A 12367    	LD	B,%0
043702 C5                  A 12368    	PUSH	BC
043703 DD07F0              A 12369    	LD	BC,(IX+%FFFFFFF0)
043706 C5                  A 12370    	PUSH	BC
043707 DD07EA              A 12371    	LD	BC,(IX+%FFFFFFEA)
04370A C5                  A 12372    	PUSH	BC
04370B DD31FA              A 12373    	LD	IY,(IX+%FFFFFFFA)
04370E FD4E01              A 12374    	LD	C,(IY+%1)
043711 0600                A 12375    	LD	B,%0
043713 C5                  A 12376    	PUSH	BC
043714 CD 20 3E 04         A 12377    	CALL	_disk_read
043718 C1                  A 12378    	POP	BC
043719 C1                  A 12379    	POP	BC
04371A C1                  A 12380    	POP	BC
04371B C1                  A 12381    	POP	BC
04371C C1                  A 12382    	POP	BC
04371D CD 07 46 04         A 12383    	CALL	__icmpzero
043721 28 0F               A 12384    	JR	Z,L_584
043723 DD3106              A 12385    	LD	IY,(IX+%6)
043726 FD361001            A 12386    	LD	(IY+%10),%1
04372A 21010000            A 12387    	LD	HL,1
04372E C3 24 38 04         A 12388    	JR	L_598
043732                     A 12389    L_584:
                           A 12390    ; 3902	#if !FF_FS_READONLY && FF_FS_MINIMIZE <
                           A 12391    ; 3903	#if FF_FS_TINY
                           A 12392    ; 3904					if (fs->wflag && fs->wi
                           A 12393    ; 3905						memcpy(rbuff + ((fs
                           A 12394    ; 3906					}
                           A 12395    ; 3907	#else
                           A 12396    ; 3908					if ((fp->flag & FA_DIRT
                           A 12397    ; 3909						memcpy(rbuff + ((fp
                           A 12398    ; 3910					}
                           A 12399    ; 3911	#endif
                           A 12400    ; 3912	#endif
                           A 12401    ; 3913					rcnt = SS(fs) * cc;		
                           A 12402    .LINE 3913
                           A 12403    
043732 DD27F7              A 12404    	LD	HL,(IX+%FFFFFFF7)
043735 3E09                A 12405    	LD	A,%9
043737 CD 52 47 04         A 12406    	CALL	__ishl_b
04373B DD2FFD              A 12407    	LD	(IX+%FFFFFFFD),HL
                           A 12408    ; 3914					continue;
                           A 12409    .LINE 3914
                           A 12410    
04373E C3 D8 37 04         A 12411    	JR	L_594
                           A 12412    ; 3915				}
043742                     A 12413    L_586:
                           A 12414    .LINE 3915
                           A 12415    
                           A 12416    ; 3916	#if !FF_FS_TINY
                           A 12417    ; 3917				if (fp->sect != sect) {		
                           A 12418    ; 3918	#if !FF_FS_READONLY
                           A 12419    ; 3919					if (fp->flag & FA_DIRTY
                           A 12420    ; 3920						if (disk_write(fs->
                           A 12421    ; 3921						fp->flag &= (BYTE)~
                           A 12422    ; 3922					}
                           A 12423    ; 3923	#endif
                           A 12424    ; 3924					if (disk_read(fs->pdrv,
                           A 12425    ; 3925				}
                           A 12426    ; 3926	#endif
                           A 12427    ; 3927				fp->sect = sect;
                           A 12428    .LINE 3927
                           A 12429    
043742 DD07F0              A 12430    	LD	BC,(IX+%FFFFFFF0)
043745 DD56F3              A 12431    	LD	D,(IX+%FFFFFFF3)
043748 DD3106              A 12432    	LD	IY,(IX+%6)
04374B FD0F19              A 12433    	LD	(IY+%19),BC
04374E FD721C              A 12434    	LD	(IY+%1C),D
                           A 12435    ; 3928			}
043751                     A 12436    L_588:
                           A 12437    .LINE 3928
                           A 12438    
                           A 12439    ; 3929			rcnt = SS(fs) - (UINT)fp->fptr 
                           A 12440    .LINE 3929
                           A 12441    
043751 DD3106              A 12442    	LD	IY,(IX+%6)
043754 FD2711              A 12443    	LD	HL,(IY+%11)
043757 01FF0100            A 12444    	LD	BC,511
04375B CD 16 47 04         A 12445    	CALL	__iand
04375F E5C1                A 12446    	LD	BC,HL
043761 21000200            A 12447    	LD	HL,512
043765 B7                  A 12448    	OR	A,A
043766 ED42                A 12449    	SBC	HL,BC
043768 DD2FFD              A 12450    	LD	(IX+%FFFFFFFD),HL
                           A 12451    ; 3930			if (rcnt > btr) rcnt = btr;		
                           A 12452    .LINE 3930
                           A 12453    
04376B E5C1                A 12454    	LD	BC,HL
04376D DD270C              A 12455    	LD	HL,(IX+%C)
043770 B7                  A 12456    	OR	A,A
043771 ED42                A 12457    	SBC	HL,BC
043773 30 06               A 12458    	JR	NC,L_591
043775 DD070C              A 12459    	LD	BC,(IX+%C)
043778 DD0FFD              A 12460    	LD	(IX+%FFFFFFFD),BC
04377B                     A 12461    L_591:
                           A 12462    ; 3931	#if FF_FS_TINY
                           A 12463    ; 3932			if (move_window(fs, fp->sect) !
                           A 12464    .LINE 3932
                           A 12465    
04377B DD3106              A 12466    	LD	IY,(IX+%6)
04377E FD0719              A 12467    	LD	BC,(IY+%19)
043781 FD7E1C              A 12468    	LD	A,(IY+%1C)
043784 2600                A 12469    	LD	H,%0
043786 6F                  A 12470    	LD	L,A
043787 E5                  A 12471    	PUSH	HL
043788 C5                  A 12472    	PUSH	BC
043789 DD07FA              A 12473    	LD	BC,(IX+%FFFFFFFA)
04378C C5                  A 12474    	PUSH	BC
04378D CD D7 10 04         A 12475    	CALL	_move_window
043791 C1                  A 12476    	POP	BC
043792 C1                  A 12477    	POP	BC
043793 C1                  A 12478    	POP	BC
043794 CD 07 46 04         A 12479    	CALL	__icmpzero
043798 28 0D               A 12480    	JR	Z,L_592
04379A DD3106              A 12481    	LD	IY,(IX+%6)
04379D FD361001            A 12482    	LD	(IY+%10),%1
0437A1 21010000            A 12483    	LD	HL,1
0437A5 18 7D               A 12484    	JR	L_598
0437A7                     A 12485    L_592:
                           A 12486    ; 3933			memcpy(rbuff, fs->win + fp->fpt
                           A 12487    .LINE 3933
                           A 12488    
0437A7 DD07FD              A 12489    	LD	BC,(IX+%FFFFFFFD)
0437AA C5                  A 12490    	PUSH	BC
0437AB DD3106              A 12491    	LD	IY,(IX+%6)
0437AE FD2711              A 12492    	LD	HL,(IY+%11)
0437B1 FD5E14              A 12493    	LD	E,(IY+%14)
0437B4 01FF0100            A 12494    	LD	BC,511
0437B8 AF                  A 12495    	XOR	A,A
0437B9 CD D6 47 04         A 12496    	CALL	__land
0437BD E5C1                A 12497    	LD	BC,HL
0437BF DD31FA              A 12498    	LD	IY,(IX+%FFFFFFFA)
0437C2 ED232E              A 12499    	LEA	HL,IY+%2E
0437C5 09                  A 12500    	ADD	HL,BC
0437C6 E5                  A 12501    	PUSH	HL
0437C7 DD07EA              A 12502    	LD	BC,(IX+%FFFFFFEA)
0437CA C5                  A 12503    	PUSH	BC
0437CB DD77DA              A 12504    	LD	(IX+%FFFFFFDA),A
0437CE CD 81 45 04         A 12505    	CALL	_memcpy
0437D2 DD7EDA              A 12506    	LD	A,(IX+%FFFFFFDA)
0437D5 C1                  A 12507    	POP	BC
0437D6 C1                  A 12508    	POP	BC
0437D7 C1                  A 12509    	POP	BC
                           A 12510    ; 3934	#else
                           A 12511    ; 3935			memcpy(rbuff, fp->buf + fp->fpt
                           A 12512    ; 3936	#endif
                           A 12513    ; 3937		}
0437D8                     A 12514    L_594:
                           A 12515    .LINE 3937
                           A 12516    
0437D8 DD07FD              A 12517    	LD	BC,(IX+%FFFFFFFD)
0437DB DD270C              A 12518    	LD	HL,(IX+%C)
0437DE B7                  A 12519    	OR	A,A
0437DF ED42                A 12520    	SBC	HL,BC
0437E1 DD2F0C              A 12521    	LD	(IX+%C),HL
0437E4 DD270F              A 12522    	LD	HL,(IX+%F)
0437E7 DD310F              A 12523    	LD	IY,(IX+%F)
0437EA DD07FD              A 12524    	LD	BC,(IX+%FFFFFFFD)
0437ED ED27                A 12525    	LD	HL,(HL)
0437EF 09                  A 12526    	ADD	HL,BC
0437F0 FD2F00              A 12527    	LD	(IY),HL
0437F3 DD07FD              A 12528    	LD	BC,(IX+%FFFFFFFD)
0437F6 DD27EA              A 12529    	LD	HL,(IX+%FFFFFFEA)
0437F9 09                  A 12530    	ADD	HL,BC
0437FA DD2FEA              A 12531    	LD	(IX+%FFFFFFEA),HL
0437FD DD07FD              A 12532    	LD	BC,(IX+%FFFFFFFD)
043800 AF                  A 12533    	XOR	A,A
043801 DD3106              A 12534    	LD	IY,(IX+%6)
043804 FD2711              A 12535    	LD	HL,(IY+%11)
043807 FD5E14              A 12536    	LD	E,(IY+%14)
04380A CD C7 43 04         A 12537    	CALL	__ladd
04380E FD2F11              A 12538    	LD	(IY+%11),HL
043811 FD7314              A 12539    	LD	(IY+%14),E
043814                     A 12540    L_595:
043814 DD070C              A 12541    	LD	BC,(IX+%C)
043817 B7                  A 12542    	OR	A,A
043818 ED62                A 12543    	SBC	HL,HL
04381A B7                  A 12544    	OR	A,A
04381B ED42                A 12545    	SBC	HL,BC
04381D DA 83 35 04         A 12546    	JR	C,L_593
                           A 12547    ; 3938	
                           A 12548    ; 3939		LEAVE_FF(fs, FR_OK);
                           A 12549    .LINE 3939
                           A 12550    
043821 B7                  A 12551    	OR	A,A
043822 ED62                A 12552    	SBC	HL,HL
                           A 12553    ; 3940	}
043824                     A 12554    L_598:
                           A 12555    .LINE 3940
                           A 12556    
043824 DDF9                A 12557    	LD	SP,IX
043826 DDE1                A 12558    	POP	IX
043828 C9                  A 12559    	RET	
                           A 12560    
                           A 12561    
                           A 12562    ;**************************** _f_read *********
                           A 12563    ;Name                         Addr/Register   S
                           A 12564    ;_memcpy                             IMPORT  --
                           A 12565    ;_disk_read                          IMPORT  --
                           A 12566    ;remain                               IX-34    
                           A 12567    ;G_45                                 IX-30    
                           A 12568    ;clst                                 IX-26    
                           A 12569    ;rbuff                                IX-22    
                           A 12570    ;csect                                IX-19    
                           A 12571    ;sect                                 IX-16    
                           A 12572    ;res                                  IX-12    
                           A 12573    ;cc                                    IX-9    
                           A 12574    ;fs                                    IX-6    
                           A 12575    ;rcnt                                  IX-3    
                           A 12576    ;br                                   IX+15    
                           A 12577    ;btr                                  IX+12    
                           A 12578    ;buff                                  IX+9    
                           A 12579    ;fp                                    IX+6    
                           A 12580    
                           A 12581    
                           A 12582    ; Stack Frame Size: 56 (bytes)
                           A 12583    ;       Spill Code: -1 (instruction)
                           A 12584    
                           A 12585    
                           A 12586    .ENDFUNC "f_read",3940,"_f_read"
                           A 12587    ; 3941	
                           A 12588    ; 3942	
                           A 12589    ; 3943	
                           A 12590    ; 3944	
                           A 12591    ; 3945	#if !FF_FS_READONLY
                           A 12592    ; 3946	/*-------------------------------------
                           A 12593    ; 3947	/* Write File                          
                           A 12594    ; 3948	/*-------------------------------------
                           A 12595    ; 3949	
                           A 12596    ; 3950	FRESULT f_write (
                           A 12597    ; 3951		FIL* fp,			/* Open file to
                           A 12598    ; 3952		const void* buff,	/* Data to be w
                           A 12599    ; 3953		UINT btw,			/* Number of by
                           A 12600    ; 3954		UINT* bw			/* Number of by
                           A 12601    ; 3955	)
                           A 12602    ; 3956	{
                           A 12603    ; 3957		FRESULT res;
                           A 12604    ; 3958		FATFS *fs;
                           A 12605    ; 3959		DWORD clst;
                           A 12606    ; 3960		LBA_t sect;
                           A 12607    ; 3961		UINT wcnt, cc, csect;
                           A 12608    ; 3962		const BYTE *wbuff = (const BYTE*)bu
                           A 12609    ; 3963	
                           A 12610    ; 3964	
                           A 12611    ; 3965		*bw = 0;	/* Clear write byte cou
                           A 12612    ; 3966		res = validate(&fp->obj, &fs);		
                           A 12613    ; 3967		if (res != FR_OK || (res = (FRESULT
                           A 12614    ; 3968		if (!(fp->flag & FA_WRITE)) LEAVE_F
                           A 12615    ; 3969	
                           A 12616    ; 3970		/* Check fptr wrap-around (file siz
                           A 12617    ; 3971		if ((!FF_FS_EXFAT || fs->fs_type !=
                           A 12618    ; 3972			btw = (UINT)(0xFFFFFFFF - (DWOR
                           A 12619    ; 3973		}
                           A 12620    ; 3974	
                           A 12621    ; 3975		for ( ; btw > 0; btw -= wcnt, *bw +
                           A 12622    ; 3976			if (fp->fptr % SS(fs) == 0) {	
                           A 12623    ; 3977				csect = (UINT)(fp->fptr / S
                           A 12624    ; 3978				if (csect == 0) {			
                           A 12625    ; 3979					if (fp->fptr == 0) {	
                           A 12626    ; 3980						clst = fp->obj.sclu
                           A 12627    ; 3981						if (clst == 0) {	
                           A 12628    ; 3982							clst = create_c
                           A 12629    ; 3983						}
                           A 12630    ; 3984					} else {				
                           A 12631    ; 3985	#if FF_USE_FASTSEEK
                           A 12632    ; 3986						if (fp->cltbl) {
                           A 12633    ; 3987							clst = clmt_clu
                           A 12634    ; 3988						} else
                           A 12635    ; 3989	#endif
                           A 12636    ; 3990						{
                           A 12637    ; 3991							clst = create_c
                           A 12638    ; 3992						}
                           A 12639    ; 3993					}
                           A 12640    ; 3994					if (clst == 0) break;	
                           A 12641    ; 3995					if (clst == 1) ABORT(fs
                           A 12642    ; 3996					if (clst == 0xFFFFFFFF)
                           A 12643    ; 3997					fp->clust = clst;		
                           A 12644    ; 3998					if (fp->obj.sclust == 0
                           A 12645    ; 3999				}
                           A 12646    ; 4000	#if FF_FS_TINY
                           A 12647    ; 4001				if (fs->winsect == fp->sect
                           A 12648    ; 4002	#else
                           A 12649    ; 4003				if (fp->flag & FA_DIRTY) {	
                           A 12650    ; 4004					if (disk_write(fs->pdrv
                           A 12651    ; 4005					fp->flag &= (BYTE)~FA_D
                           A 12652    ; 4006				}
                           A 12653    ; 4007	#endif
                           A 12654    ; 4008				sect = clst2sect(fs, fp->cl
                           A 12655    ; 4009				if (sect == 0) ABORT(fs, FR
                           A 12656    ; 4010				sect += csect;
                           A 12657    ; 4011				cc = btw / SS(fs);			
                           A 12658    ; 4012				if (cc > 0) {				
                           A 12659    ; 4013					if (csect + cc > fs->cs
                           A 12660    ; 4014						cc = fs->csize - cs
                           A 12661    ; 4015					}
                           A 12662    ; 4016					if (disk_write(fs->pdrv
                           A 12663    ; 4017	#if FF_FS_MINIMIZE <= 2
                           A 12664    ; 4018	#if FF_FS_TINY
                           A 12665    ; 4019					if (fs->winsect - sect 
                           A 12666    ; 4020						memcpy(fs->win, wbu
                           A 12667    ; 4021						fs->wflag = 0;
                           A 12668    ; 4022					}
                           A 12669    ; 4023	#else
                           A 12670    ; 4024					if (fp->sect - sect < c
                           A 12671    ; 4025						memcpy(fp->buf, wbu
                           A 12672    ; 4026						fp->flag &= (BYTE)~
                           A 12673    ; 4027					}
                           A 12674    ; 4028	#endif
                           A 12675    ; 4029	#endif
                           A 12676    ; 4030					wcnt = SS(fs) * cc;		
                           A 12677    ; 4031					continue;
                           A 12678    ; 4032				}
                           A 12679    ; 4033	#if FF_FS_TINY
                           A 12680    ; 4034				if (fp->fptr >= fp->obj.obj
                           A 12681    ; 4035					if (sync_window(fs) != 
                           A 12682    ; 4036					fs->winsect = sect;
                           A 12683    ; 4037				}
                           A 12684    ; 4038	#else
                           A 12685    ; 4039				if (fp->sect != sect && 	
                           A 12686    ; 4040					fp->fptr < fp->obj.objs
                           A 12687    ; 4041					disk_read(fs->pdrv, fp-
                           A 12688    ; 4042						ABORT(fs, FR_DISK_E
                           A 12689    ; 4043				}
                           A 12690    ; 4044	#endif
                           A 12691    ; 4045				fp->sect = sect;
                           A 12692    ; 4046			}
                           A 12693    ; 4047			wcnt = SS(fs) - (UINT)fp->fptr 
                           A 12694    ; 4048			if (wcnt > btw) wcnt = btw;		
                           A 12695    ; 4049	#if FF_FS_TINY
                           A 12696    ; 4050			if (move_window(fs, fp->sect) !
                           A 12697    ; 4051			memcpy(fs->win + fp->fptr % SS(
                           A 12698    ; 4052			fs->wflag = 1;
                           A 12699    ; 4053	#else
                           A 12700    ; 4054			memcpy(fp->buf + fp->fptr % SS(
                           A 12701    ; 4055			fp->flag |= FA_DIRTY;
                           A 12702    ; 4056	#endif
                           A 12703    ; 4057		}
                           A 12704    ; 4058	
                           A 12705    ; 4059		fp->flag |= FA_MODIFIED;			
                           A 12706    ; 4060	
                           A 12707    ; 4061		LEAVE_FF(fs, FR_OK);
                           A 12708    ; 4062	}
                           A 12709    ; 4063	
                           A 12710    ; 4064	
                           A 12711    ; 4065	
                           A 12712    ; 4066	
                           A 12713    ; 4067	/*-------------------------------------
                           A 12714    ; 4068	/* Synchronize the File                
                           A 12715    ; 4069	/*-------------------------------------
                           A 12716    ; 4070	
                           A 12717    ; 4071	FRESULT f_sync (
                           A 12718    ; 4072		FIL* fp		/* Open file to be sync
                           A 12719    ; 4073	)
                           A 12720    ; 4074	{
                           A 12721    ; 4075		FRESULT res;
                           A 12722    ; 4076		FATFS *fs;
                           A 12723    ; 4077		DWORD tm;
                           A 12724    ; 4078		BYTE *dir;
                           A 12725    ; 4079	
                           A 12726    ; 4080	
                           A 12727    ; 4081		res = validate(&fp->obj, &fs);	/* 
                           A 12728    ; 4082		if (res == FR_OK) {
                           A 12729    ; 4083			if (fp->flag & FA_MODIFIED) {	
                           A 12730    ; 4084	#if !FF_FS_TINY
                           A 12731    ; 4085				if (fp->flag & FA_DIRTY) {	
                           A 12732    ; 4086					if (disk_write(fs->pdrv
                           A 12733    ; 4087					fp->flag &= (BYTE)~FA_D
                           A 12734    ; 4088				}
                           A 12735    ; 4089	#endif
                           A 12736    ; 4090				/* Update the directory ent
                           A 12737    ; 4091				tm = GET_FATTIME();			
                           A 12738    ; 4092	#if FF_FS_EXFAT
                           A 12739    ; 4093				if (fs->fs_type == FS_EXFAT
                           A 12740    ; 4094					res = fill_first_frag(&
                           A 12741    ; 4095					if (res == FR_OK) {
                           A 12742    ; 4096						res = fill_last_fra
                           A 12743    ; 4097					}
                           A 12744    ; 4098					if (res == FR_OK) {
                           A 12745    ; 4099						DIR dj;
                           A 12746    ; 4100						DEF_NAMBUF
                           A 12747    ; 4101	
                           A 12748    ; 4102						INIT_NAMBUF(fs);
                           A 12749    ; 4103						res = load_obj_xdir
                           A 12750    ; 4104						if (res == FR_OK) {
                           A 12751    ; 4105							fs->dirbuf[XDIR
                           A 12752    ; 4106							fs->dirbuf[XDIR
                           A 12753    ; 4107							st_dword(fs->di
                           A 12754    ; 4108							st_qword(fs->di
                           A 12755    ; 4109							st_qword(fs->di
                           A 12756    ; 4110							st_dword(fs->di
                           A 12757    ; 4111							fs->dirbuf[XDIR
                           A 12758    ; 4112							st_dword(fs->di
                           A 12759    ; 4113							res = store_xdi
                           A 12760    ; 4114							if (res == FR_O
                           A 12761    ; 4115								res = sync_
                           A 12762    ; 4116								fp->flag &=
                           A 12763    ; 4117							}
                           A 12764    ; 4118						}
                           A 12765    ; 4119						FREE_NAMBUF();
                           A 12766    ; 4120					}
                           A 12767    ; 4121				} else
                           A 12768    ; 4122	#endif
                           A 12769    ; 4123				{
                           A 12770    ; 4124					res = move_window(fs, f
                           A 12771    ; 4125					if (res == FR_OK) {
                           A 12772    ; 4126						dir = fp->dir_ptr;
                           A 12773    ; 4127						dir[DIR_Attr] |= AM
                           A 12774    ; 4128						st_clust(fp->obj.fs
                           A 12775    ; 4129						st_dword(dir + DIR_
                           A 12776    ; 4130						st_dword(dir + DIR_
                           A 12777    ; 4131						st_word(dir + DIR_L
                           A 12778    ; 4132						fs->wflag = 1;
                           A 12779    ; 4133						res = sync_fs(fs);	
                           A 12780    ; 4134						fp->flag &= (BYTE)~
                           A 12781    ; 4135					}
                           A 12782    ; 4136				}
                           A 12783    ; 4137			}
                           A 12784    ; 4138		}
                           A 12785    ; 4139	
                           A 12786    ; 4140		LEAVE_FF(fs, res);
                           A 12787    ; 4141	}
                           A 12788    ; 4142	
                           A 12789    ; 4143	#endif /* !FF_FS_READONLY */
                           A 12790    ; 4144	
                           A 12791    ; 4145	
                           A 12792    ; 4146	
                           A 12793    ; 4147	
                           A 12794    ; 4148	/*-------------------------------------
                           A 12795    ; 4149	/* Close File                          
                           A 12796    ; 4150	/*-------------------------------------
                           A 12797    ; 4151	
                           A 12798    ; 4152	FRESULT f_close (
                           A 12799    ; 4153		FIL* fp		/* Open file to be clos
                           A 12800    ; 4154	)
                           A 12801    ; 4155	{
043829                     A 12802    _f_close:
                           A 12803    .DEFINE "_f_close"
                           A 12804    
                           A 12805    .VALUE _f_close
                           A 12806    
                           A 12807    .CLASS 2
                           A 12808    
                           A 12809    .TYPE 68
                           A 12810    
                           A 12811    .ENDEF
                           A 12812    
                           A 12813    .BEGFUNC "f_close",4155,"_f_close"
                           A 12814    
                           A 12815    .LINE 4155
                           A 12816    
                           A 12817    .DEFINE "fp"
                           A 12818    
                           A 12819    .CLASS 65
                           A 12820    
                           A 12821    .VALUE 6
                           A 12822    
                           A 12823    .TAG "NONAME2"
                           A 12824    
                           A 12825    .TYPE 40
                           A 12826    
                           A 12827    .ENDEF
                           A 12828    
                           A 12829    .DEFINE "res"
                           A 12830    
                           A 12831    .CLASS 65
                           A 12832    
                           A 12833    .VALUE -3
                           A 12834    
                           A 12835    .TYPE 4
                           A 12836    
                           A 12837    .ENDEF
                           A 12838    
                           A 12839    .DEFINE "fs"
                           A 12840    
                           A 12841    .CLASS 65
                           A 12842    
                           A 12843    .VALUE -6
                           A 12844    
                           A 12845    .TAG "NONAME0"
                           A 12846    
                           A 12847    .TYPE 40
                           A 12848    
                           A 12849    .ENDEF
                           A 12850    
043829 DDE5                A 12851    	PUSH	IX
04382B DD210000 00         A 12852    	LD	IX,0
043830 DD39                A 12853    	ADD	IX,SP
043832 C5                  A 12854    	PUSH	BC
043833 C5                  A 12855    	PUSH	BC
                           A 12856    ; 4156		FRESULT res;
                           A 12857    ; 4157		FATFS *fs;
                           A 12858    ; 4158	
                           A 12859    ; 4159	#if !FF_FS_READONLY
                           A 12860    ; 4160		res = f_sync(fp);					
                           A 12861    ; 4161		if (res == FR_OK)
                           A 12862    ; 4162	#endif
                           A 12863    ; 4163		{
                           A 12864    ; 4164			res = validate(&fp->obj, &fs);	
                           A 12865    .LINE 4164
                           A 12866    
043834 ED65FA              A 12867    	PEA	IX+%FFFFFFFA
043837 DD3106              A 12868    	LD	IY,(IX+%6)
04383A ED6600              A 12869    	PEA	IY+%0
04383D CD 86 32 04         A 12870    	CALL	_validate
043841 C1                  A 12871    	POP	BC
043842 C1                  A 12872    	POP	BC
043843 DD2FFD              A 12873    	LD	(IX+%FFFFFFFD),HL
                           A 12874    ; 4165			if (res == FR_OK) {
                           A 12875    .LINE 4165
                           A 12876    
043846 CD 07 46 04         A 12877    	CALL	__icmpzero
04384A 20 0A               A 12878    	JR	NZ,L_600
                           A 12879    ; 4166	#if FF_FS_LOCK != 0
                           A 12880    ; 4167				res = dec_lock(fp->obj.lock
                           A 12881    ; 4168				if (res == FR_OK) fp->obj.f
                           A 12882    ; 4169	#else
                           A 12883    ; 4170				fp->obj.fs = 0;	/* Invalida
                           A 12884    .LINE 4170
                           A 12885    
04384C 01000000            A 12886    	LD	BC,0
043850 DD3106              A 12887    	LD	IY,(IX+%6)
043853 FD0F00              A 12888    	LD	(IY+%0),BC
                           A 12889    ; 4171	#endif
                           A 12890    ; 4172	#if FF_FS_REENTRANT
                           A 12891    ; 4173				unlock_fs(fs, FR_OK);		
                           A 12892    ; 4174	#endif
                           A 12893    ; 4175			}
                           A 12894    ; 4176		}
043856                     A 12895    L_600:
                           A 12896    .LINE 4176
                           A 12897    
                           A 12898    ; 4177		return res;
                           A 12899    .LINE 4177
                           A 12900    
043856 DD27FD              A 12901    	LD	HL,(IX+%FFFFFFFD)
                           A 12902    ; 4178	}
                           A 12903    .LINE 4178
                           A 12904    
043859 DDF9                A 12905    	LD	SP,IX
04385B DDE1                A 12906    	POP	IX
04385D C9                  A 12907    	RET	
                           A 12908    
                           A 12909    
                           A 12910    ;**************************** _f_close ********
                           A 12911    ;Name                         Addr/Register   S
                           A 12912    ;fs                                    IX-6    
                           A 12913    ;res                                   IX-3    
                           A 12914    ;fp                                    IX+6    
                           A 12915    
                           A 12916    
                           A 12917    ; Stack Frame Size: 15 (bytes)
                           A 12918    ;       Spill Code: -1 (instruction)
                           A 12919    
                           A 12920    
                           A 12921    .ENDFUNC "f_close",4178,"_f_close"
                           A 12922    ; 4179	
                           A 12923    ; 4180	
                           A 12924    ; 4181	
                           A 12925    ; 4182	
                           A 12926    ; 4183	#if FF_FS_RPATH >= 1
                           A 12927    ; 4184	/*-------------------------------------
                           A 12928    ; 4185	/* Change Current Directory or Current 
                           A 12929    ; 4186	/*-------------------------------------
                           A 12930    ; 4187	
                           A 12931    ; 4188	FRESULT f_chdrive (
                           A 12932    ; 4189		const TCHAR* path		/* Drive nu
                           A 12933    ; 4190	)
                           A 12934    ; 4191	{
04385E                     A 12935    _f_chdrive:
                           A 12936    .DEFINE "_f_chdrive"
                           A 12937    
                           A 12938    .VALUE _f_chdrive
                           A 12939    
                           A 12940    .CLASS 2
                           A 12941    
                           A 12942    .TYPE 68
                           A 12943    
                           A 12944    .ENDEF
                           A 12945    
                           A 12946    .BEGFUNC "f_chdrive",4191,"_f_chdrive"
                           A 12947    
                           A 12948    .LINE 4191
                           A 12949    
                           A 12950    .DEFINE "path"
                           A 12951    
                           A 12952    .CLASS 65
                           A 12953    
                           A 12954    .VALUE 6
                           A 12955    
                           A 12956    .TYPE 194
                           A 12957    
                           A 12958    .ENDEF
                           A 12959    
                           A 12960    .DEFINE "vol"
                           A 12961    
                           A 12962    .CLASS 65
                           A 12963    
                           A 12964    .VALUE -3
                           A 12965    
                           A 12966    .TYPE 4
                           A 12967    
                           A 12968    .ENDEF
                           A 12969    
04385E DDE5                A 12970    	PUSH	IX
043860 DD210000 00         A 12971    	LD	IX,0
043865 DD39                A 12972    	ADD	IX,SP
043867 C5                  A 12973    	PUSH	BC
                           A 12974    ; 4192		int vol;
                           A 12975    ; 4193	
                           A 12976    ; 4194	
                           A 12977    ; 4195		/* Get logical drive number */
                           A 12978    ; 4196		vol = get_ldnumber(&path);
                           A 12979    .LINE 4196
                           A 12980    
043868 ED6506              A 12981    	PEA	IX+%6
04386B CD 33 29 04         A 12982    	CALL	_get_ldnumber
04386F C1                  A 12983    	POP	BC
043870 DD2FFD              A 12984    	LD	(IX+%FFFFFFFD),HL
                           A 12985    ; 4197		if (vol < 0) return FR_INVALID_DRIV
                           A 12986    .LINE 4197
                           A 12987    
043873 CD 07 46 04         A 12988    	CALL	__icmpzero
043877 F2 81 38 04         A 12989    	JP	P,L_603
04387B 210B0000            A 12990    	LD	HL,11
04387F 18 0A               A 12991    	JR	L_604
043881                     A 12992    L_603:
                           A 12993    ; 4198		CurrVol = (BYTE)vol;	/* Set it a
                           A 12994    .LINE 4198
                           A 12995    
043881 DD7EFD              A 12996    	LD	A,(IX+%FFFFFFFD)
043884 32 B8 4A 04         A 12997    	LD	(_CurrVol),A
                           A 12998    ; 4199	
                           A 12999    ; 4200		return FR_OK;
                           A 13000    .LINE 4200
                           A 13001    
043888 B7                  A 13002    	OR	A,A
043889 ED62                A 13003    	SBC	HL,HL
                           A 13004    ; 4201	}
04388B                     A 13005    L_604:
                           A 13006    .LINE 4201
                           A 13007    
04388B DDF9                A 13008    	LD	SP,IX
04388D DDE1                A 13009    	POP	IX
04388F C9                  A 13010    	RET	
                           A 13011    
                           A 13012    
                           A 13013    ;**************************** _f_chdrive ******
                           A 13014    ;Name                         Addr/Register   S
                           A 13015    ;_CurrVol                            STATIC    
                           A 13016    ;vol                                   IX-3    
                           A 13017    ;path                                  IX+6    
                           A 13018    
                           A 13019    
                           A 13020    ; Stack Frame Size: 12 (bytes)
                           A 13021    ;       Spill Code: -1 (instruction)
                           A 13022    
                           A 13023    
                           A 13024    .ENDFUNC "f_chdrive",4201,"_f_chdrive"
                           A 13025    ; 4202	
                           A 13026    ; 4203	
                           A 13027    ; 4204	
                           A 13028    ; 4205	FRESULT f_chdir (
                           A 13029    ; 4206		const TCHAR* path	/* Pointer to t
                           A 13030    ; 4207	)
                           A 13031    ; 4208	{
043890                     A 13032    _f_chdir:
                           A 13033    .DEFINE "_f_chdir"
                           A 13034    
                           A 13035    .VALUE _f_chdir
                           A 13036    
                           A 13037    .CLASS 2
                           A 13038    
                           A 13039    .TYPE 68
                           A 13040    
                           A 13041    .ENDEF
                           A 13042    
                           A 13043    .BEGFUNC "f_chdir",4208,"_f_chdir"
                           A 13044    
                           A 13045    .LINE 4208
                           A 13046    
                           A 13047    .DEFINE "path"
                           A 13048    
                           A 13049    .CLASS 65
                           A 13050    
                           A 13051    .VALUE 6
                           A 13052    
                           A 13053    .TYPE 194
                           A 13054    
                           A 13055    .ENDEF
                           A 13056    
                           A 13057    .DEFINE "res"
                           A 13058    
                           A 13059    .CLASS 65
                           A 13060    
                           A 13061    .VALUE -3
                           A 13062    
                           A 13063    .TYPE 4
                           A 13064    
                           A 13065    .ENDEF
                           A 13066    
                           A 13067    .DEFINE "fs"
                           A 13068    
                           A 13069    .CLASS 65
                           A 13070    
                           A 13071    .VALUE -6
                           A 13072    
                           A 13073    .TAG "NONAME0"
                           A 13074    
                           A 13075    .TYPE 40
                           A 13076    
                           A 13077    .ENDEF
                           A 13078    
                           A 13079    .DEFINE "dj"
                           A 13080    
                           A 13081    .CLASS 65
                           A 13082    
                           A 13083    .VALUE -52
                           A 13084    
                           A 13085    .TAG "NONAME3"
                           A 13086    
                           A 13087    .TYPE 8
                           A 13088    
                           A 13089    .ENDEF
                           A 13090    
                           A 13091    .DEFINE "lbuf"
                           A 13092    
                           A 13093    .CLASS 65
                           A 13094    
                           A 13095    .VALUE -564
                           A 13096    
                           A 13097    .DIM 256
                           A 13098    
                           A 13099    .TYPE 109
                           A 13100    
                           A 13101    .ENDEF
                           A 13102    
043890 DDE5                A 13103    	PUSH	IX
043892 DD210000 00         A 13104    	LD	IX,0
043897 DD39                A 13105    	ADD	IX,SP
043899 21CCFDFF            A 13106    	LD	HL,-564
04389D 39                  A 13107    	ADD	HL,SP
04389E F9                  A 13108    	LD	SP,HL
                           A 13109    ; 4209	#if FF_STR_VOLUME_ID == 2
                           A 13110    ; 4210		UINT i;
                           A 13111    ; 4211	#endif
                           A 13112    ; 4212		FRESULT res;
                           A 13113    ; 4213		DIR dj;
                           A 13114    ; 4214		FATFS *fs;
                           A 13115    ; 4215		DEF_NAMBUF
                           A 13116    ; 4216	
                           A 13117    ; 4217	
                           A 13118    ; 4218		/* Get logical drive */
                           A 13119    ; 4219		res = mount_volume(&path, &fs, 0);
                           A 13120    .LINE 4219
                           A 13121    
04389F 01000000            A 13122    	LD	BC,0
0438A3 C5                  A 13123    	PUSH	BC
0438A4 ED65FA              A 13124    	PEA	IX+%FFFFFFFA
0438A7 ED6506              A 13125    	PEA	IX+%6
0438AA CD 3E 2D 04         A 13126    	CALL	_mount_volume
0438AE C1                  A 13127    	POP	BC
0438AF C1                  A 13128    	POP	BC
0438B0 C1                  A 13129    	POP	BC
0438B1 DD2FFD              A 13130    	LD	(IX+%FFFFFFFD),HL
                           A 13131    ; 4220		if (res == FR_OK) {
                           A 13132    .LINE 4220
                           A 13133    
0438B4 CD 07 46 04         A 13134    	CALL	__icmpzero
0438B8 20 7F               A 13135    	JR	NZ,L_613
                           A 13136    ; 4221			dj.obj.fs = fs;
                           A 13137    .LINE 4221
                           A 13138    
0438BA DD07FA              A 13139    	LD	BC,(IX+%FFFFFFFA)
0438BD DD0FCC              A 13140    	LD	(IX+%FFFFFFCC),BC
                           A 13141    ; 4222			INIT_NAMBUF(fs);
                           A 13142    .LINE 4222
                           A 13143    
0438C0 DDE5E1              A 13144    	LD	HL,IX
0438C3 01CCFDFF            A 13145    	LD	BC,-564
0438C7 09                  A 13146    	ADD	HL,BC
0438C8 DD31FA              A 13147    	LD	IY,(IX+%FFFFFFFA)
0438CB FD2F0B              A 13148    	LD	(IY+%B),HL
                           A 13149    ; 4223			res = follow_path(&dj, path);	
                           A 13150    .LINE 4223
                           A 13151    
0438CE DD0706              A 13152    	LD	BC,(IX+%6)
0438D1 C5                  A 13153    	PUSH	BC
0438D2 ED65CC              A 13154    	PEA	IX+%FFFFFFCC
0438D5 CD AA 27 04         A 13155    	CALL	_follow_path
0438D9 C1                  A 13156    	POP	BC
0438DA C1                  A 13157    	POP	BC
0438DB DD2FFD              A 13158    	LD	(IX+%FFFFFFFD),HL
                           A 13159    ; 4224			if (res == FR_OK) {				
                           A 13160    .LINE 4224
                           A 13161    
0438DE CD 07 46 04         A 13162    	CALL	__icmpzero
0438E2 20 42               A 13163    	JR	NZ,L_610
                           A 13164    ; 4225				if (dj.fn[NSFLAG] & NS_NONA
                           A 13165    .LINE 4225
                           A 13166    
0438E4 ED55EA              A 13167    	LEA	IY,IX+%FFFFFFEA
0438E7 FD7E0B              A 13168    	LD	A,(IY+%B)
0438EA E680                A 13169    	AND	A,%80
0438EC 28 11               A 13170    	JR	Z,L_608
                           A 13171    ; 4226					fs->cdir = dj.obj.sclus
                           A 13172    .LINE 4226
                           A 13173    
0438EE DD07D3              A 13174    	LD	BC,(IX+%FFFFFFD3)
0438F1 DD7ED6              A 13175    	LD	A,(IX+%FFFFFFD6)
0438F4 DD31FA              A 13176    	LD	IY,(IX+%FFFFFFFA)
0438F7 FD0F0E              A 13177    	LD	(IY+%E),BC
0438FA FD7711              A 13178    	LD	(IY+%11),A
                           A 13179    ; 4227	#if FF_FS_EXFAT
                           A 13180    ; 4228					if (fs->fs_type == FS_E
                           A 13181    ; 4229						fs->cdc_scl = dj.ob
                           A 13182    ; 4230						fs->cdc_size = dj.o
                           A 13183    ; 4231						fs->cdc_ofs = dj.ob
                           A 13184    ; 4232					}
                           A 13185    ; 4233	#endif
                           A 13186    ; 4234				} else {
                           A 13187    .LINE 4234
                           A 13188    
0438FD 18 27               A 13189    	JR	L_610
0438FF                     A 13190    L_608:
                           A 13191    ; 4235					if (dj.obj.attr & AM_DI
                           A 13192    .LINE 4235
                           A 13193    
0438FF DD7ED1              A 13194    	LD	A,(IX+%FFFFFFD1)
043902 E610                A 13195    	AND	A,%10
043904 28 19               A 13196    	JR	Z,L_606
                           A 13197    ; 4236	#if FF_FS_EXFAT
                           A 13198    ; 4237						if (fs->fs_type == 
                           A 13199    ; 4238							fs->cdir = ld_d
                           A 13200    ; 4239							fs->cdc_scl = d
                           A 13201    ; 4240							fs->cdc_size = 
                           A 13202    ; 4241							fs->cdc_ofs = d
                           A 13203    ; 4242						} else
                           A 13204    ; 4243	#endif
                           A 13205    ; 4244						{
                           A 13206    ; 4245							fs->cdir = ld_c
                           A 13207    .LINE 4245
                           A 13208    
043906 DD07E7              A 13209    	LD	BC,(IX+%FFFFFFE7)
043909 C5                  A 13210    	PUSH	BC
04390A DD07FA              A 13211    	LD	BC,(IX+%FFFFFFFA)
04390D C5                  A 13212    	PUSH	BC
04390E CD 21 18 04         A 13213    	CALL	_ld_clust
043912 C1                  A 13214    	POP	BC
043913 C1                  A 13215    	POP	BC
043914 DD31FA              A 13216    	LD	IY,(IX+%FFFFFFFA)
043917 FD2F0E              A 13217    	LD	(IY+%E),HL
04391A FD7311              A 13218    	LD	(IY+%11),E
                           A 13219    ; 4246						}
                           A 13220    ; 4247					} else {
                           A 13221    .LINE 4247
                           A 13222    
04391D 18 07               A 13223    	JR	L_610
04391F                     A 13224    L_606:
                           A 13225    ; 4248						res = FR_NO_PATH;	
                           A 13226    .LINE 4248
                           A 13227    
04391F 01050000            A 13228    	LD	BC,5
043923 DD0FFD              A 13229    	LD	(IX+%FFFFFFFD),BC
                           A 13230    ; 4249					}
                           A 13231    ; 4250				}
                           A 13232    ; 4251			}
043926                     A 13233    L_610:
                           A 13234    .LINE 4251
                           A 13235    
                           A 13236    ; 4252			FREE_NAMBUF();
                           A 13237    ; 4253			if (res == FR_NO_FILE) res = FR
                           A 13238    .LINE 4253
                           A 13239    
043926 01040000            A 13240    	LD	BC,4
04392A DD27FD              A 13241    	LD	HL,(IX+%FFFFFFFD)
04392D B7                  A 13242    	OR	A,A
04392E ED42                A 13243    	SBC	HL,BC
043930 20 07               A 13244    	JR	NZ,L_613
043932 01050000            A 13245    	LD	BC,5
043936 DD0FFD              A 13246    	LD	(IX+%FFFFFFFD),BC
                           A 13247    ; 4254	#if FF_STR_VOLUME_ID == 2	/* Also cur
                           A 13248    ; 4255			if (res == FR_OK) {
                           A 13249    ; 4256				for (i = FF_VOLUMES - 1; i 
                           A 13250    ; 4257				CurrVol = (BYTE)i;
                           A 13251    ; 4258			}
                           A 13252    ; 4259	#endif
                           A 13253    ; 4260		}
043939                     A 13254    L_613:
                           A 13255    .LINE 4260
                           A 13256    
                           A 13257    ; 4261	
                           A 13258    ; 4262		LEAVE_FF(fs, res);
                           A 13259    .LINE 4262
                           A 13260    
043939 DD27FD              A 13261    	LD	HL,(IX+%FFFFFFFD)
                           A 13262    ; 4263	}
                           A 13263    .LINE 4263
                           A 13264    
04393C DDF9                A 13265    	LD	SP,IX
04393E DDE1                A 13266    	POP	IX
043940 C9                  A 13267    	RET	
                           A 13268    
                           A 13269    
                           A 13270    ;**************************** _f_chdir ********
                           A 13271    ;Name                         Addr/Register   S
                           A 13272    ;lbuf                                IX-564    
                           A 13273    ;dj                                   IX-52    
                           A 13274    ;fs                                    IX-6    
                           A 13275    ;res                                   IX-3    
                           A 13276    ;path                                  IX+6    
                           A 13277    
                           A 13278    
                           A 13279    ; Stack Frame Size: 573 (bytes)
                           A 13280    ;       Spill Code: -1 (instruction)
                           A 13281    
                           A 13282    
                           A 13283    .ENDFUNC "f_chdir",4263,"_f_chdir"
                           A 13284    ; 4264	
                           A 13285    ; 4265	
                           A 13286    ; 4266	#if FF_FS_RPATH >= 2
                           A 13287    ; 4267	FRESULT f_getcwd (
                           A 13288    ; 4268		TCHAR* buff,	/* Pointer to the d
                           A 13289    ; 4269		UINT len		/* Size of buff in 
                           A 13290    ; 4270	)
                           A 13291    ; 4271	{
043941                     A 13292    _f_getcwd:
                           A 13293    .DEFINE "_f_getcwd"
                           A 13294    
                           A 13295    .VALUE _f_getcwd
                           A 13296    
                           A 13297    .CLASS 2
                           A 13298    
                           A 13299    .TYPE 68
                           A 13300    
                           A 13301    .ENDEF
                           A 13302    
                           A 13303    .BEGFUNC "f_getcwd",4271,"_f_getcwd"
                           A 13304    
                           A 13305    .LINE 4271
                           A 13306    
                           A 13307    .DEFINE "buff"
                           A 13308    
                           A 13309    .CLASS 65
                           A 13310    
                           A 13311    .VALUE 6
                           A 13312    
                           A 13313    .TYPE 34
                           A 13314    
                           A 13315    .ENDEF
                           A 13316    
                           A 13317    .DEFINE "len"
                           A 13318    
                           A 13319    .CLASS 65
                           A 13320    
                           A 13321    .VALUE 9
                           A 13322    
                           A 13323    .TYPE 14
                           A 13324    
                           A 13325    .ENDEF
                           A 13326    
                           A 13327    .DEFINE "res"
                           A 13328    
                           A 13329    .CLASS 65
                           A 13330    
                           A 13331    .VALUE -3
                           A 13332    
                           A 13333    .TYPE 4
                           A 13334    
                           A 13335    .ENDEF
                           A 13336    
                           A 13337    .DEFINE "i"
                           A 13338    
                           A 13339    .CLASS 65
                           A 13340    
                           A 13341    .VALUE -6
                           A 13342    
                           A 13343    .TYPE 14
                           A 13344    
                           A 13345    .ENDEF
                           A 13346    
                           A 13347    .DEFINE "n"
                           A 13348    
                           A 13349    .CLASS 65
                           A 13350    
                           A 13351    .VALUE -9
                           A 13352    
                           A 13353    .TYPE 14
                           A 13354    
                           A 13355    .ENDEF
                           A 13356    
                           A 13357    .DEFINE "fs"
                           A 13358    
                           A 13359    .CLASS 65
                           A 13360    
                           A 13361    .VALUE -12
                           A 13362    
                           A 13363    .TAG "NONAME0"
                           A 13364    
                           A 13365    .TYPE 40
                           A 13366    
                           A 13367    .ENDEF
                           A 13368    
                           A 13369    .DEFINE "tp"
                           A 13370    
                           A 13371    .CLASS 65
                           A 13372    
                           A 13373    .VALUE -15
                           A 13374    
                           A 13375    .TYPE 34
                           A 13376    
                           A 13377    .ENDEF
                           A 13378    
                           A 13379    .DEFINE "ccl"
                           A 13380    
                           A 13381    .CLASS 65
                           A 13382    
                           A 13383    .VALUE -19
                           A 13384    
                           A 13385    .TYPE 15
                           A 13386    
                           A 13387    .ENDEF
                           A 13388    
                           A 13389    .DEFINE "dj"
                           A 13390    
                           A 13391    .CLASS 65
                           A 13392    
                           A 13393    .VALUE -65
                           A 13394    
                           A 13395    .TAG "NONAME3"
                           A 13396    
                           A 13397    .TYPE 8
                           A 13398    
                           A 13399    .ENDEF
                           A 13400    
                           A 13401    .DEFINE "fno"
                           A 13402    
                           A 13403    .CLASS 65
                           A 13404    
                           A 13405    .VALUE -343
                           A 13406    
                           A 13407    .TAG "NONAME4"
                           A 13408    
                           A 13409    .TYPE 8
                           A 13410    
                           A 13411    .ENDEF
                           A 13412    
                           A 13413    .DEFINE "lbuf"
                           A 13414    
                           A 13415    .CLASS 65
                           A 13416    
                           A 13417    .VALUE -855
                           A 13418    
                           A 13419    .DIM 256
                           A 13420    
                           A 13421    .TYPE 109
                           A 13422    
                           A 13423    .ENDEF
                           A 13424    
043941 DDE5                A 13425    	PUSH	IX
043943 DD210000 00         A 13426    	LD	IX,0
043948 DD39                A 13427    	ADD	IX,SP
04394A 21A3FCFF            A 13428    	LD	HL,-861
04394E 39                  A 13429    	ADD	HL,SP
04394F F9                  A 13430    	LD	SP,HL
                           A 13431    ; 4272		FRESULT res;
                           A 13432    ; 4273		DIR dj;
                           A 13433    ; 4274		FATFS *fs;
                           A 13434    ; 4275		UINT i, n;
                           A 13435    ; 4276		DWORD ccl;
                           A 13436    ; 4277		TCHAR *tp = buff;
                           A 13437    .LINE 4277
                           A 13438    
043950 DD0706              A 13439    	LD	BC,(IX+%6)
043953 DD0FF1              A 13440    	LD	(IX+%FFFFFFF1),BC
                           A 13441    ; 4278	#if FF_VOLUMES >= 2
                           A 13442    ; 4279		UINT vl;
                           A 13443    ; 4280	#if FF_STR_VOLUME_ID
                           A 13444    ; 4281		const char *vp;
                           A 13445    ; 4282	#endif
                           A 13446    ; 4283	#endif
                           A 13447    ; 4284		FILINFO fno;
                           A 13448    ; 4285		DEF_NAMBUF
                           A 13449    ; 4286	
                           A 13450    ; 4287	
                           A 13451    ; 4288		/* Get logical drive */
                           A 13452    ; 4289		buff[0] = 0;	/* Set null string 
                           A 13453    .LINE 4289
                           A 13454    
043956 DD2706              A 13455    	LD	HL,(IX+%6)
043959 3600                A 13456    	LD	(HL),%0
                           A 13457    ; 4290		res = mount_volume((const TCHAR**)&
                           A 13458    .LINE 4290
                           A 13459    
04395B 01000000            A 13460    	LD	BC,0
04395F C5                  A 13461    	PUSH	BC
043960 ED65F4              A 13462    	PEA	IX+%FFFFFFF4
043963 ED6506              A 13463    	PEA	IX+%6
043966 CD 3E 2D 04         A 13464    	CALL	_mount_volume
04396A C1                  A 13465    	POP	BC
04396B C1                  A 13466    	POP	BC
04396C C1                  A 13467    	POP	BC
04396D DD2FFD              A 13468    	LD	(IX+%FFFFFFFD),HL
                           A 13469    ; 4291		if (res == FR_OK) {
                           A 13470    .LINE 4291
                           A 13471    
043970 CD 07 46 04         A 13472    	CALL	__icmpzero
043974 C2 9E 3B 04         A 13473    	JR	NZ,L_656
                           A 13474    ; 4292			dj.obj.fs = fs;
                           A 13475    .LINE 4292
                           A 13476    
043978 ED22BF              A 13477    	LEA	HL,IX+%FFFFFFBF
04397B 01A6FCFF            A 13478    	LD	BC,-858
04397F CD 65 44 04         A 13479    	CALL	__istix
043983 DD07F4              A 13480    	LD	BC,(IX+%FFFFFFF4)
043986 DD0FBF              A 13481    	LD	(IX+%FFFFFFBF),BC
                           A 13482    ; 4293			INIT_NAMBUF(fs);
                           A 13483    .LINE 4293
                           A 13484    
043989 DDE5E1              A 13485    	LD	HL,IX
04398C 01A9FCFF            A 13486    	LD	BC,-855
043990 09                  A 13487    	ADD	HL,BC
043991 DD31F4              A 13488    	LD	IY,(IX+%FFFFFFF4)
043994 FD2F0B              A 13489    	LD	(IY+%B),HL
                           A 13490    ; 4294	
                           A 13491    ; 4295			/* Follow parent directories an
                           A 13492    ; 4296			i = len;			/* Bottom o
                           A 13493    .LINE 4296
                           A 13494    
043997 DD0709              A 13495    	LD	BC,(IX+%9)
04399A DD0FFA              A 13496    	LD	(IX+%FFFFFFFA),BC
                           A 13497    ; 4297			if (!FF_FS_EXFAT || fs->fs_type
                           A 13498    ; 4298				dj.obj.sclust = fs->cdir;	
                           A 13499    .LINE 4298
                           A 13500    
04399D 01A6FCFF            A 13501    	LD	BC,-858
0439A1 CD B5 47 04         A 13502    	CALL	__ildix
0439A5 FD070E              A 13503    	LD	BC,(IY+%E)
0439A8 FD7E11              A 13504    	LD	A,(IY+%11)
0439AB E5FDE1              A 13505    	LD	IY,HL
0439AE FD0F07              A 13506    	LD	(IY+%7),BC
0439B1 FD770A              A 13507    	LD	(IY+%A),A
                           A 13508    ; 4299				while ((ccl = dj.obj.sclust
                           A 13509    .LINE 4299
                           A 13510    
0439B4 C3 1C 3B 04         A 13511    	JR	L_642
0439B8                     A 13512    L_643:
                           A 13513    ; 4300					res = dir_sdi(&dj, 1 * 
                           A 13514    .LINE 4300
                           A 13515    
0439B8 01000000            A 13516    	LD	BC,0
0439BC C5                  A 13517    	PUSH	BC
0439BD 01200000            A 13518    	LD	BC,32
0439C1 C5                  A 13519    	PUSH	BC
0439C2 ED65BF              A 13520    	PEA	IX+%FFFFFFBF
0439C5 CD 09 14 04         A 13521    	CALL	_dir_sdi
0439C9 C1                  A 13522    	POP	BC
0439CA C1                  A 13523    	POP	BC
0439CB C1                  A 13524    	POP	BC
0439CC DD2FFD              A 13525    	LD	(IX+%FFFFFFFD),HL
                           A 13526    ; 4301					if (res != FR_OK) break
                           A 13527    .LINE 4301
                           A 13528    
0439CF CD 07 46 04         A 13529    	CALL	__icmpzero
0439D3 C2 35 3B 04         A 13530    	JR	NZ,L_653
                           A 13531    ; 4302					res = move_window(fs, d
                           A 13532    .LINE 4302
                           A 13533    
0439D7 DD4ED9              A 13534    	LD	C,(IX+%FFFFFFD9)
0439DA 0600                A 13535    	LD	B,%0
0439DC C5                  A 13536    	PUSH	BC
0439DD DD07D6              A 13537    	LD	BC,(IX+%FFFFFFD6)
0439E0 C5                  A 13538    	PUSH	BC
0439E1 DD07F4              A 13539    	LD	BC,(IX+%FFFFFFF4)
0439E4 C5                  A 13540    	PUSH	BC
0439E5 CD D7 10 04         A 13541    	CALL	_move_window
0439E9 C1                  A 13542    	POP	BC
0439EA C1                  A 13543    	POP	BC
0439EB C1                  A 13544    	POP	BC
0439EC DD2FFD              A 13545    	LD	(IX+%FFFFFFFD),HL
                           A 13546    ; 4303					if (res != FR_OK) break
                           A 13547    .LINE 4303
                           A 13548    
0439EF CD 07 46 04         A 13549    	CALL	__icmpzero
0439F3 C2 35 3B 04         A 13550    	JR	NZ,L_653
                           A 13551    ; 4304					dj.obj.sclust = ld_clus
                           A 13552    .LINE 4304
                           A 13553    
0439F7 DD07DA              A 13554    	LD	BC,(IX+%FFFFFFDA)
0439FA C5                  A 13555    	PUSH	BC
0439FB DD07F4              A 13556    	LD	BC,(IX+%FFFFFFF4)
0439FE C5                  A 13557    	PUSH	BC
0439FF CD 21 18 04         A 13558    	CALL	_ld_clust
043A03 C1                  A 13559    	POP	BC
043A04 C1                  A 13560    	POP	BC
043A05 DD2FC6              A 13561    	LD	(IX+%FFFFFFC6),HL
043A08 DD73C9              A 13562    	LD	(IX+%FFFFFFC9),E
                           A 13563    ; 4305					res = dir_sdi(&dj, 0);
                           A 13564    .LINE 4305
                           A 13565    
043A0B 01000000            A 13566    	LD	BC,0
043A0F C5                  A 13567    	PUSH	BC
043A10 C5                  A 13568    	PUSH	BC
043A11 ED65BF              A 13569    	PEA	IX+%FFFFFFBF
043A14 CD 09 14 04         A 13570    	CALL	_dir_sdi
043A18 C1                  A 13571    	POP	BC
043A19 C1                  A 13572    	POP	BC
043A1A C1                  A 13573    	POP	BC
043A1B DD2FFD              A 13574    	LD	(IX+%FFFFFFFD),HL
                           A 13575    ; 4306					if (res != FR_OK) break
                           A 13576    .LINE 4306
                           A 13577    
043A1E CD 07 46 04         A 13578    	CALL	__icmpzero
043A22 C2 35 3B 04         A 13579    	JR	NZ,L_653
                           A 13580    ; 4307					do {					
043A26                     A 13581    L_624:
                           A 13582    .LINE 4307
                           A 13583    
                           A 13584    ; 4308						res = DIR_READ_FILE
                           A 13585    .LINE 4308
                           A 13586    
043A26 01000000            A 13587    	LD	BC,0
043A2A C5                  A 13588    	PUSH	BC
043A2B ED65BF              A 13589    	PEA	IX+%FFFFFFBF
043A2E CD 0F 1B 04         A 13590    	CALL	_dir_read
043A32 C1                  A 13591    	POP	BC
043A33 C1                  A 13592    	POP	BC
043A34 DD2FFD              A 13593    	LD	(IX+%FFFFFFFD),HL
                           A 13594    ; 4309						if (res != FR_OK) b
                           A 13595    .LINE 4309
                           A 13596    
043A37 CD 07 46 04         A 13597    	CALL	__icmpzero
043A3B 20 31               A 13598    	JR	NZ,L_628
                           A 13599    ; 4310						if (ccl == ld_clust
                           A 13600    .LINE 4310
                           A 13601    
043A3D DD07DA              A 13602    	LD	BC,(IX+%FFFFFFDA)
043A40 C5                  A 13603    	PUSH	BC
043A41 DD07F4              A 13604    	LD	BC,(IX+%FFFFFFF4)
043A44 C5                  A 13605    	PUSH	BC
043A45 CD 21 18 04         A 13606    	CALL	_ld_clust
043A49 C1                  A 13607    	POP	BC
043A4A C1                  A 13608    	POP	BC
043A4B DD07ED              A 13609    	LD	BC,(IX+%FFFFFFED)
043A4E DD7EF0              A 13610    	LD	A,(IX+%FFFFFFF0)
043A51 CD AA 46 04         A 13611    	CALL	__lcmpu
043A55 28 17               A 13612    	JR	Z,L_628
                           A 13613    ; 4311						res = dir_next(&dj,
                           A 13614    .LINE 4311
                           A 13615    
043A57 01000000            A 13616    	LD	BC,0
043A5B C5                  A 13617    	PUSH	BC
043A5C ED65BF              A 13618    	PEA	IX+%FFFFFFBF
043A5F CD 0F 16 04         A 13619    	CALL	_dir_next
043A63 C1                  A 13620    	POP	BC
043A64 C1                  A 13621    	POP	BC
043A65 DD2FFD              A 13622    	LD	(IX+%FFFFFFFD),HL
                           A 13623    ; 4312					} while (res == FR_OK);
                           A 13624    .LINE 4312
                           A 13625    
043A68 CD 07 46 04         A 13626    	CALL	__icmpzero
043A6C 28 B8               A 13627    	JR	Z,L_624
043A6E                     A 13628    L_628:
                           A 13629    ; 4313					if (res == FR_NO_FILE) 
                           A 13630    .LINE 4313
                           A 13631    
043A6E 01040000            A 13632    	LD	BC,4
043A72 DD27FD              A 13633    	LD	HL,(IX+%FFFFFFFD)
043A75 B7                  A 13634    	OR	A,A
043A76 ED42                A 13635    	SBC	HL,BC
043A78 20 07               A 13636    	JR	NZ,L_630
043A7A 01020000            A 13637    	LD	BC,2
043A7E DD0FFD              A 13638    	LD	(IX+%FFFFFFFD),BC
043A81                     A 13639    L_630:
                           A 13640    ; 4314					if (res != FR_OK) break
                           A 13641    .LINE 4314
                           A 13642    
043A81 DD27FD              A 13643    	LD	HL,(IX+%FFFFFFFD)
043A84 CD 07 46 04         A 13644    	CALL	__icmpzero
043A88 C2 35 3B 04         A 13645    	JR	NZ,L_653
                           A 13646    ; 4315					get_fileinfo(&dj, &fno)
                           A 13647    .LINE 4315
                           A 13648    
043A8C DDE5E1              A 13649    	LD	HL,IX
043A8F 01A9FEFF            A 13650    	LD	BC,-343
043A93 09                  A 13651    	ADD	HL,BC
043A94 E5C1                A 13652    	LD	BC,HL
043A96 C5                  A 13653    	PUSH	BC
043A97 ED65BF              A 13654    	PEA	IX+%FFFFFFBF
043A9A CD 8B 1E 04         A 13655    	CALL	_get_fileinfo
043A9E C1                  A 13656    	POP	BC
043A9F C1                  A 13657    	POP	BC
                           A 13658    ; 4316					for (n = 0; fno.fname[n
                           A 13659    .LINE 4316
                           A 13660    
043AA0 01000000            A 13661    	LD	BC,0
043AA4 DD0FF7              A 13662    	LD	(IX+%FFFFFFF7),BC
043AA7 18 07               A 13663    	JR	L_635
043AA9                     A 13664    L_633:
043AA9 DD07F7              A 13665    	LD	BC,(IX+%FFFFFFF7)
043AAC 03                  A 13666    	INC	BC
043AAD DD0FF7              A 13667    	LD	(IX+%FFFFFFF7),BC
043AB0                     A 13668    L_635:
043AB0 DD07F7              A 13669    	LD	BC,(IX+%FFFFFFF7)
043AB3 DDE5E1              A 13670    	LD	HL,IX
043AB6 11BFFEFF            A 13671    	LD	DE,-321
043ABA 19                  A 13672    	ADD	HL,DE
043ABB 09                  A 13673    	ADD	HL,BC
043ABC 7E                  A 13674    	LD	A,(HL)
043ABD B7                  A 13675    	OR	A,A
043ABE 20 E9               A 13676    	JR	NZ,L_633
                           A 13677    ; 4317					if (i < n + 1) {	/* 
                           A 13678    .LINE 4317
                           A 13679    
043AC0 DD07F7              A 13680    	LD	BC,(IX+%FFFFFFF7)
043AC3 03                  A 13681    	INC	BC
043AC4 DD27FA              A 13682    	LD	HL,(IX+%FFFFFFFA)
043AC7 B7                  A 13683    	OR	A,A
043AC8 ED42                A 13684    	SBC	HL,BC
043ACA 30 35               A 13685    	JR	NC,L_638
                           A 13686    ; 4318						res = FR_NOT_ENOUGH
                           A 13687    .LINE 4318
                           A 13688    
043ACC 01110000            A 13689    	LD	BC,17
043AD0 DD0FFD              A 13690    	LD	(IX+%FFFFFFFD),BC
043AD3 18 60               A 13691    	JR	L_653
                           A 13692    ; 4319					}
                           A 13693    .LINE 4319
                           A 13694    
                           A 13695    ; 4320					while (n) buff[--i] = f
                           A 13696    .LINE 4320
                           A 13697    
043AD5                     A 13698    L_639:
043AD5 DD31F7              A 13699    	LD	IY,(IX+%FFFFFFF7)
043AD8 ED03FF              A 13700    	LEA	BC,IY+%FFFFFFFF
043ADB DD0FF7              A 13701    	LD	(IX+%FFFFFFF7),BC
043ADE DD31FA              A 13702    	LD	IY,(IX+%FFFFFFFA)
043AE1 ED33FF              A 13703    	LEA	IY,IY+%FFFFFFFF
043AE4 DD3EFA              A 13704    	LD	(IX+%FFFFFFFA),IY
043AE7 DD07F7              A 13705    	LD	BC,(IX+%FFFFFFF7)
043AEA DDE5E1              A 13706    	LD	HL,IX
043AED 11BFFEFF            A 13707    	LD	DE,-321
043AF1 19                  A 13708    	ADD	HL,DE
043AF2 09                  A 13709    	ADD	HL,BC
043AF3 E5FDE1              A 13710    	LD	IY,HL
043AF6 DD07FA              A 13711    	LD	BC,(IX+%FFFFFFFA)
043AF9 DD2706              A 13712    	LD	HL,(IX+%6)
043AFC 09                  A 13713    	ADD	HL,BC
043AFD FD7E00              A 13714    	LD	A,(IY)
043B00 77                  A 13715    	LD	(HL),A
043B01                     A 13716    L_638:
043B01 DD27F7              A 13717    	LD	HL,(IX+%FFFFFFF7)
043B04 CD 07 46 04         A 13718    	CALL	__icmpzero
043B08 20 CB               A 13719    	JR	NZ,L_639
                           A 13720    ; 4321					buff[--i] = '/';
                           A 13721    .LINE 4321
                           A 13722    
043B0A DD31FA              A 13723    	LD	IY,(IX+%FFFFFFFA)
043B0D ED33FF              A 13724    	LEA	IY,IY+%FFFFFFFF
043B10 DD3EFA              A 13725    	LD	(IX+%FFFFFFFA),IY
043B13 FDE5C1              A 13726    	LD	BC,IY
043B16 DD2706              A 13727    	LD	HL,(IX+%6)
043B19 09                  A 13728    	ADD	HL,BC
043B1A 362F                A 13729    	LD	(HL),%2F
                           A 13730    ; 4322				}
043B1C                     A 13731    L_642:
                           A 13732    .LINE 4322
                           A 13733    
043B1C DD07C6              A 13734    	LD	BC,(IX+%FFFFFFC6)
043B1F DD7EC9              A 13735    	LD	A,(IX+%FFFFFFC9)
043B22 DD0FED              A 13736    	LD	(IX+%FFFFFFED),BC
043B25 DD77F0              A 13737    	LD	(IX+%FFFFFFF0),A
043B28 C5E1                A 13738    	LD	HL,BC
043B2A DD5EF0              A 13739    	LD	E,(IX+%FFFFFFF0)
043B2D CD DA 44 04         A 13740    	CALL	__lcmpzero
043B31 C2 B8 39 04         A 13741    	JR	NZ,L_643
                           A 13742    ; 4323			}
043B35                     A 13743    L_653:
                           A 13744    .LINE 4323
                           A 13745    
                           A 13746    ; 4324			if (res == FR_OK) {
                           A 13747    .LINE 4324
                           A 13748    
043B35 DD27FD              A 13749    	LD	HL,(IX+%FFFFFFFD)
043B38 CD 07 46 04         A 13750    	CALL	__icmpzero
043B3C 20 60               A 13751    	JR	NZ,L_654
                           A 13752    ; 4325				if (i == len) buff[--i] = '
                           A 13753    .LINE 4325
                           A 13754    
043B3E DD0709              A 13755    	LD	BC,(IX+%9)
043B41 DD27FA              A 13756    	LD	HL,(IX+%FFFFFFFA)
043B44 B7                  A 13757    	OR	A,A
043B45 ED42                A 13758    	SBC	HL,BC
043B47 20 12               A 13759    	JR	NZ,L_651
043B49 DD31FA              A 13760    	LD	IY,(IX+%FFFFFFFA)
043B4C ED33FF              A 13761    	LEA	IY,IY+%FFFFFFFF
043B4F DD3EFA              A 13762    	LD	(IX+%FFFFFFFA),IY
043B52 FDE5C1              A 13763    	LD	BC,IY
043B55 DD2706              A 13764    	LD	HL,(IX+%6)
043B58 09                  A 13765    	ADD	HL,BC
043B59 362F                A 13766    	LD	(HL),%2F
043B5B                     A 13767    L_651:
                           A 13768    ; 4326	#if FF_VOLUMES >= 2			/* Put driv
                           A 13769    ; 4327				vl = 0;
                           A 13770    ; 4328	#if FF_STR_VOLUME_ID >= 1	/* String v
                           A 13771    ; 4329				for (n = 0, vp = (const cha
                           A 13772    ; 4330				if (i >= n + 2) {
                           A 13773    ; 4331					if (FF_STR_VOLUME_ID ==
                           A 13774    ; 4332					for (vl = 0; vl < n; *t
                           A 13775    ; 4333					if (FF_STR_VOLUME_ID ==
                           A 13776    ; 4334					vl++;
                           A 13777    ; 4335				}
                           A 13778    ; 4336	#else						/* Numeric 
                           A 13779    ; 4337				if (i >= 3) {
                           A 13780    ; 4338					*tp++ = (TCHAR)'0' + Cu
                           A 13781    ; 4339					*tp++ = (TCHAR)':';
                           A 13782    ; 4340					vl = 2;
                           A 13783    ; 4341				}
                           A 13784    ; 4342	#endif
                           A 13785    ; 4343				if (vl == 0) res = FR_NOT_E
                           A 13786    ; 4344	#endif
                           A 13787    ; 4345				/* Add current directory pa
                           A 13788    ; 4346				if (res == FR_OK) {
                           A 13789    .LINE 4346
                           A 13790    
043B5B DD27FD              A 13791    	LD	HL,(IX+%FFFFFFFD)
043B5E CD 07 46 04         A 13792    	CALL	__icmpzero
043B62 20 3A               A 13793    	JR	NZ,L_654
                           A 13794    ; 4347					do *tp++ = buff[i++]; w
043B64                     A 13795    L_648:
                           A 13796    .LINE 4347
                           A 13797    
043B64 DD27F1              A 13798    	LD	HL,(IX+%FFFFFFF1)
043B67 01A3FCFF            A 13799    	LD	BC,-861
043B6B CD 65 44 04         A 13800    	CALL	__istix
043B6F DD07FA              A 13801    	LD	BC,(IX+%FFFFFFFA)
043B72 DD2706              A 13802    	LD	HL,(IX+%6)
043B75 09                  A 13803    	ADD	HL,BC
043B76 E5FDE1              A 13804    	LD	IY,HL
043B79 01A3FCFF            A 13805    	LD	BC,-861
043B7D CD B5 47 04         A 13806    	CALL	__ildix
043B81 FD7E00              A 13807    	LD	A,(IY)
043B84 77                  A 13808    	LD	(HL),A
043B85 DD07FA              A 13809    	LD	BC,(IX+%FFFFFFFA)
043B88 03                  A 13810    	INC	BC
043B89 DD0FFA              A 13811    	LD	(IX+%FFFFFFFA),BC
043B8C DD07F1              A 13812    	LD	BC,(IX+%FFFFFFF1)
043B8F 03                  A 13813    	INC	BC
043B90 DD0FF1              A 13814    	LD	(IX+%FFFFFFF1),BC
043B93 DD0709              A 13815    	LD	BC,(IX+%9)
043B96 DD27FA              A 13816    	LD	HL,(IX+%FFFFFFFA)
043B99 B7                  A 13817    	OR	A,A
043B9A ED42                A 13818    	SBC	HL,BC
043B9C 38 C6               A 13819    	JR	C,L_648
                           A 13820    ; 4348				}
                           A 13821    ; 4349			}
043B9E                     A 13822    L_654:
                           A 13823    .LINE 4349
                           A 13824    
                           A 13825    ; 4350			FREE_NAMBUF();
                           A 13826    ; 4351		}
043B9E                     A 13827    L_656:
                           A 13828    .LINE 4351
                           A 13829    
                           A 13830    ; 4352	
                           A 13831    ; 4353		*tp = 0;
                           A 13832    .LINE 4353
                           A 13833    
043B9E DD27F1              A 13834    	LD	HL,(IX+%FFFFFFF1)
043BA1 3600                A 13835    	LD	(HL),%0
                           A 13836    ; 4354		LEAVE_FF(fs, res);
                           A 13837    .LINE 4354
                           A 13838    
043BA3 DD27FD              A 13839    	LD	HL,(IX+%FFFFFFFD)
                           A 13840    ; 4355	}
                           A 13841    .LINE 4355
                           A 13842    
043BA6 DDF9                A 13843    	LD	SP,IX
043BA8 DDE1                A 13844    	POP	IX
043BAA C9                  A 13845    	RET	
                           A 13846    
                           A 13847    
                           A 13848    ;**************************** _f_getcwd *******
                           A 13849    ;Name                         Addr/Register   S
                           A 13850    ;lbuf                                IX-855    
                           A 13851    ;fno                                 IX-343    
                           A 13852    ;dj                                   IX-65    
                           A 13853    ;ccl                                  IX-19    
                           A 13854    ;tp                                   IX-15    
                           A 13855    ;fs                                   IX-12    
                           A 13856    ;n                                     IX-9    
                           A 13857    ;i                                     IX-6    
                           A 13858    ;res                                   IX-3    
                           A 13859    ;len                                   IX+9    
                           A 13860    ;buff                                  IX+6    
                           A 13861    
                           A 13862    
                           A 13863    ; Stack Frame Size: 873 (bytes)
                           A 13864    ;       Spill Code: -1 (instruction)
                           A 13865    
                           A 13866    
                           A 13867    .ENDFUNC "f_getcwd",4355,"_f_getcwd"
                           A 13868    ; 4356	
                           A 13869    ; 4357	#endif /* FF_FS_RPATH >= 2 */
                           A 13870    ; 4358	#endif /* FF_FS_RPATH >= 1 */
                           A 13871    ; 4359	
                           A 13872    ; 4360	
                           A 13873    ; 4361	
                           A 13874    ; 4362	#if FF_FS_MINIMIZE <= 2
                           A 13875    ; 4363	/*-------------------------------------
                           A 13876    ; 4364	/* Seek File Read/Write Pointer        
                           A 13877    ; 4365	/*-------------------------------------
                           A 13878    ; 4366	
                           A 13879    ; 4367	FRESULT f_lseek (
                           A 13880    ; 4368		FIL* fp,		/* Pointer to the f
                           A 13881    ; 4369		FSIZE_t ofs		/* File pointer fro
                           A 13882    ; 4370	)
                           A 13883    ; 4371	{
                           A 13884    ; 4372		FRESULT res;
                           A 13885    ; 4373		FATFS *fs;
                           A 13886    ; 4374		DWORD clst, bcs;
                           A 13887    ; 4375		LBA_t nsect;
                           A 13888    ; 4376		FSIZE_t ifptr;
                           A 13889    ; 4377	#if FF_USE_FASTSEEK
                           A 13890    ; 4378		DWORD cl, pcl, ncl, tcl, tlen, ulen
                           A 13891    ; 4379		DWORD *tbl;
                           A 13892    ; 4380		LBA_t dsc;
                           A 13893    ; 4381	#endif
                           A 13894    ; 4382	
                           A 13895    ; 4383		res = validate(&fp->obj, &fs);		
                           A 13896    ; 4384		if (res == FR_OK) res = (FRESULT)fp
                           A 13897    ; 4385	#if FF_FS_EXFAT && !FF_FS_READONLY
                           A 13898    ; 4386		if (res == FR_OK && fs->fs_type == 
                           A 13899    ; 4387			res = fill_last_frag(&fp->obj, 
                           A 13900    ; 4388		}
                           A 13901    ; 4389	#endif
                           A 13902    ; 4390		if (res != FR_OK) LEAVE_FF(fs, res)
                           A 13903    ; 4391	
                           A 13904    ; 4392	#if FF_USE_FASTSEEK
                           A 13905    ; 4393		if (fp->cltbl) {	/* Fast seek */
                           A 13906    ; 4394			if (ofs == CREATE_LINKMAP) {	
                           A 13907    ; 4395				tbl = fp->cltbl;
                           A 13908    ; 4396				tlen = *tbl++; ulen = 2;	
                           A 13909    ; 4397				cl = fp->obj.sclust;		
                           A 13910    ; 4398				if (cl != 0) {
                           A 13911    ; 4399					do {
                           A 13912    ; 4400						/* Get a fragment *
                           A 13913    ; 4401						tcl = cl; ncl = 0; 
                           A 13914    ; 4402						do {
                           A 13915    ; 4403							pcl = cl; ncl++
                           A 13916    ; 4404							cl = get_fat(&f
                           A 13917    ; 4405							if (cl <= 1) AB
                           A 13918    ; 4406							if (cl == 0xFFF
                           A 13919    ; 4407						} while (cl == pcl 
                           A 13920    ; 4408						if (ulen <= tlen) {
                           A 13921    ; 4409							*tbl++ = ncl; *
                           A 13922    ; 4410						}
                           A 13923    ; 4411					} while (cl < fs->n_fat
                           A 13924    ; 4412				}
                           A 13925    ; 4413				*fp->cltbl = ulen;	/* Numb
                           A 13926    ; 4414				if (ulen <= tlen) {
                           A 13927    ; 4415					*tbl = 0;		/* Term
                           A 13928    ; 4416				} else {
                           A 13929    ; 4417					res = FR_NOT_ENOUGH_COR
                           A 13930    ; 4418				}
                           A 13931    ; 4419			} else {						
                           A 13932    ; 4420				if (ofs > fp->obj.objsize) 
                           A 13933    ; 4421				fp->fptr = ofs;				
                           A 13934    ; 4422				if (ofs > 0) {
                           A 13935    ; 4423					fp->clust = clmt_clust(
                           A 13936    ; 4424					dsc = clst2sect(fs, fp-
                           A 13937    ; 4425					if (dsc == 0) ABORT(fs,
                           A 13938    ; 4426					dsc += (DWORD)((ofs - 1
                           A 13939    ; 4427					if (fp->fptr % SS(fs) &
                           A 13940    ; 4428	#if !FF_FS_TINY
                           A 13941    ; 4429	#if !FF_FS_READONLY
                           A 13942    ; 4430						if (fp->flag & FA_D
                           A 13943    ; 4431							if (disk_write(
                           A 13944    ; 4432							fp->flag &= (BY
                           A 13945    ; 4433						}
                           A 13946    ; 4434	#endif
                           A 13947    ; 4435						if (disk_read(fs->p
                           A 13948    ; 4436	#endif
                           A 13949    ; 4437						fp->sect = dsc;
                           A 13950    ; 4438					}
                           A 13951    ; 4439				}
                           A 13952    ; 4440			}
                           A 13953    ; 4441		} else
                           A 13954    ; 4442	#endif
                           A 13955    ; 4443	
                           A 13956    ; 4444		/* Normal Seek */
                           A 13957    ; 4445		{
                           A 13958    ; 4446	#if FF_FS_EXFAT
                           A 13959    ; 4447			if (fs->fs_type != FS_EXFAT && 
                           A 13960    ; 4448	#endif
                           A 13961    ; 4449			if (ofs > fp->obj.objsize && (F
                           A 13962    ; 4450				ofs = fp->obj.objsize;
                           A 13963    ; 4451			}
                           A 13964    ; 4452			ifptr = fp->fptr;
                           A 13965    ; 4453			fp->fptr = nsect = 0;
                           A 13966    ; 4454			if (ofs > 0) {
                           A 13967    ; 4455				bcs = (DWORD)fs->csize * SS
                           A 13968    ; 4456				if (ifptr > 0 &&
                           A 13969    ; 4457					(ofs - 1) / bcs >= (ifp
                           A 13970    ; 4458					fp->fptr = (ifptr - 1) 
                           A 13971    ; 4459					ofs -= fp->fptr;
                           A 13972    ; 4460					clst = fp->clust;
                           A 13973    ; 4461				} else {					
                           A 13974    ; 4462					clst = fp->obj.sclust;	
                           A 13975    ; 4463	#if !FF_FS_READONLY
                           A 13976    ; 4464					if (clst == 0) {		
                           A 13977    ; 4465						clst = create_chain
                           A 13978    ; 4466						if (clst == 1) ABOR
                           A 13979    ; 4467						if (clst == 0xFFFFF
                           A 13980    ; 4468						fp->obj.sclust = cl
                           A 13981    ; 4469					}
                           A 13982    ; 4470	#endif
                           A 13983    ; 4471					fp->clust = clst;
                           A 13984    ; 4472				}
                           A 13985    ; 4473				if (clst != 0) {
                           A 13986    ; 4474					while (ofs > bcs) {		
                           A 13987    ; 4475						ofs -= bcs; fp->fpt
                           A 13988    ; 4476	#if !FF_FS_READONLY
                           A 13989    ; 4477						if (fp->flag & FA_W
                           A 13990    ; 4478							if (FF_FS_EXFAT
                           A 13991    ; 4479								fp->obj.obj
                           A 13992    ; 4480								fp->flag |=
                           A 13993    ; 4481							}
                           A 13994    ; 4482							clst = create_c
                           A 13995    ; 4483							if (clst == 0) 
                           A 13996    ; 4484								ofs = 0; br
                           A 13997    ; 4485							}
                           A 13998    ; 4486						} else
                           A 13999    ; 4487	#endif
                           A 14000    ; 4488						{
                           A 14001    ; 4489							clst = get_fat(
                           A 14002    ; 4490						}
                           A 14003    ; 4491						if (clst == 0xFFFFF
                           A 14004    ; 4492						if (clst <= 1 || cl
                           A 14005    ; 4493						fp->clust = clst;
                           A 14006    ; 4494					}
                           A 14007    ; 4495					fp->fptr += ofs;
                           A 14008    ; 4496					if (ofs % SS(fs)) {
                           A 14009    ; 4497						nsect = clst2sect(f
                           A 14010    ; 4498						if (nsect == 0) ABO
                           A 14011    ; 4499						nsect += (DWORD)(of
                           A 14012    ; 4500					}
                           A 14013    ; 4501				}
                           A 14014    ; 4502			}
                           A 14015    ; 4503			if (!FF_FS_READONLY && fp->fptr
                           A 14016    ; 4504				fp->obj.objsize = fp->fptr;
                           A 14017    ; 4505				fp->flag |= FA_MODIFIED;
                           A 14018    ; 4506			}
                           A 14019    ; 4507			if (fp->fptr % SS(fs) && nsect 
                           A 14020    ; 4508	#if !FF_FS_TINY
                           A 14021    ; 4509	#if !FF_FS_READONLY
                           A 14022    ; 4510				if (fp->flag & FA_DIRTY) {	
                           A 14023    ; 4511					if (disk_write(fs->pdrv
                           A 14024    ; 4512					fp->flag &= (BYTE)~FA_D
                           A 14025    ; 4513				}
                           A 14026    ; 4514	#endif
                           A 14027    ; 4515				if (disk_read(fs->pdrv, fp-
                           A 14028    ; 4516	#endif
                           A 14029    ; 4517				fp->sect = nsect;
                           A 14030    ; 4518			}
                           A 14031    ; 4519		}
                           A 14032    ; 4520	
                           A 14033    ; 4521		LEAVE_FF(fs, res);
                           A 14034    ; 4522	}
                           A 14035    ; 4523	
                           A 14036    ; 4524	
                           A 14037    ; 4525	
                           A 14038    ; 4526	#if FF_FS_MINIMIZE <= 1
                           A 14039    ; 4527	/*-------------------------------------
                           A 14040    ; 4528	/* Create a Directory Object           
                           A 14041    ; 4529	/*-------------------------------------
                           A 14042    ; 4530	
                           A 14043    ; 4531	FRESULT f_opendir (
                           A 14044    ; 4532		DIR* dp,			/* Pointer to d
                           A 14045    ; 4533		const TCHAR* path	/* Pointer to t
                           A 14046    ; 4534	)
                           A 14047    ; 4535	{
                           A 14048    ; 4536		FRESULT res;
                           A 14049    ; 4537		FATFS *fs;
                           A 14050    ; 4538		DEF_NAMBUF
                           A 14051    ; 4539	
                           A 14052    ; 4540	
                           A 14053    ; 4541		if (!dp) return FR_INVALID_OBJECT;
                           A 14054    ; 4542	
                           A 14055    ; 4543		/* Get logical drive */
                           A 14056    ; 4544		res = mount_volume(&path, &fs, 0);
                           A 14057    ; 4545		if (res == FR_OK) {
                           A 14058    ; 4546			dp->obj.fs = fs;
                           A 14059    ; 4547			INIT_NAMBUF(fs);
                           A 14060    ; 4548			res = follow_path(dp, path);	
                           A 14061    ; 4549			if (res == FR_OK) {				
                           A 14062    ; 4550				if (!(dp->fn[NSFLAG] & NS_N
                           A 14063    ; 4551					if (dp->obj.attr & AM_D
                           A 14064    ; 4552	#if FF_FS_EXFAT
                           A 14065    ; 4553						if (fs->fs_type == 
                           A 14066    ; 4554							dp->obj.c_scl =
                           A 14067    ; 4555							dp->obj.c_size 
                           A 14068    ; 4556							dp->obj.c_ofs =
                           A 14069    ; 4557							init_alloc_info
                           A 14070    ; 4558						} else
                           A 14071    ; 4559	#endif
                           A 14072    ; 4560						{
                           A 14073    ; 4561							dp->obj.sclust 
                           A 14074    ; 4562						}
                           A 14075    ; 4563					} else {				
                           A 14076    ; 4564						res = FR_NO_PATH;
                           A 14077    ; 4565					}
                           A 14078    ; 4566				}
                           A 14079    ; 4567				if (res == FR_OK) {
                           A 14080    ; 4568					dp->obj.id = fs->id;
                           A 14081    ; 4569					res = dir_sdi(dp, 0);	
                           A 14082    ; 4570	#if FF_FS_LOCK != 0
                           A 14083    ; 4571					if (res == FR_OK) {
                           A 14084    ; 4572						if (dp->obj.sclust 
                           A 14085    ; 4573							dp->obj.lockid 
                           A 14086    ; 4574							if (!dp->obj.lo
                           A 14087    ; 4575						} else {
                           A 14088    ; 4576							dp->obj.lockid 
                           A 14089    ; 4577						}
                           A 14090    ; 4578					}
                           A 14091    ; 4579	#endif
                           A 14092    ; 4580				}
                           A 14093    ; 4581			}
                           A 14094    ; 4582			FREE_NAMBUF();
                           A 14095    ; 4583			if (res == FR_NO_FILE) res = FR
                           A 14096    ; 4584		}
                           A 14097    ; 4585		if (res != FR_OK) dp->obj.fs = 0;	
                           A 14098    ; 4586	
                           A 14099    ; 4587		LEAVE_FF(fs, res);
                           A 14100    ; 4588	}
                           A 14101    ; 4589	
                           A 14102    ; 4590	
                           A 14103    ; 4591	
                           A 14104    ; 4592	
                           A 14105    ; 4593	/*-------------------------------------
                           A 14106    ; 4594	/* Close Directory                     
                           A 14107    ; 4595	/*-------------------------------------
                           A 14108    ; 4596	
                           A 14109    ; 4597	FRESULT f_closedir (
                           A 14110    ; 4598		DIR *dp		/* Pointer to the direc
                           A 14111    ; 4599	)
                           A 14112    ; 4600	{
                           A 14113    ; 4601		FRESULT res;
                           A 14114    ; 4602		FATFS *fs;
                           A 14115    ; 4603	
                           A 14116    ; 4604	
                           A 14117    ; 4605		res = validate(&dp->obj, &fs);	/* 
                           A 14118    ; 4606		if (res == FR_OK) {
                           A 14119    ; 4607	#if FF_FS_LOCK != 0
                           A 14120    ; 4608			if (dp->obj.lockid) res = dec_l
                           A 14121    ; 4609			if (res == FR_OK) dp->obj.fs = 
                           A 14122    ; 4610	#else
                           A 14123    ; 4611			dp->obj.fs = 0;	/* Invalidate d
                           A 14124    ; 4612	#endif
                           A 14125    ; 4613	#if FF_FS_REENTRANT
                           A 14126    ; 4614			unlock_fs(fs, FR_OK);		/* 
                           A 14127    ; 4615	#endif
                           A 14128    ; 4616		}
                           A 14129    ; 4617		return res;
                           A 14130    ; 4618	}
                           A 14131    ; 4619	
                           A 14132    ; 4620	
                           A 14133    ; 4621	
                           A 14134    ; 4622	
                           A 14135    ; 4623	/*-------------------------------------
                           A 14136    ; 4624	/* Read Directory Entries in Sequence  
                           A 14137    ; 4625	/*-------------------------------------
                           A 14138    ; 4626	
                           A 14139    ; 4627	FRESULT f_readdir (
                           A 14140    ; 4628		DIR* dp,			/* Pointer to t
                           A 14141    ; 4629		FILINFO* fno		/* Pointer to f
                           A 14142    ; 4630	)
                           A 14143    ; 4631	{
                           A 14144    ; 4632		FRESULT res;
                           A 14145    ; 4633		FATFS *fs;
                           A 14146    ; 4634		DEF_NAMBUF
                           A 14147    ; 4635	
                           A 14148    ; 4636	
                           A 14149    ; 4637		res = validate(&dp->obj, &fs);	/* 
                           A 14150    ; 4638		if (res == FR_OK) {
                           A 14151    ; 4639			if (!fno) {
                           A 14152    ; 4640				res = dir_sdi(dp, 0);		
                           A 14153    ; 4641			} else {
                           A 14154    ; 4642				INIT_NAMBUF(fs);
                           A 14155    ; 4643				res = DIR_READ_FILE(dp);	
                           A 14156    ; 4644				if (res == FR_NO_FILE) res 
                           A 14157    ; 4645				if (res == FR_OK) {			
                           A 14158    ; 4646					get_fileinfo(dp, fno);	
                           A 14159    ; 4647					res = dir_next(dp, 0);	
                           A 14160    ; 4648					if (res == FR_NO_FILE) 
                           A 14161    ; 4649				}
                           A 14162    ; 4650				FREE_NAMBUF();
                           A 14163    ; 4651			}
                           A 14164    ; 4652		}
                           A 14165    ; 4653		LEAVE_FF(fs, res);
                           A 14166    ; 4654	}
                           A 14167    ; 4655	
                           A 14168    ; 4656	
                           A 14169    ; 4657	
                           A 14170    ; 4658	#if FF_USE_FIND
                           A 14171    ; 4659	/*-------------------------------------
                           A 14172    ; 4660	/* Find Next File                      
                           A 14173    ; 4661	/*-------------------------------------
                           A 14174    ; 4662	
                           A 14175    ; 4663	FRESULT f_findnext (
                           A 14176    ; 4664		DIR* dp,		/* Pointer to the o
                           A 14177    ; 4665		FILINFO* fno	/* Pointer to the f
                           A 14178    ; 4666	)
                           A 14179    ; 4667	{
                           A 14180    ; 4668		FRESULT res;
                           A 14181    ; 4669	
                           A 14182    ; 4670	
                           A 14183    ; 4671		for (;;) {
                           A 14184    ; 4672			res = f_readdir(dp, fno);		
                           A 14185    ; 4673			if (res != FR_OK || !fno || !fn
                           A 14186    ; 4674			if (pattern_match(dp->pat, fno-
                           A 14187    ; 4675	#if FF_USE_LFN && FF_USE_FIND == 2
                           A 14188    ; 4676			if (pattern_match(dp->pat, fno-
                           A 14189    ; 4677	#endif
                           A 14190    ; 4678		}
                           A 14191    ; 4679		return res;
                           A 14192    ; 4680	}
                           A 14193    ; 4681	
                           A 14194    ; 4682	
                           A 14195    ; 4683	
                           A 14196    ; 4684	/*-------------------------------------
                           A 14197    ; 4685	/* Find First File                     
                           A 14198    ; 4686	/*-------------------------------------
                           A 14199    ; 4687	
                           A 14200    ; 4688	FRESULT f_findfirst (
                           A 14201    ; 4689		DIR* dp,				/* Pointer 
                           A 14202    ; 4690		FILINFO* fno,			/* Pointer 
                           A 14203    ; 4691		const TCHAR* path,		/* Pointer 
                           A 14204    ; 4692		const TCHAR* pattern	/* Pointer 
                           A 14205    ; 4693	)
                           A 14206    ; 4694	{
                           A 14207    ; 4695		FRESULT res;
                           A 14208    ; 4696	
                           A 14209    ; 4697	
                           A 14210    ; 4698		dp->pat = pattern;		/* Save poi
                           A 14211    ; 4699		res = f_opendir(dp, path);		/* 
                           A 14212    ; 4700		if (res == FR_OK) {
                           A 14213    ; 4701			res = f_findnext(dp, fno);	/* 
                           A 14214    ; 4702		}
                           A 14215    ; 4703		return res;
                           A 14216    ; 4704	}
                           A 14217    ; 4705	
                           A 14218    ; 4706	#endif	/* FF_USE_FIND */
                           A 14219    ; 4707	
                           A 14220    ; 4708	
                           A 14221    ; 4709	
                           A 14222    ; 4710	#if FF_FS_MINIMIZE == 0
                           A 14223    ; 4711	/*-------------------------------------
                           A 14224    ; 4712	/* Get File Status                     
                           A 14225    ; 4713	/*-------------------------------------
                           A 14226    ; 4714	
                           A 14227    ; 4715	FRESULT f_stat (
                           A 14228    ; 4716		const TCHAR* path,	/* Pointer to t
                           A 14229    ; 4717		FILINFO* fno		/* Pointer to f
                           A 14230    ; 4718	)
                           A 14231    ; 4719	{
                           A 14232    ; 4720		FRESULT res;
                           A 14233    ; 4721		DIR dj;
                           A 14234    ; 4722		DEF_NAMBUF
                           A 14235    ; 4723	
                           A 14236    ; 4724	
                           A 14237    ; 4725		/* Get logical drive */
                           A 14238    ; 4726		res = mount_volume(&path, &dj.obj.f
                           A 14239    ; 4727		if (res == FR_OK) {
                           A 14240    ; 4728			INIT_NAMBUF(dj.obj.fs);
                           A 14241    ; 4729			res = follow_path(&dj, path);	
                           A 14242    ; 4730			if (res == FR_OK) {				
                           A 14243    ; 4731				if (dj.fn[NSFLAG] & NS_NONA
                           A 14244    ; 4732					res = FR_INVALID_NAME;
                           A 14245    ; 4733				} else {					
                           A 14246    ; 4734					if (fno) get_fileinfo(&
                           A 14247    ; 4735				}
                           A 14248    ; 4736			}
                           A 14249    ; 4737			FREE_NAMBUF();
                           A 14250    ; 4738		}
                           A 14251    ; 4739	
                           A 14252    ; 4740		LEAVE_FF(dj.obj.fs, res);
                           A 14253    ; 4741	}
                           A 14254    ; 4742	
                           A 14255    ; 4743	
                           A 14256    ; 4744	
                           A 14257    ; 4745	#if !FF_FS_READONLY
                           A 14258    ; 4746	/*-------------------------------------
                           A 14259    ; 4747	/* Get Number of Free Clusters         
                           A 14260    ; 4748	/*-------------------------------------
                           A 14261    ; 4749	
                           A 14262    ; 4750	FRESULT f_getfree (
                           A 14263    ; 4751		const TCHAR* path,	/* Logical driv
                           A 14264    ; 4752		DWORD* nclst,		/* Pointer to a
                           A 14265    ; 4753		FATFS** fatfs		/* Pointer to r
                           A 14266    ; 4754	)
                           A 14267    ; 4755	{
                           A 14268    ; 4756		FRESULT res;
                           A 14269    ; 4757		FATFS *fs;
                           A 14270    ; 4758		DWORD nfree, clst, stat;
                           A 14271    ; 4759		LBA_t sect;
                           A 14272    ; 4760		UINT i;
                           A 14273    ; 4761		FFOBJID obj;
                           A 14274    ; 4762	
                           A 14275    ; 4763	
                           A 14276    ; 4764		/* Get logical drive */
                           A 14277    ; 4765		res = mount_volume(&path, &fs, 0);
                           A 14278    ; 4766		if (res == FR_OK) {
                           A 14279    ; 4767			*fatfs = fs;				/* 
                           A 14280    ; 4768			/* If free_clst is valid, retur
                           A 14281    ; 4769			if (fs->free_clst <= fs->n_fate
                           A 14282    ; 4770				*nclst = fs->free_clst;
                           A 14283    ; 4771			} else {
                           A 14284    ; 4772				/* Scan FAT to obtain numbe
                           A 14285    ; 4773				nfree = 0;
                           A 14286    ; 4774				if (fs->fs_type == FS_FAT12
                           A 14287    ; 4775					clst = 2; obj.fs = fs;
                           A 14288    ; 4776					do {
                           A 14289    ; 4777						stat = get_fat(&obj
                           A 14290    ; 4778						if (stat == 0xFFFFF
                           A 14291    ; 4779						if (stat == 1) { re
                           A 14292    ; 4780						if (stat == 0) nfre
                           A 14293    ; 4781					} while (++clst < fs->n
                           A 14294    ; 4782				} else {
                           A 14295    ; 4783	#if FF_FS_EXFAT
                           A 14296    ; 4784					if (fs->fs_type == FS_E
                           A 14297    ; 4785						BYTE bm;
                           A 14298    ; 4786						UINT b;
                           A 14299    ; 4787	
                           A 14300    ; 4788						clst = fs->n_fatent
                           A 14301    ; 4789						sect = fs->bitbase;
                           A 14302    ; 4790						i = 0;				
                           A 14303    ; 4791						do {	/* Counts n
                           A 14304    ; 4792							if (i == 0) {
                           A 14305    ; 4793								res = move_
                           A 14306    ; 4794								if (res != 
                           A 14307    ; 4795							}
                           A 14308    ; 4796							for (b = 8, bm 
                           A 14309    ; 4797								if (!(bm & 
                           A 14310    ; 4798								bm >>= 1;
                           A 14311    ; 4799							}
                           A 14312    ; 4800							i = (i + 1) % S
                           A 14313    ; 4801						} while (clst);
                           A 14314    ; 4802					} else
                           A 14315    ; 4803	#endif
                           A 14316    ; 4804					{	/* FAT16/32: Scan W
                           A 14317    ; 4805						clst = fs->n_fatent
                           A 14318    ; 4806						sect = fs->fatbase;
                           A 14319    ; 4807						i = 0;				
                           A 14320    ; 4808						do {	/* Counts n
                           A 14321    ; 4809							if (i == 0) {
                           A 14322    ; 4810								res = move_
                           A 14323    ; 4811								if (res != 
                           A 14324    ; 4812							}
                           A 14325    ; 4813							if (fs->fs_type
                           A 14326    ; 4814								if (ld_word
                           A 14327    ; 4815								i += 2;
                           A 14328    ; 4816							} else {
                           A 14329    ; 4817								if ((ld_dwo
                           A 14330    ; 4818								i += 4;
                           A 14331    ; 4819							}
                           A 14332    ; 4820							i %= SS(fs);
                           A 14333    ; 4821						} while (--clst);
                           A 14334    ; 4822					}
                           A 14335    ; 4823				}
                           A 14336    ; 4824				if (res == FR_OK) {		/* 
                           A 14337    ; 4825					*nclst = nfree;			
                           A 14338    ; 4826					fs->free_clst = nfree;	
                           A 14339    ; 4827					fs->fsi_flag |= 1;		
                           A 14340    ; 4828				}
                           A 14341    ; 4829			}
                           A 14342    ; 4830		}
                           A 14343    ; 4831	
                           A 14344    ; 4832		LEAVE_FF(fs, res);
                           A 14345    ; 4833	}
                           A 14346    ; 4834	
                           A 14347    ; 4835	
                           A 14348    ; 4836	
                           A 14349    ; 4837	
                           A 14350    ; 4838	/*-------------------------------------
                           A 14351    ; 4839	/* Truncate File                       
                           A 14352    ; 4840	/*-------------------------------------
                           A 14353    ; 4841	
                           A 14354    ; 4842	FRESULT f_truncate (
                           A 14355    ; 4843		FIL* fp		/* Pointer to the file 
                           A 14356    ; 4844	)
                           A 14357    ; 4845	{
                           A 14358    ; 4846		FRESULT res;
                           A 14359    ; 4847		FATFS *fs;
                           A 14360    ; 4848		DWORD ncl;
                           A 14361    ; 4849	
                           A 14362    ; 4850	
                           A 14363    ; 4851		res = validate(&fp->obj, &fs);	/* 
                           A 14364    ; 4852		if (res != FR_OK || (res = (FRESULT
                           A 14365    ; 4853		if (!(fp->flag & FA_WRITE)) LEAVE_F
                           A 14366    ; 4854	
                           A 14367    ; 4855		if (fp->fptr < fp->obj.objsize) {	
                           A 14368    ; 4856			if (fp->fptr == 0) {	/* When
                           A 14369    ; 4857				res = remove_chain(&fp->obj
                           A 14370    ; 4858				fp->obj.sclust = 0;
                           A 14371    ; 4859			} else {				/* When
                           A 14372    ; 4860				ncl = get_fat(&fp->obj, fp-
                           A 14373    ; 4861				res = FR_OK;
                           A 14374    ; 4862				if (ncl == 0xFFFFFFFF) res 
                           A 14375    ; 4863				if (ncl == 1) res = FR_INT_
                           A 14376    ; 4864				if (res == FR_OK && ncl < f
                           A 14377    ; 4865					res = remove_chain(&fp-
                           A 14378    ; 4866				}
                           A 14379    ; 4867			}
                           A 14380    ; 4868			fp->obj.objsize = fp->fptr;	/* 
                           A 14381    ; 4869			fp->flag |= FA_MODIFIED;
                           A 14382    ; 4870	#if !FF_FS_TINY
                           A 14383    ; 4871			if (res == FR_OK && (fp->flag &
                           A 14384    ; 4872				if (disk_write(fs->pdrv, fp
                           A 14385    ; 4873					res = FR_DISK_ERR;
                           A 14386    ; 4874				} else {
                           A 14387    ; 4875					fp->flag &= (BYTE)~FA_D
                           A 14388    ; 4876				}
                           A 14389    ; 4877			}
                           A 14390    ; 4878	#endif
                           A 14391    ; 4879			if (res != FR_OK) ABORT(fs, res
                           A 14392    ; 4880		}
                           A 14393    ; 4881	
                           A 14394    ; 4882		LEAVE_FF(fs, res);
                           A 14395    ; 4883	}
                           A 14396    ; 4884	
                           A 14397    ; 4885	
                           A 14398    ; 4886	
                           A 14399    ; 4887	
                           A 14400    ; 4888	/*-------------------------------------
                           A 14401    ; 4889	/* Delete a File/Directory             
                           A 14402    ; 4890	/*-------------------------------------
                           A 14403    ; 4891	
                           A 14404    ; 4892	FRESULT f_unlink (
                           A 14405    ; 4893		const TCHAR* path		/* Pointer 
                           A 14406    ; 4894	)
                           A 14407    ; 4895	{
                           A 14408    ; 4896		FRESULT res;
                           A 14409    ; 4897		DIR dj, sdj;
                           A 14410    ; 4898		DWORD dclst = 0;
                           A 14411    ; 4899		FATFS *fs;
                           A 14412    ; 4900	#if FF_FS_EXFAT
                           A 14413    ; 4901		FFOBJID obj;
                           A 14414    ; 4902	#endif
                           A 14415    ; 4903		DEF_NAMBUF
                           A 14416    ; 4904	
                           A 14417    ; 4905	
                           A 14418    ; 4906		/* Get logical drive */
                           A 14419    ; 4907		res = mount_volume(&path, &fs, FA_W
                           A 14420    ; 4908		if (res == FR_OK) {
                           A 14421    ; 4909			dj.obj.fs = fs;
                           A 14422    ; 4910			INIT_NAMBUF(fs);
                           A 14423    ; 4911			res = follow_path(&dj, path);	
                           A 14424    ; 4912			if (FF_FS_RPATH && res == FR_OK
                           A 14425    ; 4913				res = FR_INVALID_NAME;		
                           A 14426    ; 4914			}
                           A 14427    ; 4915	#if FF_FS_LOCK != 0
                           A 14428    ; 4916			if (res == FR_OK) res = chk_loc
                           A 14429    ; 4917	#endif
                           A 14430    ; 4918			if (res == FR_OK) {				
                           A 14431    ; 4919				if (dj.fn[NSFLAG] & NS_NONA
                           A 14432    ; 4920					res = FR_INVALID_NAME;	
                           A 14433    ; 4921				} else {
                           A 14434    ; 4922					if (dj.obj.attr & AM_RD
                           A 14435    ; 4923						res = FR_DENIED;	
                           A 14436    ; 4924					}
                           A 14437    ; 4925				}
                           A 14438    ; 4926				if (res == FR_OK) {
                           A 14439    ; 4927	#if FF_FS_EXFAT
                           A 14440    ; 4928					obj.fs = fs;
                           A 14441    ; 4929					if (fs->fs_type == FS_E
                           A 14442    ; 4930						init_alloc_info(fs,
                           A 14443    ; 4931						dclst = obj.sclust;
                           A 14444    ; 4932					} else
                           A 14445    ; 4933	#endif
                           A 14446    ; 4934					{
                           A 14447    ; 4935						dclst = ld_clust(fs
                           A 14448    ; 4936					}
                           A 14449    ; 4937					if (dj.obj.attr & AM_DI
                           A 14450    ; 4938	#if FF_FS_RPATH != 0
                           A 14451    ; 4939						if (dclst == fs->cd
                           A 14452    ; 4940							res = FR_DENIED
                           A 14453    ; 4941						} else
                           A 14454    ; 4942	#endif
                           A 14455    ; 4943						{
                           A 14456    ; 4944							sdj.obj.fs = fs
                           A 14457    ; 4945							sdj.obj.sclust 
                           A 14458    ; 4946	#if FF_FS_EXFAT
                           A 14459    ; 4947							if (fs->fs_type
                           A 14460    ; 4948								sdj.obj.obj
                           A 14461    ; 4949								sdj.obj.sta
                           A 14462    ; 4950							}
                           A 14463    ; 4951	#endif
                           A 14464    ; 4952							res = dir_sdi(&
                           A 14465    ; 4953							if (res == FR_O
                           A 14466    ; 4954								res = DIR_R
                           A 14467    ; 4955								if (res == 
                           A 14468    ; 4956								if (res == 
                           A 14469    ; 4957							}
                           A 14470    ; 4958						}
                           A 14471    ; 4959					}
                           A 14472    ; 4960				}
                           A 14473    ; 4961				if (res == FR_OK) {
                           A 14474    ; 4962					res = dir_remove(&dj);	
                           A 14475    ; 4963					if (res == FR_OK && dcl
                           A 14476    ; 4964	#if FF_FS_EXFAT
                           A 14477    ; 4965						res = remove_chain(
                           A 14478    ; 4966	#else
                           A 14479    ; 4967						res = remove_chain(
                           A 14480    ; 4968	#endif
                           A 14481    ; 4969					}
                           A 14482    ; 4970					if (res == FR_OK) res =
                           A 14483    ; 4971				}
                           A 14484    ; 4972			}
                           A 14485    ; 4973			FREE_NAMBUF();
                           A 14486    ; 4974		}
                           A 14487    ; 4975	
                           A 14488    ; 4976		LEAVE_FF(fs, res);
                           A 14489    ; 4977	}
                           A 14490    ; 4978	
                           A 14491    ; 4979	
                           A 14492    ; 4980	
                           A 14493    ; 4981	
                           A 14494    ; 4982	/*-------------------------------------
                           A 14495    ; 4983	/* Create a Directory                  
                           A 14496    ; 4984	/*-------------------------------------
                           A 14497    ; 4985	
                           A 14498    ; 4986	FRESULT f_mkdir (
                           A 14499    ; 4987		const TCHAR* path		/* Pointer 
                           A 14500    ; 4988	)
                           A 14501    ; 4989	{
                           A 14502    ; 4990		FRESULT res;
                           A 14503    ; 4991		DIR dj;
                           A 14504    ; 4992		FFOBJID sobj;
                           A 14505    ; 4993		FATFS *fs;
                           A 14506    ; 4994		DWORD dcl, pcl, tm;
                           A 14507    ; 4995		DEF_NAMBUF
                           A 14508    ; 4996	
                           A 14509    ; 4997	
                           A 14510    ; 4998		res = mount_volume(&path, &fs, FA_W
                           A 14511    ; 4999		if (res == FR_OK) {
                           A 14512    ; 5000			dj.obj.fs = fs;
                           A 14513    ; 5001			INIT_NAMBUF(fs);
                           A 14514    ; 5002			res = follow_path(&dj, path);	
                           A 14515    ; 5003			if (res == FR_OK) res = FR_EXIS
                           A 14516    ; 5004			if (FF_FS_RPATH && res == FR_NO
                           A 14517    ; 5005				res = FR_INVALID_NAME;
                           A 14518    ; 5006			}
                           A 14519    ; 5007			if (res == FR_NO_FILE) {		
                           A 14520    ; 5008				sobj.fs = fs;				
                           A 14521    ; 5009				dcl = create_chain(&sobj, 0
                           A 14522    ; 5010				res = FR_OK;
                           A 14523    ; 5011				if (dcl == 0) res = FR_DENI
                           A 14524    ; 5012				if (dcl == 1) res = FR_INT_
                           A 14525    ; 5013				if (dcl == 0xFFFFFFFF) res 
                           A 14526    ; 5014				tm = GET_FATTIME();
                           A 14527    ; 5015				if (res == FR_OK) {
                           A 14528    ; 5016					res = dir_clear(fs, dcl
                           A 14529    ; 5017					if (res == FR_OK) {
                           A 14530    ; 5018						if (!FF_FS_EXFAT ||
                           A 14531    ; 5019							memset(fs->win 
                           A 14532    ; 5020							fs->win[DIR_Nam
                           A 14533    ; 5021							fs->win[DIR_Att
                           A 14534    ; 5022							st_dword(fs->wi
                           A 14535    ; 5023							st_clust(fs, fs
                           A 14536    ; 5024							memcpy(fs->win 
                           A 14537    ; 5025							fs->win[SZDIRE 
                           A 14538    ; 5026							st_clust(fs, fs
                           A 14539    ; 5027							fs->wflag = 1;
                           A 14540    ; 5028						}
                           A 14541    ; 5029						res = dir_register(
                           A 14542    ; 5030					}
                           A 14543    ; 5031				}
                           A 14544    ; 5032				if (res == FR_OK) {
                           A 14545    ; 5033	#if FF_FS_EXFAT
                           A 14546    ; 5034					if (fs->fs_type == FS_E
                           A 14547    ; 5035						st_dword(fs->dirbuf
                           A 14548    ; 5036						st_dword(fs->dirbuf
                           A 14549    ; 5037						st_dword(fs->dirbuf
                           A 14550    ; 5038						st_dword(fs->dirbuf
                           A 14551    ; 5039						fs->dirbuf[XDIR_Gen
                           A 14552    ; 5040						fs->dirbuf[XDIR_Att
                           A 14553    ; 5041						res = store_xdir(&d
                           A 14554    ; 5042					} else
                           A 14555    ; 5043	#endif
                           A 14556    ; 5044					{
                           A 14557    ; 5045						st_dword(dj.dir + D
                           A 14558    ; 5046						st_clust(fs, dj.dir
                           A 14559    ; 5047						dj.dir[DIR_Attr] = 
                           A 14560    ; 5048						fs->wflag = 1;
                           A 14561    ; 5049					}
                           A 14562    ; 5050					if (res == FR_OK) {
                           A 14563    ; 5051						res = sync_fs(fs);
                           A 14564    ; 5052					}
                           A 14565    ; 5053				} else {
                           A 14566    ; 5054					remove_chain(&sobj, dcl
                           A 14567    ; 5055				}
                           A 14568    ; 5056			}
                           A 14569    ; 5057			FREE_NAMBUF();
                           A 14570    ; 5058		}
                           A 14571    ; 5059	
                           A 14572    ; 5060		LEAVE_FF(fs, res);
                           A 14573    ; 5061	}
                           A 14574    ; 5062	
                           A 14575    ; 5063	
                           A 14576    ; 5064	
                           A 14577    ; 5065	
                           A 14578    ; 5066	/*-------------------------------------
                           A 14579    ; 5067	/* Rename a File/Directory             
                           A 14580    ; 5068	/*-------------------------------------
                           A 14581    ; 5069	
                           A 14582    ; 5070	FRESULT f_rename (
                           A 14583    ; 5071		const TCHAR* path_old,	/* Pointer 
                           A 14584    ; 5072		const TCHAR* path_new	/* Pointer 
                           A 14585    ; 5073	)
                           A 14586    ; 5074	{
                           A 14587    ; 5075		FRESULT res;
                           A 14588    ; 5076		DIR djo, djn;
                           A 14589    ; 5077		FATFS *fs;
                           A 14590    ; 5078		BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 :
                           A 14591    ; 5079		LBA_t sect;
                           A 14592    ; 5080		DEF_NAMBUF
                           A 14593    ; 5081	
                           A 14594    ; 5082	
                           A 14595    ; 5083		get_ldnumber(&path_new);			
                           A 14596    ; 5084		res = mount_volume(&path_old, &fs, 
                           A 14597    ; 5085		if (res == FR_OK) {
                           A 14598    ; 5086			djo.obj.fs = fs;
                           A 14599    ; 5087			INIT_NAMBUF(fs);
                           A 14600    ; 5088			res = follow_path(&djo, path_ol
                           A 14601    ; 5089			if (res == FR_OK && (djo.fn[NSF
                           A 14602    ; 5090	#if FF_FS_LOCK != 0
                           A 14603    ; 5091			if (res == FR_OK) {
                           A 14604    ; 5092				res = chk_lock(&djo, 2);
                           A 14605    ; 5093			}
                           A 14606    ; 5094	#endif
                           A 14607    ; 5095			if (res == FR_OK) {				
                           A 14608    ; 5096	#if FF_FS_EXFAT
                           A 14609    ; 5097				if (fs->fs_type == FS_EXFAT
                           A 14610    ; 5098					BYTE nf, nn;
                           A 14611    ; 5099					WORD nh;
                           A 14612    ; 5100	
                           A 14613    ; 5101					memcpy(buf, fs->dirbuf,
                           A 14614    ; 5102					memcpy(&djn, &djo, size
                           A 14615    ; 5103					res = follow_path(&djn,
                           A 14616    ; 5104					if (res == FR_OK) {		
                           A 14617    ; 5105						res = (djn.obj.sclu
                           A 14618    ; 5106					}
                           A 14619    ; 5107					if (res == FR_NO_FILE) 
                           A 14620    ; 5108						res = dir_register(
                           A 14621    ; 5109						if (res == FR_OK) {
                           A 14622    ; 5110							nf = fs->dirbuf
                           A 14623    ; 5111							nh = ld_word(fs
                           A 14624    ; 5112							memcpy(fs->dirb
                           A 14625    ; 5113							fs->dirbuf[XDIR
                           A 14626    ; 5114							st_word(fs->dir
                           A 14627    ; 5115							if (!(fs->dirbu
                           A 14628    ; 5116	/* Start of critical section where an i
                           A 14629    ; 5117							res = store_xdi
                           A 14630    ; 5118						}
                           A 14631    ; 5119					}
                           A 14632    ; 5120				} else
                           A 14633    ; 5121	#endif
                           A 14634    ; 5122				{	/* At FAT/FAT32 volume 
                           A 14635    ; 5123					memcpy(buf, djo.dir, SZ
                           A 14636    ; 5124					memcpy(&djn, &djo, size
                           A 14637    ; 5125					res = follow_path(&djn,
                           A 14638    ; 5126					if (res == FR_OK) {		
                           A 14639    ; 5127						res = (djn.obj.sclu
                           A 14640    ; 5128					}
                           A 14641    ; 5129					if (res == FR_NO_FILE) 
                           A 14642    ; 5130						res = dir_register(
                           A 14643    ; 5131						if (res == FR_OK) {
                           A 14644    ; 5132							dir = djn.dir;	
                           A 14645    ; 5133							memcpy(dir + 13
                           A 14646    ; 5134							dir[DIR_Attr] =
                           A 14647    ; 5135							if (!(dir[DIR_A
                           A 14648    ; 5136							fs->wflag = 1;
                           A 14649    ; 5137							if ((dir[DIR_At
                           A 14650    ; 5138								sect = clst
                           A 14651    ; 5139								if (sect ==
                           A 14652    ; 5140									res = F
                           A 14653    ; 5141								} else {
                           A 14654    ; 5142	/* Start of critical section where an i
                           A 14655    ; 5143									res = m
                           A 14656    ; 5144									dir = f
                           A 14657    ; 5145									if (res
                           A 14658    ; 5146										st_
                           A 14659    ; 5147										fs-
                           A 14660    ; 5148									}
                           A 14661    ; 5149								}
                           A 14662    ; 5150							}
                           A 14663    ; 5151						}
                           A 14664    ; 5152					}
                           A 14665    ; 5153				}
                           A 14666    ; 5154				if (res == FR_OK) {
                           A 14667    ; 5155					res = dir_remove(&djo);
                           A 14668    ; 5156					if (res == FR_OK) {
                           A 14669    ; 5157						res = sync_fs(fs);
                           A 14670    ; 5158					}
                           A 14671    ; 5159				}
                           A 14672    ; 5160	/* End of the critical section */
                           A 14673    ; 5161			}
                           A 14674    ; 5162			FREE_NAMBUF();
                           A 14675    ; 5163		}
                           A 14676    ; 5164	
                           A 14677    ; 5165		LEAVE_FF(fs, res);
                           A 14678    ; 5166	}
                           A 14679    ; 5167	
                           A 14680    ; 5168	#endif /* !FF_FS_READONLY */
                           A 14681    ; 5169	#endif /* FF_FS_MINIMIZE == 0 */
                           A 14682    ; 5170	#endif /* FF_FS_MINIMIZE <= 1 */
                           A 14683    ; 5171	#endif /* FF_FS_MINIMIZE <= 2 */
                           A 14684    ; 5172	
                           A 14685    ; 5173	
                           A 14686    ; 5174	
                           A 14687    ; 5175	#if FF_USE_CHMOD && !FF_FS_READONLY
                           A 14688    ; 5176	/*-------------------------------------
                           A 14689    ; 5177	/* Change Attribute                    
                           A 14690    ; 5178	/*-------------------------------------
                           A 14691    ; 5179	
                           A 14692    ; 5180	FRESULT f_chmod (
                           A 14693    ; 5181		const TCHAR* path,	/* Pointer to t
                           A 14694    ; 5182		BYTE attr,			/* Attribute bi
                           A 14695    ; 5183		BYTE mask			/* Attribute ma
                           A 14696    ; 5184	)
                           A 14697    ; 5185	{
                           A 14698    ; 5186		FRESULT res;
                           A 14699    ; 5187		DIR dj;
                           A 14700    ; 5188		FATFS *fs;
                           A 14701    ; 5189		DEF_NAMBUF
                           A 14702    ; 5190	
                           A 14703    ; 5191	
                           A 14704    ; 5192		res = mount_volume(&path, &fs, FA_W
                           A 14705    ; 5193		if (res == FR_OK) {
                           A 14706    ; 5194			dj.obj.fs = fs;
                           A 14707    ; 5195			INIT_NAMBUF(fs);
                           A 14708    ; 5196			res = follow_path(&dj, path);	
                           A 14709    ; 5197			if (res == FR_OK && (dj.fn[NSFL
                           A 14710    ; 5198			if (res == FR_OK) {
                           A 14711    ; 5199				mask &= AM_RDO|AM_HID|AM_SY
                           A 14712    ; 5200	#if FF_FS_EXFAT
                           A 14713    ; 5201				if (fs->fs_type == FS_EXFAT
                           A 14714    ; 5202					fs->dirbuf[XDIR_Attr] =
                           A 14715    ; 5203					res = store_xdir(&dj);
                           A 14716    ; 5204				} else
                           A 14717    ; 5205	#endif
                           A 14718    ; 5206				{
                           A 14719    ; 5207					dj.dir[DIR_Attr] = (att
                           A 14720    ; 5208					fs->wflag = 1;
                           A 14721    ; 5209				}
                           A 14722    ; 5210				if (res == FR_OK) {
                           A 14723    ; 5211					res = sync_fs(fs);
                           A 14724    ; 5212				}
                           A 14725    ; 5213			}
                           A 14726    ; 5214			FREE_NAMBUF();
                           A 14727    ; 5215		}
                           A 14728    ; 5216	
                           A 14729    ; 5217		LEAVE_FF(fs, res);
                           A 14730    ; 5218	}
                           A 14731    ; 5219	
                           A 14732    ; 5220	
                           A 14733    ; 5221	
                           A 14734    ; 5222	
                           A 14735    ; 5223	/*-------------------------------------
                           A 14736    ; 5224	/* Change Timestamp                    
                           A 14737    ; 5225	/*-------------------------------------
                           A 14738    ; 5226	
                           A 14739    ; 5227	FRESULT f_utime (
                           A 14740    ; 5228		const TCHAR* path,	/* Pointer to t
                           A 14741    ; 5229		const FILINFO* fno	/* Pointer to t
                           A 14742    ; 5230	)
                           A 14743    ; 5231	{
                           A 14744    ; 5232		FRESULT res;
                           A 14745    ; 5233		DIR dj;
                           A 14746    ; 5234		FATFS *fs;
                           A 14747    ; 5235		DEF_NAMBUF
                           A 14748    ; 5236	
                           A 14749    ; 5237	
                           A 14750    ; 5238		res = mount_volume(&path, &fs, FA_W
                           A 14751    ; 5239		if (res == FR_OK) {
                           A 14752    ; 5240			dj.obj.fs = fs;
                           A 14753    ; 5241			INIT_NAMBUF(fs);
                           A 14754    ; 5242			res = follow_path(&dj, path);	
                           A 14755    ; 5243			if (res == FR_OK && (dj.fn[NSFL
                           A 14756    ; 5244			if (res == FR_OK) {
                           A 14757    ; 5245	#if FF_FS_EXFAT
                           A 14758    ; 5246				if (fs->fs_type == FS_EXFAT
                           A 14759    ; 5247					st_dword(fs->dirbuf + X
                           A 14760    ; 5248					res = store_xdir(&dj);
                           A 14761    ; 5249				} else
                           A 14762    ; 5250	#endif
                           A 14763    ; 5251				{
                           A 14764    ; 5252					st_dword(dj.dir + DIR_M
                           A 14765    ; 5253					fs->wflag = 1;
                           A 14766    ; 5254				}
                           A 14767    ; 5255				if (res == FR_OK) {
                           A 14768    ; 5256					res = sync_fs(fs);
                           A 14769    ; 5257				}
                           A 14770    ; 5258			}
                           A 14771    ; 5259			FREE_NAMBUF();
                           A 14772    ; 5260		}
                           A 14773    ; 5261	
                           A 14774    ; 5262		LEAVE_FF(fs, res);
                           A 14775    ; 5263	}
                           A 14776    ; 5264	
                           A 14777    ; 5265	#endif	/* FF_USE_CHMOD && !FF_FS_READO
                           A 14778    ; 5266	
                           A 14779    ; 5267	
                           A 14780    ; 5268	
                           A 14781    ; 5269	#if FF_USE_LABEL
                           A 14782    ; 5270	/*-------------------------------------
                           A 14783    ; 5271	/* Get Volume Label                    
                           A 14784    ; 5272	/*-------------------------------------
                           A 14785    ; 5273	
                           A 14786    ; 5274	FRESULT f_getlabel (
                           A 14787    ; 5275		const TCHAR* path,	/* Logical driv
                           A 14788    ; 5276		TCHAR* label,		/* Buffer to st
                           A 14789    ; 5277		DWORD* vsn			/* Variable to 
                           A 14790    ; 5278	)
                           A 14791    ; 5279	{
043BAB                     A 14792    _f_getlabel:
                           A 14793    .DEFINE "_f_getlabel"
                           A 14794    
                           A 14795    .VALUE _f_getlabel
                           A 14796    
                           A 14797    .CLASS 2
                           A 14798    
                           A 14799    .TYPE 68
                           A 14800    
                           A 14801    .ENDEF
                           A 14802    
                           A 14803    .BEGFUNC "f_getlabel",5279,"_f_getlabel"
                           A 14804    
                           A 14805    .LINE 5279
                           A 14806    
                           A 14807    .DEFINE "path"
                           A 14808    
                           A 14809    .CLASS 65
                           A 14810    
                           A 14811    .VALUE 6
                           A 14812    
                           A 14813    .TYPE 194
                           A 14814    
                           A 14815    .ENDEF
                           A 14816    
                           A 14817    .DEFINE "label"
                           A 14818    
                           A 14819    .CLASS 65
                           A 14820    
                           A 14821    .VALUE 9
                           A 14822    
                           A 14823    .TYPE 34
                           A 14824    
                           A 14825    .ENDEF
                           A 14826    
                           A 14827    .DEFINE "vsn"
                           A 14828    
                           A 14829    .CLASS 65
                           A 14830    
                           A 14831    .VALUE 12
                           A 14832    
                           A 14833    .TYPE 47
                           A 14834    
                           A 14835    .ENDEF
                           A 14836    
                           A 14837    .DEFINE "di"
                           A 14838    
                           A 14839    .CLASS 65
                           A 14840    
                           A 14841    .VALUE -3
                           A 14842    
                           A 14843    .TYPE 14
                           A 14844    
                           A 14845    .ENDEF
                           A 14846    
                           A 14847    .DEFINE "res"
                           A 14848    
                           A 14849    .CLASS 65
                           A 14850    
                           A 14851    .VALUE -6
                           A 14852    
                           A 14853    .TYPE 4
                           A 14854    
                           A 14855    .ENDEF
                           A 14856    
                           A 14857    .DEFINE "fs"
                           A 14858    
                           A 14859    .CLASS 65
                           A 14860    
                           A 14861    .VALUE -9
                           A 14862    
                           A 14863    .TAG "NONAME0"
                           A 14864    
                           A 14865    .TYPE 40
                           A 14866    
                           A 14867    .ENDEF
                           A 14868    
                           A 14869    .DEFINE "si"
                           A 14870    
                           A 14871    .CLASS 65
                           A 14872    
                           A 14873    .VALUE -12
                           A 14874    
                           A 14875    .TYPE 14
                           A 14876    
                           A 14877    .ENDEF
                           A 14878    
                           A 14879    .DEFINE "wc"
                           A 14880    
                           A 14881    .CLASS 65
                           A 14882    
                           A 14883    .VALUE -14
                           A 14884    
                           A 14885    .TYPE 13
                           A 14886    
                           A 14887    .ENDEF
                           A 14888    
                           A 14889    .DEFINE "dj"
                           A 14890    
                           A 14891    .CLASS 65
                           A 14892    
                           A 14893    .VALUE -60
                           A 14894    
                           A 14895    .TAG "NONAME3"
                           A 14896    
                           A 14897    .TYPE 8
                           A 14898    
                           A 14899    .ENDEF
                           A 14900    
043BAB DDE5                A 14901    	PUSH	IX
043BAD DD210000 00         A 14902    	LD	IX,0
043BB2 DD39                A 14903    	ADD	IX,SP
043BB4 ED22C1              A 14904    	LEA	HL,IX+%FFFFFFC1
043BB7 F9                  A 14905    	LD	SP,HL
                           A 14906    ; 5280		FRESULT res;
                           A 14907    ; 5281		DIR dj;
                           A 14908    ; 5282		FATFS *fs;
                           A 14909    ; 5283		UINT si, di;
                           A 14910    ; 5284		WCHAR wc;
                           A 14911    ; 5285	
                           A 14912    ; 5286		/* Get logical drive */
                           A 14913    ; 5287		res = mount_volume(&path, &fs, 0);
                           A 14914    .LINE 5287
                           A 14915    
043BB8 01000000            A 14916    	LD	BC,0
043BBC C5                  A 14917    	PUSH	BC
043BBD ED65F7              A 14918    	PEA	IX+%FFFFFFF7
043BC0 ED6506              A 14919    	PEA	IX+%6
043BC3 CD 3E 2D 04         A 14920    	CALL	_mount_volume
043BC7 C1                  A 14921    	POP	BC
043BC8 C1                  A 14922    	POP	BC
043BC9 C1                  A 14923    	POP	BC
043BCA DD2FFA              A 14924    	LD	(IX+%FFFFFFFA),HL
                           A 14925    ; 5288	
                           A 14926    ; 5289		/* Get volume label */
                           A 14927    ; 5290		if (res == FR_OK && label) {
                           A 14928    .LINE 5290
                           A 14929    
043BCD CD 07 46 04         A 14930    	CALL	__icmpzero
043BD1 C2 B4 3C 04         A 14931    	JR	NZ,L_679
043BD5 DD2709              A 14932    	LD	HL,(IX+%9)
043BD8 CD 07 46 04         A 14933    	CALL	__icmpzero
043BDC CA B4 3C 04         A 14934    	JR	Z,L_679
                           A 14935    ; 5291			dj.obj.fs = fs; dj.obj.sclust =
                           A 14936    .LINE 5291
                           A 14937    
043BE0 ED02C4              A 14938    	LEA	BC,IX+%FFFFFFC4
043BE3 DD0FC1              A 14939    	LD	(IX+%FFFFFFC1),BC
043BE6 DD07F7              A 14940    	LD	BC,(IX+%FFFFFFF7)
043BE9 DD0FC4              A 14941    	LD	(IX+%FFFFFFC4),BC
043BEC 01000000            A 14942    	LD	BC,0
043BF0 DD31C1              A 14943    	LD	IY,(IX+%FFFFFFC1)
043BF3 FD0F07              A 14944    	LD	(IY+%7),BC
043BF6 FD360A00            A 14945    	LD	(IY+%A),%0
                           A 14946    ; 5292			res = dir_sdi(&dj, 0);
                           A 14947    .LINE 5292
                           A 14948    
043BFA C5                  A 14949    	PUSH	BC
043BFB C5                  A 14950    	PUSH	BC
043BFC ED65C4              A 14951    	PEA	IX+%FFFFFFC4
043BFF CD 09 14 04         A 14952    	CALL	_dir_sdi
043C03 C1                  A 14953    	POP	BC
043C04 C1                  A 14954    	POP	BC
043C05 C1                  A 14955    	POP	BC
043C06 DD2FFA              A 14956    	LD	(IX+%FFFFFFFA),HL
                           A 14957    ; 5293			if (res == FR_OK) {
                           A 14958    .LINE 5293
                           A 14959    
043C09 CD 07 46 04         A 14960    	CALL	__icmpzero
043C0D C2 9C 3C 04         A 14961    	JR	NZ,L_670
                           A 14962    ; 5294			 	res = DIR_READ_LABEL(&dj);	
                           A 14963    .LINE 5294
                           A 14964    
043C11 01010000            A 14965    	LD	BC,1
043C15 C5                  A 14966    	PUSH	BC
043C16 ED65C4              A 14967    	PEA	IX+%FFFFFFC4
043C19 CD 0F 1B 04         A 14968    	CALL	_dir_read
043C1D C1                  A 14969    	POP	BC
043C1E C1                  A 14970    	POP	BC
043C1F DD2FFA              A 14971    	LD	(IX+%FFFFFFFA),HL
                           A 14972    ; 5295			 	if (res == FR_OK) {
                           A 14973    .LINE 5295
                           A 14974    
043C22 CD 07 46 04         A 14975    	CALL	__icmpzero
043C26 20 74               A 14976    	JR	NZ,L_670
                           A 14977    ; 5296	#if FF_FS_EXFAT
                           A 14978    ; 5297					if (fs->fs_type == FS_E
                           A 14979    ; 5298						WCHAR hs;
                           A 14980    ; 5299						UINT nw;
                           A 14981    ; 5300	
                           A 14982    ; 5301						for (si = di = hs =
                           A 14983    ; 5302							wc = ld_word(dj
                           A 14984    ; 5303							if (hs == 0 && 
                           A 14985    ; 5304								hs = wc; co
                           A 14986    ; 5305							}
                           A 14987    ; 5306							nw = put_utf((D
                           A 14988    ; 5307							if (nw == 0) { 
                           A 14989    ; 5308							di += nw;
                           A 14990    ; 5309							hs = 0;
                           A 14991    ; 5310						}
                           A 14992    ; 5311						if (hs != 0) di = 0
                           A 14993    ; 5312						label[di] = 0;
                           A 14994    ; 5313					} else
                           A 14995    ; 5314	#endif
                           A 14996    ; 5315					{
                           A 14997    ; 5316						si = di = 0;		
                           A 14998    .LINE 5316
                           A 14999    
043C28 01000000            A 15000    	LD	BC,0
043C2C DD0FFD              A 15001    	LD	(IX+%FFFFFFFD),BC
043C2F DD0FF4              A 15002    	LD	(IX+%FFFFFFF4),BC
                           A 15003    ; 5317						while (si < 11) {
                           A 15004    .LINE 5317
                           A 15005    
043C32 18 2B               A 15006    	JR	L_661
043C34                     A 15007    L_662:
                           A 15008    ; 5318							wc = dj.dir[si+
                           A 15009    .LINE 5318
                           A 15010    
043C34 DD07F4              A 15011    	LD	BC,(IX+%FFFFFFF4)
043C37 DD27DF              A 15012    	LD	HL,(IX+%FFFFFFDF)
043C3A 09                  A 15013    	ADD	HL,BC
043C3B 4E                  A 15014    	LD	C,(HL)
043C3C 0600                A 15015    	LD	B,%0
043C3E C5E1                A 15016    	LD	HL,BC
043C40 DD75F2              A 15017    	LD	(IX+%FFFFFFF2),L
043C43 DD74F3              A 15018    	LD	(IX+%FFFFFFF3),H
043C46 DD07F4              A 15019    	LD	BC,(IX+%FFFFFFF4)
043C49 03                  A 15020    	INC	BC
043C4A DD0FF4              A 15021    	LD	(IX+%FFFFFFF4),BC
                           A 15022    ; 5319	#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	
                           A 15023    ; 5320							if (dbc_1st((BY
                           A 15024    ; 5321							wc = ff_oem2uni
                           A 15025    ; 5322							if (wc == 0) { 
                           A 15026    ; 5323							di += put_utf(w
                           A 15027    ; 5324	#else									
                           A 15028    ; 5325							label[di++] = (
                           A 15029    .LINE 5325
                           A 15030    
043C4D DD7EF2              A 15031    	LD	A,(IX+%FFFFFFF2)
043C50 DD07FD              A 15032    	LD	BC,(IX+%FFFFFFFD)
043C53 DD2709              A 15033    	LD	HL,(IX+%9)
043C56 09                  A 15034    	ADD	HL,BC
043C57 77                  A 15035    	LD	(HL),A
043C58 DD07FD              A 15036    	LD	BC,(IX+%FFFFFFFD)
043C5B 03                  A 15037    	INC	BC
043C5C DD0FFD              A 15038    	LD	(IX+%FFFFFFFD),BC
                           A 15039    ; 5326	#endif
                           A 15040    ; 5327						}
043C5F                     A 15041    L_661:
                           A 15042    .LINE 5327
                           A 15043    
043C5F 010B0000            A 15044    	LD	BC,11
043C63 DD27F4              A 15045    	LD	HL,(IX+%FFFFFFF4)
043C66 B7                  A 15046    	OR	A,A
043C67 ED42                A 15047    	SBC	HL,BC
043C69 38 C9               A 15048    	JR	C,L_662
                           A 15049    ; 5328						do {				
043C6B                     A 15050    L_664:
                           A 15051    .LINE 5328
                           A 15052    
                           A 15053    ; 5329							label[di] = 0;
                           A 15054    .LINE 5329
                           A 15055    
043C6B DD07FD              A 15056    	LD	BC,(IX+%FFFFFFFD)
043C6E DD2709              A 15057    	LD	HL,(IX+%9)
043C71 09                  A 15058    	ADD	HL,BC
043C72 3600                A 15059    	LD	(HL),%0
                           A 15060    ; 5330							if (di == 0) br
                           A 15061    .LINE 5330
                           A 15062    
043C74 DD27FD              A 15063    	LD	HL,(IX+%FFFFFFFD)
043C77 CD 07 46 04         A 15064    	CALL	__icmpzero
043C7B 28 1F               A 15065    	JR	Z,L_670
                           A 15066    ; 5331						} while (label[--di
                           A 15067    .LINE 5331
                           A 15068    
043C7D DD31FD              A 15069    	LD	IY,(IX+%FFFFFFFD)
043C80 ED33FF              A 15070    	LEA	IY,IY+%FFFFFFFF
043C83 DD3EFD              A 15071    	LD	(IX+%FFFFFFFD),IY
043C86 FDE5C1              A 15072    	LD	BC,IY
043C89 DD2709              A 15073    	LD	HL,(IX+%9)
043C8C 09                  A 15074    	ADD	HL,BC
043C8D 7E                  A 15075    	LD	A,(HL)
043C8E 47                  A 15076    	LD	B,A
043C8F 17ED62              A 15077    	SEXT	HL
043C92 68                  A 15078    	LD	L,B
043C93 01200000            A 15079    	LD	BC,32
043C97 B7                  A 15080    	OR	A,A
043C98 ED42                A 15081    	SBC	HL,BC
043C9A 28 CF               A 15082    	JR	Z,L_664
                           A 15083    ; 5332					}
                           A 15084    ; 5333				}
                           A 15085    ; 5334			}
043C9C                     A 15086    L_670:
                           A 15087    .LINE 5334
                           A 15088    
                           A 15089    ; 5335			if (res == FR_NO_FILE) {	/* 
                           A 15090    .LINE 5335
                           A 15091    
043C9C 01040000            A 15092    	LD	BC,4
043CA0 DD27FA              A 15093    	LD	HL,(IX+%FFFFFFFA)
043CA3 B7                  A 15094    	OR	A,A
043CA4 ED42                A 15095    	SBC	HL,BC
043CA6 20 0C               A 15096    	JR	NZ,L_679
                           A 15097    ; 5336				label[0] = 0;
                           A 15098    .LINE 5336
                           A 15099    
043CA8 DD2709              A 15100    	LD	HL,(IX+%9)
043CAB 3600                A 15101    	LD	(HL),%0
                           A 15102    ; 5337				res = FR_OK;
                           A 15103    .LINE 5337
                           A 15104    
043CAD 01000000            A 15105    	LD	BC,0
043CB1 DD0FFA              A 15106    	LD	(IX+%FFFFFFFA),BC
                           A 15107    ; 5338			}
                           A 15108    ; 5339		}
043CB4                     A 15109    L_679:
                           A 15110    .LINE 5339
                           A 15111    
                           A 15112    ; 5340	
                           A 15113    ; 5341		/* Get volume serial number */
                           A 15114    ; 5342		if (res == FR_OK && vsn) {
                           A 15115    .LINE 5342
                           A 15116    
043CB4 DD27FA              A 15117    	LD	HL,(IX+%FFFFFFFA)
043CB7 CD 07 46 04         A 15118    	CALL	__icmpzero
043CBB 20 79               A 15119    	JR	NZ,L_680
043CBD DD270C              A 15120    	LD	HL,(IX+%C)
043CC0 CD 07 46 04         A 15121    	CALL	__icmpzero
043CC4 28 70               A 15122    	JR	Z,L_680
                           A 15123    ; 5343			res = move_window(fs, fs->volba
                           A 15124    .LINE 5343
                           A 15125    
043CC6 DD31F7              A 15126    	LD	IY,(IX+%FFFFFFF7)
043CC9 FD071A              A 15127    	LD	BC,(IY+%1A)
043CCC FD7E1D              A 15128    	LD	A,(IY+%1D)
043CCF 2600                A 15129    	LD	H,%0
043CD1 6F                  A 15130    	LD	L,A
043CD2 E5                  A 15131    	PUSH	HL
043CD3 C5                  A 15132    	PUSH	BC
043CD4 DD07F7              A 15133    	LD	BC,(IX+%FFFFFFF7)
043CD7 C5                  A 15134    	PUSH	BC
043CD8 CD D7 10 04         A 15135    	CALL	_move_window
043CDC C1                  A 15136    	POP	BC
043CDD C1                  A 15137    	POP	BC
043CDE C1                  A 15138    	POP	BC
043CDF DD2FFA              A 15139    	LD	(IX+%FFFFFFFA),HL
                           A 15140    ; 5344			if (res == FR_OK) {
                           A 15141    .LINE 5344
                           A 15142    
043CE2 CD 07 46 04         A 15143    	CALL	__icmpzero
043CE6 20 4E               A 15144    	JR	NZ,L_680
                           A 15145    ; 5345				switch (fs->fs_type) {
                           A 15146    .LINE 5345
                           A 15147    
043CE8 DD31F7              A 15148    	LD	IY,(IX+%FFFFFFF7)
043CEB FD7E00              A 15149    	LD	A,(IY+%0)
043CEE B7ED62              A 15150    	UEXT	HL
043CF1 6F                  A 15151    	LD	L,A
043CF2 CD C0 46 04         A 15152    	CALL	__case8D
043CF6 E9                  A 15153    	JP	(HL)
043CF7                     A 15154    L__350:
043CF7 0200                A 15155    	DW	2
043CF9 03                  A 15156    	DB	3
043CFA 0D3D04              A 15157    	DW24	L_674	
                           A 15158    
043CFD 04                  A 15159    	DB	4
043CFE 043D04              A 15160    	DW24	L_673	
                           A 15161    
043D01 163D04              A 15162    	DW24	L_675	
                           A 15163    
                           A 15164    ; 5346				case FS_EXFAT:
043D04                     A 15165    L_673:
                           A 15166    .LINE 5346
                           A 15167    
                           A 15168    ; 5347					di = BPB_VolIDEx;
                           A 15169    .LINE 5347
                           A 15170    
043D04 01640000            A 15171    	LD	BC,100
043D08 DD0FFD              A 15172    	LD	(IX+%FFFFFFFD),BC
                           A 15173    ; 5348					break;
                           A 15174    .LINE 5348
                           A 15175    
043D0B 18 10               A 15176    	JR	L_676
                           A 15177    ; 5349	
                           A 15178    ; 5350				case FS_FAT32:
043D0D                     A 15179    L_674:
                           A 15180    .LINE 5350
                           A 15181    
                           A 15182    ; 5351					di = BS_VolID32;
                           A 15183    .LINE 5351
                           A 15184    
043D0D 01430000            A 15185    	LD	BC,67
043D11 DD0FFD              A 15186    	LD	(IX+%FFFFFFFD),BC
                           A 15187    ; 5352					break;
                           A 15188    .LINE 5352
                           A 15189    
043D14 18 07               A 15190    	JR	L_676
                           A 15191    ; 5353	
                           A 15192    ; 5354				default:
043D16                     A 15193    L_675:
                           A 15194    .LINE 5354
                           A 15195    
                           A 15196    ; 5355					di = BS_VolID;
                           A 15197    .LINE 5355
                           A 15198    
043D16 01270000            A 15199    	LD	BC,39
043D1A DD0FFD              A 15200    	LD	(IX+%FFFFFFFD),BC
                           A 15201    ; 5356				}
043D1D                     A 15202    L_676:
                           A 15203    .LINE 5356
                           A 15204    
                           A 15205    ; 5357				*vsn = ld_dword(fs->win + d
                           A 15206    .LINE 5357
                           A 15207    
043D1D DD07FD              A 15208    	LD	BC,(IX+%FFFFFFFD)
043D20 DD31F7              A 15209    	LD	IY,(IX+%FFFFFFF7)
043D23 ED232E              A 15210    	LEA	HL,IY+%2E
043D26 09                  A 15211    	ADD	HL,BC
043D27 E5                  A 15212    	PUSH	HL
043D28 CD B6 0E 04         A 15213    	CALL	_ld_dword
043D2C C1                  A 15214    	POP	BC
043D2D DD310C              A 15215    	LD	IY,(IX+%C)
043D30 FD2F00              A 15216    	LD	(IY),HL
043D33 FD7303              A 15217    	LD	(IY+%3),E
                           A 15218    ; 5358			}
                           A 15219    ; 5359		}
043D36                     A 15220    L_680:
                           A 15221    .LINE 5359
                           A 15222    
                           A 15223    ; 5360	
                           A 15224    ; 5361		LEAVE_FF(fs, res);
                           A 15225    .LINE 5361
                           A 15226    
043D36 DD27FA              A 15227    	LD	HL,(IX+%FFFFFFFA)
                           A 15228    ; 5362	}
                           A 15229    .LINE 5362
                           A 15230    
043D39 DDF9                A 15231    	LD	SP,IX
043D3B DDE1                A 15232    	POP	IX
043D3D C9                  A 15233    	RET	
                           A 15234    
                           A 15235    
                           A 15236    ;**************************** _f_getlabel *****
                           A 15237    ;Name                         Addr/Register   S
                           A 15238    ;dj                                   IX-60    
                           A 15239    ;wc                                   IX-14    
                           A 15240    ;si                                   IX-12    
                           A 15241    ;fs                                    IX-9    
                           A 15242    ;res                                   IX-6    
                           A 15243    ;di                                    IX-3    
                           A 15244    ;vsn                                  IX+12    
                           A 15245    ;label                                 IX+9    
                           A 15246    ;path                                  IX+6    
                           A 15247    
                           A 15248    
                           A 15249    ; Stack Frame Size: 78 (bytes)
                           A 15250    ;       Spill Code: -1 (instruction)
                           A 15251    
                           A 15252    
                           A 15253    .ENDFUNC "f_getlabel",5362,"_f_getlabel"
                           A 15254    ; 5363	
                           A 15255    ; 5364	
                           A 15256    ; 5365	
                           A 15257    ; 5366	#if !FF_FS_READONLY
                           A 15258    ; 5367	/*-------------------------------------
                           A 15259    ; 5368	/* Set Volume Label                    
                           A 15260    ; 5369	/*-------------------------------------
                           A 15261    ; 5370	
                           A 15262    ; 5371	FRESULT f_setlabel (
                           A 15263    ; 5372		const TCHAR* label	/* Volume label
                           A 15264    ; 5373	)
                           A 15265    ; 5374	{
                           A 15266    ; 5375		FRESULT res;
                           A 15267    ; 5376		DIR dj;
                           A 15268    ; 5377		FATFS *fs;
                           A 15269    ; 5378		BYTE dirvn[22];
                           A 15270    ; 5379		UINT di;
                           A 15271    ; 5380		WCHAR wc;
                           A 15272    ; 5381		static const char badchr[18] = "+.,
                           A 15273    ; 5382	#if FF_USE_LFN
                           A 15274    ; 5383		DWORD dc;
                           A 15275    ; 5384	#endif
                           A 15276    ; 5385	
                           A 15277    ; 5386		/* Get logical drive */
                           A 15278    ; 5387		res = mount_volume(&label, &fs, FA_
                           A 15279    ; 5388		if (res != FR_OK) LEAVE_FF(fs, res)
                           A 15280    ; 5389	
                           A 15281    ; 5390	#if FF_FS_EXFAT
                           A 15282    ; 5391		if (fs->fs_type == FS_EXFAT) {	/* 
                           A 15283    ; 5392			memset(dirvn, 0, 22);
                           A 15284    ; 5393			di = 0;
                           A 15285    ; 5394			while ((UINT)*label >= ' ') {	
                           A 15286    ; 5395				dc = tchar2uni(&label);	/* 
                           A 15287    ; 5396				if (dc >= 0x10000) {
                           A 15288    ; 5397					if (dc == 0xFFFFFFFF ||
                           A 15289    ; 5398						dc = 0;
                           A 15290    ; 5399					} else {
                           A 15291    ; 5400						st_word(dirvn + di 
                           A 15292    ; 5401					}
                           A 15293    ; 5402				}
                           A 15294    ; 5403				if (dc == 0 || strchr(&badc
                           A 15295    ; 5404					LEAVE_FF(fs, FR_INVALID
                           A 15296    ; 5405				}
                           A 15297    ; 5406				st_word(dirvn + di * 2, (WC
                           A 15298    ; 5407			}
                           A 15299    ; 5408		} else
                           A 15300    ; 5409	#endif
                           A 15301    ; 5410		{	/* On the FAT/FAT32 volume */
                           A 15302    ; 5411			memset(dirvn, ' ', 11);
                           A 15303    ; 5412			di = 0;
                           A 15304    ; 5413			while ((UINT)*label >= ' ') {	
                           A 15305    ; 5414	#if FF_USE_LFN
                           A 15306    ; 5415				dc = tchar2uni(&label);
                           A 15307    ; 5416				wc = (dc < 0x10000) ? ff_un
                           A 15308    ; 5417	#else									
                           A 15309    ; 5418				wc = (BYTE)*label++;
                           A 15310    ; 5419				if (dbc_1st((BYTE)wc)) wc =
                           A 15311    ; 5420				if (IsLower(wc)) wc -= 0x20
                           A 15312    ; 5421	#if FF_CODE_PAGE == 0
                           A 15313    ; 5422				if (ExCvt && wc >= 0x80) wc
                           A 15314    ; 5423	#elif FF_CODE_PAGE < 900
                           A 15315    ; 5424				if (wc >= 0x80) wc = ExCvt[
                           A 15316    ; 5425	#endif
                           A 15317    ; 5426	#endif
                           A 15318    ; 5427				if (wc == 0 || strchr(&badc
                           A 15319    ; 5428					LEAVE_FF(fs, FR_INVALID
                           A 15320    ; 5429				}
                           A 15321    ; 5430				if (wc >= 0x100) dirvn[di++
                           A 15322    ; 5431				dirvn[di++] = (BYTE)wc;
                           A 15323    ; 5432			}
                           A 15324    ; 5433			if (dirvn[0] == DDEM) LEAVE_FF(
                           A 15325    ; 5434			while (di && dirvn[di - 1] == '
                           A 15326    ; 5435		}
                           A 15327    ; 5436	
                           A 15328    ; 5437		/* Set volume label */
                           A 15329    ; 5438		dj.obj.fs = fs; dj.obj.sclust = 0;	
                           A 15330    ; 5439		res = dir_sdi(&dj, 0);
                           A 15331    ; 5440		if (res == FR_OK) {
                           A 15332    ; 5441			res = DIR_READ_LABEL(&dj);	/* 
                           A 15333    ; 5442			if (res == FR_OK) {
                           A 15334    ; 5443				if (FF_FS_EXFAT && fs->fs_t
                           A 15335    ; 5444					dj.dir[XDIR_NumLabel] =
                           A 15336    ; 5445					memcpy(dj.dir + XDIR_La
                           A 15337    ; 5446				} else {
                           A 15338    ; 5447					if (di != 0) {
                           A 15339    ; 5448						memcpy(dj.dir, dirv
                           A 15340    ; 5449					} else {
                           A 15341    ; 5450						dj.dir[DIR_Name] = 
                           A 15342    ; 5451					}
                           A 15343    ; 5452				}
                           A 15344    ; 5453				fs->wflag = 1;
                           A 15345    ; 5454				res = sync_fs(fs);
                           A 15346    ; 5455			} else {			/* No volum
                           A 15347    ; 5456				if (res == FR_NO_FILE) {
                           A 15348    ; 5457					res = FR_OK;
                           A 15349    ; 5458					if (di != 0) {	/* Crea
                           A 15350    ; 5459						res = dir_alloc(&dj
                           A 15351    ; 5460						if (res == FR_OK) {
                           A 15352    ; 5461							memset(dj.dir, 
                           A 15353    ; 5462							if (FF_FS_EXFAT
                           A 15354    ; 5463								dj.dir[XDIR
                           A 15355    ; 5464								dj.dir[XDIR
                           A 15356    ; 5465								memcpy(dj.d
                           A 15357    ; 5466							} else {
                           A 15358    ; 5467								dj.dir[DIR_
                           A 15359    ; 5468								memcpy(dj.d
                           A 15360    ; 5469							}
                           A 15361    ; 5470							fs->wflag = 1;
                           A 15362    ; 5471							res = sync_fs(f
                           A 15363    ; 5472						}
                           A 15364    ; 5473					}
                           A 15365    ; 5474				}
                           A 15366    ; 5475			}
                           A 15367    ; 5476		}
                           A 15368    ; 5477	
                           A 15369    ; 5478		LEAVE_FF(fs, res);
                           A 15370    ; 5479	}
                           A 15371    ; 5480	
                           A 15372    ; 5481	#endif /* !FF_FS_READONLY */
                           A 15373    ; 5482	#endif /* FF_USE_LABEL */
                           A 15374    ; 5483	
                           A 15375    ; 5484	
                           A 15376    ; 5485	
                           A 15377    ; 5486	#if FF_USE_EXPAND && !FF_FS_READONLY
                           A 15378    ; 5487	/*-------------------------------------
                           A 15379    ; 5488	/* Allocate a Contiguous Blocks to the 
                           A 15380    ; 5489	/*-------------------------------------
                           A 15381    ; 5490	
                           A 15382    ; 5491	FRESULT f_expand (
                           A 15383    ; 5492		FIL* fp,		/* Pointer to the f
                           A 15384    ; 5493		FSIZE_t fsz,	/* File size to be 
                           A 15385    ; 5494		BYTE opt		/* Operation mode 0
                           A 15386    ; 5495	)
                           A 15387    ; 5496	{
                           A 15388    ; 5497		FRESULT res;
                           A 15389    ; 5498		FATFS *fs;
                           A 15390    ; 5499		DWORD n, clst, stcl, scl, ncl, tcl,
                           A 15391    ; 5500	
                           A 15392    ; 5501	
                           A 15393    ; 5502		res = validate(&fp->obj, &fs);		
                           A 15394    ; 5503		if (res != FR_OK || (res = (FRESULT
                           A 15395    ; 5504		if (fsz == 0 || fp->obj.objsize != 
                           A 15396    ; 5505	#if FF_FS_EXFAT
                           A 15397    ; 5506		if (fs->fs_type != FS_EXFAT && fsz 
                           A 15398    ; 5507	#endif
                           A 15399    ; 5508		n = (DWORD)fs->csize * SS(fs);	/* 
                           A 15400    ; 5509		tcl = (DWORD)(fsz / n) + ((fsz & (n
                           A 15401    ; 5510		stcl = fs->last_clst; lclst = 0;
                           A 15402    ; 5511		if (stcl < 2 || stcl >= fs->n_faten
                           A 15403    ; 5512	
                           A 15404    ; 5513	#if FF_FS_EXFAT
                           A 15405    ; 5514		if (fs->fs_type == FS_EXFAT) {
                           A 15406    ; 5515			scl = find_bitmap(fs, stcl, tcl
                           A 15407    ; 5516			if (scl == 0) res = FR_DENIED;	
                           A 15408    ; 5517			if (scl == 0xFFFFFFFF) res = FR
                           A 15409    ; 5518			if (res == FR_OK) {	/* A contig
                           A 15410    ; 5519				if (opt) {		/* Allocate
                           A 15411    ; 5520					res = change_bitmap(fs,
                           A 15412    ; 5521					lclst = scl + tcl - 1;
                           A 15413    ; 5522				} else {		/* Set it a
                           A 15414    ; 5523					lclst = scl - 1;
                           A 15415    ; 5524				}
                           A 15416    ; 5525			}
                           A 15417    ; 5526		} else
                           A 15418    ; 5527	#endif
                           A 15419    ; 5528		{
                           A 15420    ; 5529			scl = clst = stcl; ncl = 0;
                           A 15421    ; 5530			for (;;) {	/* Find a contiguou
                           A 15422    ; 5531				n = get_fat(&fp->obj, clst)
                           A 15423    ; 5532				if (++clst >= fs->n_fatent)
                           A 15424    ; 5533				if (n == 1) { res = FR_INT_
                           A 15425    ; 5534				if (n == 0xFFFFFFFF) { res 
                           A 15426    ; 5535				if (n == 0) {	/* Is it a 
                           A 15427    ; 5536					if (++ncl == tcl) break
                           A 15428    ; 5537				} else {
                           A 15429    ; 5538					scl = clst; ncl = 0;	
                           A 15430    ; 5539				}
                           A 15431    ; 5540				if (clst == stcl) { res = F
                           A 15432    ; 5541			}
                           A 15433    ; 5542			if (res == FR_OK) {	/* A contig
                           A 15434    ; 5543				if (opt) {		/* Allocate
                           A 15435    ; 5544					for (clst = scl, n = tc
                           A 15436    ; 5545						res = put_fat(fs, c
                           A 15437    ; 5546						if (res != FR_OK) b
                           A 15438    ; 5547						lclst = clst;
                           A 15439    ; 5548					}
                           A 15440    ; 5549				} else {		/* Set it a
                           A 15441    ; 5550					lclst = scl - 1;
                           A 15442    ; 5551				}
                           A 15443    ; 5552			}
                           A 15444    ; 5553		}
                           A 15445    ; 5554	
                           A 15446    ; 5555		if (res == FR_OK) {
                           A 15447    ; 5556			fs->last_clst = lclst;		/* 
                           A 15448    ; 5557			if (opt) {	/* Is it allocated 
                           A 15449    ; 5558				fp->obj.sclust = scl;		
                           A 15450    ; 5559				fp->obj.objsize = fsz;
                           A 15451    ; 5560				if (FF_FS_EXFAT) fp->obj.st
                           A 15452    ; 5561				fp->flag |= FA_MODIFIED;
                           A 15453    ; 5562				if (fs->free_clst <= fs->n_
                           A 15454    ; 5563					fs->free_clst -= tcl;
                           A 15455    ; 5564					fs->fsi_flag |= 1;
                           A 15456    ; 5565				}
                           A 15457    ; 5566			}
                           A 15458    ; 5567		}
                           A 15459    ; 5568	
                           A 15460    ; 5569		LEAVE_FF(fs, res);
                           A 15461    ; 5570	}
                           A 15462    ; 5571	
                           A 15463    ; 5572	#endif /* FF_USE_EXPAND && !FF_FS_READO
                           A 15464    ; 5573	
                           A 15465    ; 5574	
                           A 15466    ; 5575	
                           A 15467    ; 5576	#if FF_USE_FORWARD
                           A 15468    ; 5577	/*-------------------------------------
                           A 15469    ; 5578	/* Forward Data to the Stream Directly 
                           A 15470    ; 5579	/*-------------------------------------
                           A 15471    ; 5580	
                           A 15472    ; 5581	FRESULT f_forward (
                           A 15473    ; 5582		FIL* fp, 						/* 
                           A 15474    ; 5583		UINT (*func)(const BYTE*,UINT),	/* 
                           A 15475    ; 5584		UINT btf,						/* 
                           A 15476    ; 5585		UINT* bf						/* 
                           A 15477    ; 5586	)
                           A 15478    ; 5587	{
                           A 15479    ; 5588		FRESULT res;
                           A 15480    ; 5589		FATFS *fs;
                           A 15481    ; 5590		DWORD clst;
                           A 15482    ; 5591		LBA_t sect;
                           A 15483    ; 5592		FSIZE_t remain;
                           A 15484    ; 5593		UINT rcnt, csect;
                           A 15485    ; 5594		BYTE *dbuf;
                           A 15486    ; 5595	
                           A 15487    ; 5596	
                           A 15488    ; 5597		*bf = 0;	/* Clear transfer byte 
                           A 15489    ; 5598		res = validate(&fp->obj, &fs);		
                           A 15490    ; 5599		if (res != FR_OK || (res = (FRESULT
                           A 15491    ; 5600		if (!(fp->flag & FA_READ)) LEAVE_FF
                           A 15492    ; 5601	
                           A 15493    ; 5602		remain = fp->obj.objsize - fp->fptr
                           A 15494    ; 5603		if (btf > remain) btf = (UINT)remai
                           A 15495    ; 5604	
                           A 15496    ; 5605		for ( ; btf > 0 && (*func)(0, 0); f
                           A 15497    ; 5606			csect = (UINT)(fp->fptr / SS(fs
                           A 15498    ; 5607			if (fp->fptr % SS(fs) == 0) {	
                           A 15499    ; 5608				if (csect == 0) {			
                           A 15500    ; 5609					clst = (fp->fptr == 0) 
                           A 15501    ; 5610						fp->obj.sclust : ge
                           A 15502    ; 5611					if (clst <= 1) ABORT(fs
                           A 15503    ; 5612					if (clst == 0xFFFFFFFF)
                           A 15504    ; 5613					fp->clust = clst;		
                           A 15505    ; 5614				}
                           A 15506    ; 5615			}
                           A 15507    ; 5616			sect = clst2sect(fs, fp->clust)
                           A 15508    ; 5617			if (sect == 0) ABORT(fs, FR_INT
                           A 15509    ; 5618			sect += csect;
                           A 15510    ; 5619	#if FF_FS_TINY
                           A 15511    ; 5620			if (move_window(fs, sect) != FR
                           A 15512    ; 5621			dbuf = fs->win;
                           A 15513    ; 5622	#else
                           A 15514    ; 5623			if (fp->sect != sect) {		/* 
                           A 15515    ; 5624	#if !FF_FS_READONLY
                           A 15516    ; 5625				if (fp->flag & FA_DIRTY) {	
                           A 15517    ; 5626					if (disk_write(fs->pdrv
                           A 15518    ; 5627					fp->flag &= (BYTE)~FA_D
                           A 15519    ; 5628				}
                           A 15520    ; 5629	#endif
                           A 15521    ; 5630				if (disk_read(fs->pdrv, fp-
                           A 15522    ; 5631			}
                           A 15523    ; 5632			dbuf = fp->buf;
                           A 15524    ; 5633	#endif
                           A 15525    ; 5634			fp->sect = sect;
                           A 15526    ; 5635			rcnt = SS(fs) - (UINT)fp->fptr 
                           A 15527    ; 5636			if (rcnt > btf) rcnt = btf;		
                           A 15528    ; 5637			rcnt = (*func)(dbuf + ((UINT)fp
                           A 15529    ; 5638			if (rcnt == 0) ABORT(fs, FR_INT
                           A 15530    ; 5639		}
                           A 15531    ; 5640	
                           A 15532    ; 5641		LEAVE_FF(fs, FR_OK);
                           A 15533    ; 5642	}
                           A 15534    ; 5643	#endif /* FF_USE_FORWARD */
                           A 15535    ; 5644	
                           A 15536    ; 5645	
                           A 15537    ; 5646	
                           A 15538    ; 5647	#if !FF_FS_READONLY && FF_USE_MKFS
                           A 15539    ; 5648	/*-------------------------------------
                           A 15540    ; 5649	/* Create FAT/exFAT volume (with sub-fu
                           A 15541    ; 5650	/*-------------------------------------
                           A 15542    ; 5651	
                           A 15543    ; 5652	#define N_SEC_TRACK 63			/* Sect
                           A 15544    ; 5653	#define	GPT_ALIGN	0x100000	/* Alig
                           A 15545    ; 5654	#define GPT_ITEMS	128			/* Numb
                           A 15546    ; 5655	
                           A 15547    ; 5656	
                           A 15548    ; 5657	/* Create partitions on the physical dr
                           A 15549    ; 5658	
                           A 15550    ; 5659	static FRESULT create_partition (
                           A 15551    ; 5660		BYTE drv,			/* Physical dri
                           A 15552    ; 5661		const LBA_t plst[],	/* Partition li
                           A 15553    ; 5662		BYTE sys,			/* System ID (f
                           A 15554    ; 5663		BYTE* buf			/* Working buff
                           A 15555    ; 5664	)
                           A 15556    ; 5665	{
                           A 15557    ; 5666		UINT i, cy;
                           A 15558    ; 5667		LBA_t sz_drv;
                           A 15559    ; 5668		DWORD sz_drv32, nxt_alloc32, sz_par
                           A 15560    ; 5669		BYTE *pte;
                           A 15561    ; 5670		BYTE hd, n_hd, sc, n_sc;
                           A 15562    ; 5671	
                           A 15563    ; 5672		/* Get physical drive size */
                           A 15564    ; 5673		if (disk_ioctl(drv, GET_SECTOR_COUN
                           A 15565    ; 5674	
                           A 15566    ; 5675	#if FF_LBA64
                           A 15567    ; 5676		if (sz_drv >= FF_MIN_GPT) {	/* Crea
                           A 15568    ; 5677			WORD ss;
                           A 15569    ; 5678			UINT sz_ptbl, pi, si, ofs;
                           A 15570    ; 5679			DWORD bcc, rnd, align;
                           A 15571    ; 5680			QWORD nxt_alloc, sz_part, sz_po
                           A 15572    ; 5681			static const BYTE gpt_mbr[16] =
                           A 15573    ; 5682	
                           A 15574    ; 5683	#if FF_MAX_SS != FF_MIN_SS
                           A 15575    ; 5684			if (disk_ioctl(drv, GET_SECTOR_
                           A 15576    ; 5685			if (ss > FF_MAX_SS || ss < FF_M
                           A 15577    ; 5686	#else
                           A 15578    ; 5687			ss = FF_MAX_SS;
                           A 15579    ; 5688	#endif
                           A 15580    ; 5689			rnd = (DWORD)sz_drv + GET_FATTI
                           A 15581    ; 5690			align = GPT_ALIGN / ss;			
                           A 15582    ; 5691			sz_ptbl = GPT_ITEMS * SZ_GPTE /
                           A 15583    ; 5692			top_bpt = sz_drv - sz_ptbl - 1;
                           A 15584    ; 5693			nxt_alloc = 2 + sz_ptbl;		
                           A 15585    ; 5694			sz_pool = top_bpt - nxt_alloc;	
                           A 15586    ; 5695			bcc = 0xFFFFFFFF; sz_part = 1;
                           A 15587    ; 5696			pi = si = 0;	/* partition ta
                           A 15588    ; 5697			do {
                           A 15589    ; 5698				if (pi * SZ_GPTE % ss == 0)
                           A 15590    ; 5699				if (sz_part != 0) {			
                           A 15591    ; 5700					nxt_alloc = (nxt_alloc 
                           A 15592    ; 5701					sz_part = plst[si++];	
                           A 15593    ; 5702					if (sz_part <= 100) {	
                           A 15594    ; 5703						sz_part = sz_pool *
                           A 15595    ; 5704						sz_part = (sz_part 
                           A 15596    ; 5705					}
                           A 15597    ; 5706					if (nxt_alloc + sz_part
                           A 15598    ; 5707						sz_part = (nxt_allo
                           A 15599    ; 5708					}
                           A 15600    ; 5709				}
                           A 15601    ; 5710				if (sz_part != 0) {			
                           A 15602    ; 5711					ofs = pi * SZ_GPTE % ss
                           A 15603    ; 5712					memcpy(buf + ofs + GPTE
                           A 15604    ; 5713					rnd = make_rand(rnd, bu
                           A 15605    ; 5714					st_qword(buf + ofs + GP
                           A 15606    ; 5715					st_qword(buf + ofs + GP
                           A 15607    ; 5716					nxt_alloc += sz_part;	
                           A 15608    ; 5717				}
                           A 15609    ; 5718				if ((pi + 1) * SZ_GPTE % ss
                           A 15610    ; 5719					for (i = 0; i < ss; bcc
                           A 15611    ; 5720					if (disk_write(drv, buf
                           A 15612    ; 5721					if (disk_write(drv, buf
                           A 15613    ; 5722				}
                           A 15614    ; 5723			} while (++pi < GPT_ITEMS);
                           A 15615    ; 5724	
                           A 15616    ; 5725			/* Create primary GPT header */
                           A 15617    ; 5726			memset(buf, 0, ss);
                           A 15618    ; 5727			memcpy(buf + GPTH_Sign, "EFI PA
                           A 15619    ; 5728			st_dword(buf + GPTH_PtBcc, ~bcc
                           A 15620    ; 5729			st_qword(buf + GPTH_CurLba, 1);
                           A 15621    ; 5730			st_qword(buf + GPTH_BakLba, sz_
                           A 15622    ; 5731			st_qword(buf + GPTH_FstLba, 2 +
                           A 15623    ; 5732			st_qword(buf + GPTH_LstLba, top
                           A 15624    ; 5733			st_dword(buf + GPTH_PteSize, SZ
                           A 15625    ; 5734			st_dword(buf + GPTH_PtNum, GPT_
                           A 15626    ; 5735			st_dword(buf + GPTH_PtOfs, 2);	
                           A 15627    ; 5736			rnd = make_rand(rnd, buf + GPTH
                           A 15628    ; 5737			for (i = 0, bcc= 0xFFFFFFFF; i 
                           A 15629    ; 5738			st_dword(buf + GPTH_Bcc, ~bcc);
                           A 15630    ; 5739			if (disk_write(drv, buf, 1, 1) 
                           A 15631    ; 5740	
                           A 15632    ; 5741			/* Create secondary GPT header 
                           A 15633    ; 5742			st_qword(buf + GPTH_CurLba, sz_
                           A 15634    ; 5743			st_qword(buf + GPTH_BakLba, 1);
                           A 15635    ; 5744			st_qword(buf + GPTH_PtOfs, top_
                           A 15636    ; 5745			st_dword(buf + GPTH_Bcc, 0);
                           A 15637    ; 5746			for (i = 0, bcc= 0xFFFFFFFF; i 
                           A 15638    ; 5747			st_dword(buf + GPTH_Bcc, ~bcc);
                           A 15639    ; 5748			if (disk_write(drv, buf, sz_drv
                           A 15640    ; 5749	
                           A 15641    ; 5750			/* Create protective MBR */
                           A 15642    ; 5751			memset(buf, 0, ss);
                           A 15643    ; 5752			memcpy(buf + MBR_Table, gpt_mbr
                           A 15644    ; 5753			st_word(buf + BS_55AA, 0xAA55);
                           A 15645    ; 5754			if (disk_write(drv, buf, 0, 1) 
                           A 15646    ; 5755	
                           A 15647    ; 5756		} else
                           A 15648    ; 5757	#endif
                           A 15649    ; 5758		{	/* Create partitions in MBR for
                           A 15650    ; 5759			sz_drv32 = (DWORD)sz_drv;
                           A 15651    ; 5760			n_sc = N_SEC_TRACK;				
                           A 15652    ; 5761			for (n_hd = 8; n_hd != 0 && sz_
                           A 15653    ; 5762			if (n_hd == 0) n_hd = 255;		
                           A 15654    ; 5763	
                           A 15655    ; 5764			memset(buf, 0, FF_MAX_SS);		
                           A 15656    ; 5765			pte = buf + MBR_Table;	/* Part
                           A 15657    ; 5766			for (i = 0, nxt_alloc32 = n_sc;
                           A 15658    ; 5767				sz_part32 = (DWORD)plst[i];
                           A 15659    ; 5768				if (sz_part32 <= 100) sz_pa
                           A 15660    ; 5769				if (nxt_alloc32 + sz_part32
                           A 15661    ; 5770				if (sz_part32 == 0) break;	
                           A 15662    ; 5771	
                           A 15663    ; 5772				st_dword(pte + PTE_StLba, n
                           A 15664    ; 5773				st_dword(pte + PTE_SizLba, 
                           A 15665    ; 5774				pte[PTE_System] = sys;		
                           A 15666    ; 5775	
                           A 15667    ; 5776				cy = (UINT)(nxt_alloc32 / n
                           A 15668    ; 5777				hd = (BYTE)(nxt_alloc32 / n
                           A 15669    ; 5778				sc = (BYTE)(nxt_alloc32 % n
                           A 15670    ; 5779				pte[PTE_StHead] = hd;
                           A 15671    ; 5780				pte[PTE_StSec] = (BYTE)((cy
                           A 15672    ; 5781				pte[PTE_StCyl] = (BYTE)cy;
                           A 15673    ; 5782	
                           A 15674    ; 5783				cy = (UINT)((nxt_alloc32 + 
                           A 15675    ; 5784				hd = (BYTE)((nxt_alloc32 + 
                           A 15676    ; 5785				sc = (BYTE)((nxt_alloc32 + 
                           A 15677    ; 5786				pte[PTE_EdHead] = hd;
                           A 15678    ; 5787				pte[PTE_EdSec] = (BYTE)((cy
                           A 15679    ; 5788				pte[PTE_EdCyl] = (BYTE)cy;
                           A 15680    ; 5789	
                           A 15681    ; 5790				pte += SZ_PTE;		/* Next
                           A 15682    ; 5791			}
                           A 15683    ; 5792	
                           A 15684    ; 5793			st_word(buf + BS_55AA, 0xAA55);
                           A 15685    ; 5794			if (disk_write(drv, buf, 0, 1) 
                           A 15686    ; 5795		}
                           A 15687    ; 5796	
                           A 15688    ; 5797		return FR_OK;
                           A 15689    ; 5798	}
                           A 15690    ; 5799	
                           A 15691    ; 5800	
                           A 15692    ; 5801	
                           A 15693    ; 5802	FRESULT f_mkfs (
                           A 15694    ; 5803		const TCHAR* path,		/* Logical 
                           A 15695    ; 5804		const MKFS_PARM* opt,	/* Format o
                           A 15696    ; 5805		void* work,				/* Pointer 
                           A 15697    ; 5806		UINT len				/* Size of 
                           A 15698    ; 5807	)
                           A 15699    ; 5808	{
                           A 15700    ; 5809		static const WORD cst[] = {1, 4, 16
                           A 15701    ; 5810		static const WORD cst32[] = {1, 2, 
                           A 15702    ; 5811		static const MKFS_PARM defopt = {FM
                           A 15703    ; 5812		BYTE fsopt, fsty, sys, *buf, *pte, 
                           A 15704    ; 5813		WORD ss;	/* Sector size */
                           A 15705    ; 5814		DWORD sz_buf, sz_blk, n_clst, pau, 
                           A 15706    ; 5815		LBA_t sz_vol, b_vol, b_fat, b_data;
                           A 15707    ; 5816		LBA_t sect, lba[2];
                           A 15708    ; 5817		DWORD sz_rsv, sz_fat, sz_dir, sz_au
                           A 15709    ; 5818		UINT n_fat, n_root, i;				
                           A 15710    ; 5819		int vol;
                           A 15711    ; 5820		DSTATUS ds;
                           A 15712    ; 5821		FRESULT fr;
                           A 15713    ; 5822	
                           A 15714    ; 5823	
                           A 15715    ; 5824		/* Check mounted drive and clear wo
                           A 15716    ; 5825		vol = get_ldnumber(&path);			
                           A 15717    ; 5826		if (vol < 0) return FR_INVALID_DRIV
                           A 15718    ; 5827		if (FatFs[vol]) FatFs[vol]->fs_type
                           A 15719    ; 5828		pdrv = LD2PD(vol);			/* Phys
                           A 15720    ; 5829		ipart = LD2PT(vol);			/* Part
                           A 15721    ; 5830		if (!opt) opt = &defopt;	/* Use 
                           A 15722    ; 5831	
                           A 15723    ; 5832		/* Get physical drive status (sz_dr
                           A 15724    ; 5833		ds = disk_initialize(pdrv);
                           A 15725    ; 5834		if (ds & STA_NOINIT) return FR_NOT_
                           A 15726    ; 5835		if (ds & STA_PROTECT) return FR_WRI
                           A 15727    ; 5836		sz_blk = opt->align;
                           A 15728    ; 5837		if (sz_blk == 0 && disk_ioctl(pdrv,
                           A 15729    ; 5838	 	if (sz_blk == 0 || sz_blk > 0x8000 
                           A 15730    ; 5839	#if FF_MAX_SS != FF_MIN_SS
                           A 15731    ; 5840		if (disk_ioctl(pdrv, GET_SECTOR_SIZ
                           A 15732    ; 5841		if (ss > FF_MAX_SS || ss < FF_MIN_S
                           A 15733    ; 5842	#else
                           A 15734    ; 5843		ss = FF_MAX_SS;
                           A 15735    ; 5844	#endif
                           A 15736    ; 5845		/* Options for FAT sub-type and FAT
                           A 15737    ; 5846		fsopt = opt->fmt & (FM_ANY | FM_SFD
                           A 15738    ; 5847		n_fat = (opt->n_fat >= 1 && opt->n_
                           A 15739    ; 5848		n_root = (opt->n_root >= 1 && opt->
                           A 15740    ; 5849		sz_au = (opt->au_size <= 0x1000000 
                           A 15741    ; 5850		sz_au /= ss;	/* Byte --> Sector 
                           A 15742    ; 5851	
                           A 15743    ; 5852		/* Get working buffer */
                           A 15744    ; 5853		sz_buf = len / ss;		/* Size of 
                           A 15745    ; 5854		if (sz_buf == 0) return FR_NOT_ENOU
                           A 15746    ; 5855		buf = (BYTE*)work;		/* Working 
                           A 15747    ; 5856	#if FF_USE_LFN == 3
                           A 15748    ; 5857		if (!buf) buf = ff_memalloc(sz_buf 
                           A 15749    ; 5858	#endif
                           A 15750    ; 5859		if (!buf) return FR_NOT_ENOUGH_CORE
                           A 15751    ; 5860	
                           A 15752    ; 5861		/* Determine where the volume to be
                           A 15753    ; 5862		b_vol = sz_vol = 0;
                           A 15754    ; 5863		if (FF_MULTI_PARTITION && ipart != 
                           A 15755    ; 5864			/* Get partition location from 
                           A 15756    ; 5865			if (disk_read(pdrv, buf, 0, 1) 
                           A 15757    ; 5866			if (ld_word(buf + BS_55AA) != 0
                           A 15758    ; 5867	#if FF_LBA64
                           A 15759    ; 5868			if (buf[MBR_Table + PTE_System]
                           A 15760    ; 5869				DWORD n_ent, ofs;
                           A 15761    ; 5870				QWORD pt_lba;
                           A 15762    ; 5871	
                           A 15763    ; 5872				/* Get the partition locati
                           A 15764    ; 5873				if (disk_read(pdrv, buf, 1,
                           A 15765    ; 5874				if (!test_gpt_header(buf)) 
                           A 15766    ; 5875				n_ent = ld_dword(buf + GPTH
                           A 15767    ; 5876				pt_lba = ld_qword(buf + GPT
                           A 15768    ; 5877				ofs = i = 0;
                           A 15769    ; 5878				while (n_ent) {		/* Find
                           A 15770    ; 5879					if (ofs == 0 && disk_re
                           A 15771    ; 5880					if (!memcmp(buf + ofs +
                           A 15772    ; 5881						b_vol = ld_qword(bu
                           A 15773    ; 5882						sz_vol = ld_qword(b
                           A 15774    ; 5883						break;
                           A 15775    ; 5884					}
                           A 15776    ; 5885					n_ent--; ofs = (ofs + S
                           A 15777    ; 5886				}
                           A 15778    ; 5887				if (n_ent == 0) LEAVE_MKFS(
                           A 15779    ; 5888				fsopt |= 0x80;	/* Partitio
                           A 15780    ; 5889			} else
                           A 15781    ; 5890	#endif
                           A 15782    ; 5891			{	/* Get the partition locati
                           A 15783    ; 5892				pte = buf + (MBR_Table + (i
                           A 15784    ; 5893				if (ipart > 4 || pte[PTE_Sy
                           A 15785    ; 5894				b_vol = ld_dword(pte + PTE_
                           A 15786    ; 5895				sz_vol = ld_dword(pte + PTE
                           A 15787    ; 5896			}
                           A 15788    ; 5897		} else {	/* The volume is associ
                           A 15789    ; 5898			if (disk_ioctl(pdrv, GET_SECTOR
                           A 15790    ; 5899			if (!(fsopt & FM_SFD)) {	/* 
                           A 15791    ; 5900				/* Create a single-partitio
                           A 15792    ; 5901	#if FF_LBA64
                           A 15793    ; 5902				if (sz_vol >= FF_MIN_GPT) {
                           A 15794    ; 5903					fsopt |= 0x80;		/* 
                           A 15795    ; 5904					b_vol = GPT_ALIGN / ss;
                           A 15796    ; 5905				} else
                           A 15797    ; 5906	#endif
                           A 15798    ; 5907				{	/* Partitioning is in M
                           A 15799    ; 5908					if (sz_vol > N_SEC_TRAC
                           A 15800    ; 5909						b_vol = N_SEC_TRACK
                           A 15801    ; 5910					}
                           A 15802    ; 5911				}
                           A 15803    ; 5912			}
                           A 15804    ; 5913		}
                           A 15805    ; 5914		if (sz_vol < 128) LEAVE_MKFS(FR_MKF
                           A 15806    ; 5915	
                           A 15807    ; 5916		/* Now start to create an FAT volum
                           A 15808    ; 5917	
                           A 15809    ; 5918		do {	/* Pre-determine the FAT ty
                           A 15810    ; 5919			if (FF_FS_EXFAT && (fsopt & FM_
                           A 15811    ; 5920				if ((fsopt & FM_ANY) == FM_
                           A 15812    ; 5921					fsty = FS_EXFAT; break;
                           A 15813    ; 5922				}
                           A 15814    ; 5923			}
                           A 15815    ; 5924	#if FF_LBA64
                           A 15816    ; 5925			if (sz_vol >= 0x100000000) LEAV
                           A 15817    ; 5926	#endif
                           A 15818    ; 5927			if (sz_au > 128) sz_au = 128;	
                           A 15819    ; 5928			if (fsopt & FM_FAT32) {	/* FAT3
                           A 15820    ; 5929				if (!(fsopt & FM_FAT)) {	
                           A 15821    ; 5930					fsty = FS_FAT32; break;
                           A 15822    ; 5931				}
                           A 15823    ; 5932			}
                           A 15824    ; 5933			if (!(fsopt & FM_FAT)) LEAVE_MK
                           A 15825    ; 5934			fsty = FS_FAT16;
                           A 15826    ; 5935		} while (0);
                           A 15827    ; 5936	
                           A 15828    ; 5937		vsn = (DWORD)sz_vol + GET_FATTIME()
                           A 15829    ; 5938	
                           A 15830    ; 5939	#if FF_FS_EXFAT
                           A 15831    ; 5940		if (fsty == FS_EXFAT) {	/* Create a
                           A 15832    ; 5941			DWORD szb_bit, szb_case, sum, n
                           A 15833    ; 5942			WCHAR ch, si;
                           A 15834    ; 5943			UINT j, st;
                           A 15835    ; 5944	
                           A 15836    ; 5945			if (sz_vol < 0x1000) LEAVE_MKFS
                           A 15837    ; 5946	#if FF_USE_TRIM
                           A 15838    ; 5947			lba[0] = b_vol; lba[1] = b_vol 
                           A 15839    ; 5948			disk_ioctl(pdrv, CTRL_TRIM, lba
                           A 15840    ; 5949	#endif
                           A 15841    ; 5950			/* Determine FAT location, data
                           A 15842    ; 5951			if (sz_au == 0) {	/* AU auto-
                           A 15843    ; 5952				sz_au = 8;
                           A 15844    ; 5953				if (sz_vol >= 0x80000) sz_a
                           A 15845    ; 5954				if (sz_vol >= 0x4000000) sz
                           A 15846    ; 5955			}
                           A 15847    ; 5956			b_fat = b_vol + 32;				
                           A 15848    ; 5957			sz_fat = (DWORD)((sz_vol / sz_a
                           A 15849    ; 5958			b_data = (b_fat + sz_fat + sz_b
                           A 15850    ; 5959			if (b_data - b_vol >= sz_vol / 
                           A 15851    ; 5960			n_clst = (DWORD)(sz_vol - (b_da
                           A 15852    ; 5961			if (n_clst <16) LEAVE_MKFS(FR_M
                           A 15853    ; 5962			if (n_clst > MAX_EXFAT) LEAVE_M
                           A 15854    ; 5963	
                           A 15855    ; 5964			szb_bit = (n_clst + 7) / 8;		
                           A 15856    ; 5965			clen[0] = (szb_bit + sz_au * ss
                           A 15857    ; 5966	
                           A 15858    ; 5967			/* Create a compressed up-case 
                           A 15859    ; 5968			sect = b_data + sz_au * clen[0]
                           A 15860    ; 5969			sum = 0;						
                           A 15861    ; 5970			st = 0; si = 0; i = 0; j = 0; s
                           A 15862    ; 5971			do {
                           A 15863    ; 5972				switch (st) {
                           A 15864    ; 5973				case 0:
                           A 15865    ; 5974					ch = (WCHAR)ff_wtoupper
                           A 15866    ; 5975					if (ch != si) {
                           A 15867    ; 5976						si++; break;		
                           A 15868    ; 5977					}
                           A 15869    ; 5978					for (j = 1; (WCHAR)(si 
                           A 15870    ; 5979					if (j >= 128) {
                           A 15871    ; 5980						ch = 0xFFFF; st = 2
                           A 15872    ; 5981					}
                           A 15873    ; 5982					st = 1;			/* Do n
                           A 15874    ; 5983					/* FALLTHROUGH */
                           A 15875    ; 5984				case 1:
                           A 15876    ; 5985					ch = si++;		/* Fill
                           A 15877    ; 5986					if (--j == 0) st = 0;
                           A 15878    ; 5987					break;
                           A 15879    ; 5988	
                           A 15880    ; 5989				default:
                           A 15881    ; 5990					ch = (WCHAR)j; si += (W
                           A 15882    ; 5991					st = 0;
                           A 15883    ; 5992				}
                           A 15884    ; 5993				sum = xsum32(buf[i + 0] = (
                           A 15885    ; 5994				sum = xsum32(buf[i + 1] = (
                           A 15886    ; 5995				i += 2; szb_case += 2;
                           A 15887    ; 5996				if (si == 0 || i == sz_buf 
                           A 15888    ; 5997					n = (i + ss - 1) / ss;
                           A 15889    ; 5998					if (disk_write(pdrv, bu
                           A 15890    ; 5999					sect += n; i = 0;
                           A 15891    ; 6000				}
                           A 15892    ; 6001			} while (si);
                           A 15893    ; 6002			clen[1] = (szb_case + sz_au * s
                           A 15894    ; 6003			clen[2] = 1;	/* Number of ro
                           A 15895    ; 6004	
                           A 15896    ; 6005			/* Initialize the allocation bi
                           A 15897    ; 6006			sect = b_data; nsect = (szb_bit
                           A 15898    ; 6007			nbit = clen[0] + clen[1] + clen
                           A 15899    ; 6008			do {
                           A 15900    ; 6009				memset(buf, 0, sz_buf * ss)
                           A 15901    ; 6010				for (i = 0; nbit != 0 && i 
                           A 15902    ; 6011				n = (nsect > sz_buf) ? sz_b
                           A 15903    ; 6012				if (disk_write(pdrv, buf, s
                           A 15904    ; 6013				sect += n; nsect -= n;
                           A 15905    ; 6014			} while (nsect);
                           A 15906    ; 6015	
                           A 15907    ; 6016			/* Initialize the FAT */
                           A 15908    ; 6017			sect = b_fat; nsect = sz_fat;	
                           A 15909    ; 6018			j = nbit = clu = 0;
                           A 15910    ; 6019			do {
                           A 15911    ; 6020				memset(buf, 0, sz_buf * ss)
                           A 15912    ; 6021				if (clu == 0) {	/* Initiali
                           A 15913    ; 6022					st_dword(buf + i, 0xFFF
                           A 15914    ; 6023					st_dword(buf + i, 0xFFF
                           A 15915    ; 6024				}
                           A 15916    ; 6025				do {			/* Create c
                           A 15917    ; 6026					while (nbit != 0 && i <
                           A 15918    ; 6027						st_dword(buf + i, (
                           A 15919    ; 6028						i += 4; clu++; nbit
                           A 15920    ; 6029					}
                           A 15921    ; 6030					if (nbit == 0 && j < 3)
                           A 15922    ; 6031				} while (nbit != 0 && i < s
                           A 15923    ; 6032				n = (nsect > sz_buf) ? sz_b
                           A 15924    ; 6033				if (disk_write(pdrv, buf, s
                           A 15925    ; 6034				sect += n; nsect -= n;
                           A 15926    ; 6035			} while (nsect);
                           A 15927    ; 6036	
                           A 15928    ; 6037			/* Initialize the root director
                           A 15929    ; 6038			memset(buf, 0, sz_buf * ss);
                           A 15930    ; 6039			buf[SZDIRE * 0 + 0] = ET_VLABEL
                           A 15931    ; 6040			buf[SZDIRE * 1 + 0] = ET_BITMAP
                           A 15932    ; 6041			st_dword(buf + SZDIRE * 1 + 20,
                           A 15933    ; 6042			st_dword(buf + SZDIRE * 1 + 24,
                           A 15934    ; 6043			buf[SZDIRE * 2 + 0] = ET_UPCASE
                           A 15935    ; 6044			st_dword(buf + SZDIRE * 2 + 4, 
                           A 15936    ; 6045			st_dword(buf + SZDIRE * 2 + 20,
                           A 15937    ; 6046			st_dword(buf + SZDIRE * 2 + 24,
                           A 15938    ; 6047			sect = b_data + sz_au * (clen[0
                           A 15939    ; 6048			do {	/* Fill root directory 
                           A 15940    ; 6049				n = (nsect > sz_buf) ? sz_b
                           A 15941    ; 6050				if (disk_write(pdrv, buf, s
                           A 15942    ; 6051				memset(buf, 0, ss);	/* Rest
                           A 15943    ; 6052				sect += n; nsect -= n;
                           A 15944    ; 6053			} while (nsect);
                           A 15945    ; 6054	
                           A 15946    ; 6055			/* Create two set of the exFAT 
                           A 15947    ; 6056			sect = b_vol;
                           A 15948    ; 6057			for (n = 0; n < 2; n++) {
                           A 15949    ; 6058				/* Main record (+0) */
                           A 15950    ; 6059				memset(buf, 0, ss);
                           A 15951    ; 6060				memcpy(buf + BS_JmpBoot, "\
                           A 15952    ; 6061				st_qword(buf + BPB_VolOfsEx
                           A 15953    ; 6062				st_qword(buf + BPB_TotSecEx
                           A 15954    ; 6063				st_dword(buf + BPB_FatOfsEx
                           A 15955    ; 6064				st_dword(buf + BPB_FatSzEx,
                           A 15956    ; 6065				st_dword(buf + BPB_DataOfsE
                           A 15957    ; 6066				st_dword(buf + BPB_NumClusE
                           A 15958    ; 6067				st_dword(buf + BPB_RootClus
                           A 15959    ; 6068				st_dword(buf + BPB_VolIDEx,
                           A 15960    ; 6069				st_word(buf + BPB_FSVerEx, 
                           A 15961    ; 6070				for (buf[BPB_BytsPerSecEx] 
                           A 15962    ; 6071				for (buf[BPB_SecPerClusEx] 
                           A 15963    ; 6072				buf[BPB_NumFATsEx] = 1;		
                           A 15964    ; 6073				buf[BPB_DrvNumEx] = 0x80;	
                           A 15965    ; 6074				st_word(buf + BS_BootCodeEx
                           A 15966    ; 6075				st_word(buf + BS_55AA, 0xAA
                           A 15967    ; 6076				for (i = sum = 0; i < ss; i
                           A 15968    ; 6077					if (i != BPB_VolFlagEx 
                           A 15969    ; 6078				}
                           A 15970    ; 6079				if (disk_write(pdrv, buf, s
                           A 15971    ; 6080				/* Extended bootstrap recor
                           A 15972    ; 6081				memset(buf, 0, ss);
                           A 15973    ; 6082				st_word(buf + ss - 2, 0xAA5
                           A 15974    ; 6083				for (j = 1; j < 9; j++) {
                           A 15975    ; 6084					for (i = 0; i < ss; sum
                           A 15976    ; 6085					if (disk_write(pdrv, bu
                           A 15977    ; 6086				}
                           A 15978    ; 6087				/* OEM/Reserved record (+9.
                           A 15979    ; 6088				memset(buf, 0, ss);
                           A 15980    ; 6089				for ( ; j < 11; j++) {
                           A 15981    ; 6090					for (i = 0; i < ss; sum
                           A 15982    ; 6091					if (disk_write(pdrv, bu
                           A 15983    ; 6092				}
                           A 15984    ; 6093				/* Sum record (+11) */
                           A 15985    ; 6094				for (i = 0; i < ss; i += 4)
                           A 15986    ; 6095				if (disk_write(pdrv, buf, s
                           A 15987    ; 6096			}
                           A 15988    ; 6097	
                           A 15989    ; 6098		} else
                           A 15990    ; 6099	#endif	/* FF_FS_EXFAT */
                           A 15991    ; 6100		{	/* Create an FAT/FAT32 volume *
                           A 15992    ; 6101			do {
                           A 15993    ; 6102				pau = sz_au;
                           A 15994    ; 6103				/* Pre-determine number of 
                           A 15995    ; 6104				if (fsty == FS_FAT32) {	/* 
                           A 15996    ; 6105					if (pau == 0) {	/* AU a
                           A 15997    ; 6106						n = (DWORD)sz_vol /
                           A 15998    ; 6107						for (i = 0, pau = 1
                           A 15999    ; 6108					}
                           A 16000    ; 6109					n_clst = (DWORD)sz_vol 
                           A 16001    ; 6110					sz_fat = (n_clst * 4 + 
                           A 16002    ; 6111					sz_rsv = 32;	/* Numb
                           A 16003    ; 6112					sz_dir = 0;		/* No s
                           A 16004    ; 6113					if (n_clst <= MAX_FAT16
                           A 16005    ; 6114				} else {				/* 
                           A 16006    ; 6115					if (pau == 0) {	/* au a
                           A 16007    ; 6116						n = (DWORD)sz_vol /
                           A 16008    ; 6117						for (i = 0, pau = 1
                           A 16009    ; 6118					}
                           A 16010    ; 6119					n_clst = (DWORD)sz_vol 
                           A 16011    ; 6120					if (n_clst > MAX_FAT12)
                           A 16012    ; 6121						n = n_clst * 2 + 4;
                           A 16013    ; 6122					} else {
                           A 16014    ; 6123						fsty = FS_FAT12;
                           A 16015    ; 6124						n = (n_clst * 3 + 1
                           A 16016    ; 6125					}
                           A 16017    ; 6126					sz_fat = (n + ss - 1) /
                           A 16018    ; 6127					sz_rsv = 1;				
                           A 16019    ; 6128					sz_dir = (DWORD)n_root 
                           A 16020    ; 6129				}
                           A 16021    ; 6130				b_fat = b_vol + sz_rsv;		
                           A 16022    ; 6131				b_data = b_fat + sz_fat * n
                           A 16023    ; 6132	
                           A 16024    ; 6133				/* Align data area to erase
                           A 16025    ; 6134				n = (DWORD)(((b_data + sz_b
                           A 16026    ; 6135				if (fsty == FS_FAT32) {		
                           A 16027    ; 6136					sz_rsv += n; b_fat += n
                           A 16028    ; 6137				} else {					
                           A 16029    ; 6138					if (n % n_fat) {	/* 
                           A 16030    ; 6139						n--; sz_rsv++; b_fa
                           A 16031    ; 6140					}
                           A 16032    ; 6141					sz_fat += n / n_fat;
                           A 16033    ; 6142				}
                           A 16034    ; 6143	
                           A 16035    ; 6144				/* Determine number of clus
                           A 16036    ; 6145				if (sz_vol < b_data + pau *
                           A 16037    ; 6146				n_clst = ((DWORD)sz_vol - s
                           A 16038    ; 6147				if (fsty == FS_FAT32) {
                           A 16039    ; 6148					if (n_clst <= MAX_FAT16
                           A 16040    ; 6149						if (sz_au == 0 && (
                           A 16041    ; 6150						LEAVE_MKFS(FR_MKFS_
                           A 16042    ; 6151					}
                           A 16043    ; 6152				}
                           A 16044    ; 6153				if (fsty == FS_FAT16) {
                           A 16045    ; 6154					if (n_clst > MAX_FAT16)
                           A 16046    ; 6155						if (sz_au == 0 && (
                           A 16047    ; 6156							sz_au = pau * 2
                           A 16048    ; 6157						}
                           A 16049    ; 6158						if ((fsopt & FM_FAT
                           A 16050    ; 6159							fsty = FS_FAT32
                           A 16051    ; 6160						}
                           A 16052    ; 6161						if (sz_au == 0 && (
                           A 16053    ; 6162						LEAVE_MKFS(FR_MKFS_
                           A 16054    ; 6163					}
                           A 16055    ; 6164					if  (n_clst <= MAX_FAT1
                           A 16056    ; 6165						if (sz_au == 0 && (
                           A 16057    ; 6166						LEAVE_MKFS(FR_MKFS_
                           A 16058    ; 6167					}
                           A 16059    ; 6168				}
                           A 16060    ; 6169				if (fsty == FS_FAT12 && n_c
                           A 16061    ; 6170	
                           A 16062    ; 6171				/* Ok, it is the valid clus
                           A 16063    ; 6172				break;
                           A 16064    ; 6173			} while (1);
                           A 16065    ; 6174	
                           A 16066    ; 6175	#if FF_USE_TRIM
                           A 16067    ; 6176			lba[0] = b_vol; lba[1] = b_vol 
                           A 16068    ; 6177			disk_ioctl(pdrv, CTRL_TRIM, lba
                           A 16069    ; 6178	#endif
                           A 16070    ; 6179			/* Create FAT VBR */
                           A 16071    ; 6180			memset(buf, 0, ss);
                           A 16072    ; 6181			memcpy(buf + BS_JmpBoot, "\xEB\
                           A 16073    ; 6182			st_word(buf + BPB_BytsPerSec, s
                           A 16074    ; 6183			buf[BPB_SecPerClus] = (BYTE)pau
                           A 16075    ; 6184			st_word(buf + BPB_RsvdSecCnt, (
                           A 16076    ; 6185			buf[BPB_NumFATs] = (BYTE)n_fat;
                           A 16077    ; 6186			st_word(buf + BPB_RootEntCnt, (
                           A 16078    ; 6187			if (sz_vol < 0x10000) {
                           A 16079    ; 6188				st_word(buf + BPB_TotSec16,
                           A 16080    ; 6189			} else {
                           A 16081    ; 6190				st_dword(buf + BPB_TotSec32
                           A 16082    ; 6191			}
                           A 16083    ; 6192			buf[BPB_Media] = 0xF8;			
                           A 16084    ; 6193			st_word(buf + BPB_SecPerTrk, 63
                           A 16085    ; 6194			st_word(buf + BPB_NumHeads, 255
                           A 16086    ; 6195			st_dword(buf + BPB_HiddSec, (DW
                           A 16087    ; 6196			if (fsty == FS_FAT32) {
                           A 16088    ; 6197				st_dword(buf + BS_VolID32, 
                           A 16089    ; 6198				st_dword(buf + BPB_FATSz32,
                           A 16090    ; 6199				st_dword(buf + BPB_RootClus
                           A 16091    ; 6200				st_word(buf + BPB_FSInfo32,
                           A 16092    ; 6201				st_word(buf + BPB_BkBootSec
                           A 16093    ; 6202				buf[BS_DrvNum32] = 0x80;	
                           A 16094    ; 6203				buf[BS_BootSig32] = 0x29;	
                           A 16095    ; 6204				memcpy(buf + BS_VolLab32, "
                           A 16096    ; 6205			} else {
                           A 16097    ; 6206				st_dword(buf + BS_VolID, vs
                           A 16098    ; 6207				st_word(buf + BPB_FATSz16, 
                           A 16099    ; 6208				buf[BS_DrvNum] = 0x80;		
                           A 16100    ; 6209				buf[BS_BootSig] = 0x29;		
                           A 16101    ; 6210				memcpy(buf + BS_VolLab, "NO
                           A 16102    ; 6211			}
                           A 16103    ; 6212			st_word(buf + BS_55AA, 0xAA55);
                           A 16104    ; 6213			if (disk_write(pdrv, buf, b_vol
                           A 16105    ; 6214	
                           A 16106    ; 6215			/* Create FSINFO record if need
                           A 16107    ; 6216			if (fsty == FS_FAT32) {
                           A 16108    ; 6217				disk_write(pdrv, buf, b_vol
                           A 16109    ; 6218				memset(buf, 0, ss);
                           A 16110    ; 6219				st_dword(buf + FSI_LeadSig,
                           A 16111    ; 6220				st_dword(buf + FSI_StrucSig
                           A 16112    ; 6221				st_dword(buf + FSI_Free_Cou
                           A 16113    ; 6222				st_dword(buf + FSI_Nxt_Free
                           A 16114    ; 6223				st_word(buf + BS_55AA, 0xAA
                           A 16115    ; 6224				disk_write(pdrv, buf, b_vol
                           A 16116    ; 6225				disk_write(pdrv, buf, b_vol
                           A 16117    ; 6226			}
                           A 16118    ; 6227	
                           A 16119    ; 6228			/* Initialize FAT area */
                           A 16120    ; 6229			memset(buf, 0, sz_buf * ss);
                           A 16121    ; 6230			sect = b_fat;		/* FAT star
                           A 16122    ; 6231			for (i = 0; i < n_fat; i++) {	
                           A 16123    ; 6232				if (fsty == FS_FAT32) {
                           A 16124    ; 6233					st_dword(buf + 0, 0xFFF
                           A 16125    ; 6234					st_dword(buf + 4, 0xFFF
                           A 16126    ; 6235					st_dword(buf + 8, 0x0FF
                           A 16127    ; 6236				} else {
                           A 16128    ; 6237					st_dword(buf + 0, (fsty
                           A 16129    ; 6238				}
                           A 16130    ; 6239				nsect = sz_fat;		/* Numb
                           A 16131    ; 6240				do {	/* Fill FAT sectors
                           A 16132    ; 6241					n = (nsect > sz_buf) ? 
                           A 16133    ; 6242					if (disk_write(pdrv, bu
                           A 16134    ; 6243					memset(buf, 0, ss);	/* 
                           A 16135    ; 6244					sect += n; nsect -= n;
                           A 16136    ; 6245				} while (nsect);
                           A 16137    ; 6246			}
                           A 16138    ; 6247	
                           A 16139    ; 6248			/* Initialize root directory (f
                           A 16140    ; 6249			nsect = (fsty == FS_FAT32) ? pa
                           A 16141    ; 6250			do {
                           A 16142    ; 6251				n = (nsect > sz_buf) ? sz_b
                           A 16143    ; 6252				if (disk_write(pdrv, buf, s
                           A 16144    ; 6253				sect += n; nsect -= n;
                           A 16145    ; 6254			} while (nsect);
                           A 16146    ; 6255		}
                           A 16147    ; 6256	
                           A 16148    ; 6257		/* A FAT volume has been created he
                           A 16149    ; 6258	
                           A 16150    ; 6259		/* Determine system ID in the MBR p
                           A 16151    ; 6260		if (FF_FS_EXFAT && fsty == FS_EXFAT
                           A 16152    ; 6261			sys = 0x07;			/* exFAT */
                           A 16153    ; 6262		} else {
                           A 16154    ; 6263			if (fsty == FS_FAT32) {
                           A 16155    ; 6264				sys = 0x0C;		/* FAT32X *
                           A 16156    ; 6265			} else {
                           A 16157    ; 6266				if (sz_vol >= 0x10000) {
                           A 16158    ; 6267					sys = 0x06;	/* FAT12/16
                           A 16159    ; 6268				} else {
                           A 16160    ; 6269					sys = (fsty == FS_FAT16
                           A 16161    ; 6270				}
                           A 16162    ; 6271			}
                           A 16163    ; 6272		}
                           A 16164    ; 6273	
                           A 16165    ; 6274		/* Update partition information */
                           A 16166    ; 6275		if (FF_MULTI_PARTITION && ipart != 
                           A 16167    ; 6276			if (!FF_LBA64 || !(fsopt & 0x80
                           A 16168    ; 6277				/* Update system ID in the 
                           A 16169    ; 6278				if (disk_read(pdrv, buf, 0,
                           A 16170    ; 6279				buf[MBR_Table + (ipart - 1)
                           A 16171    ; 6280				if (disk_write(pdrv, buf, 0
                           A 16172    ; 6281			}
                           A 16173    ; 6282		} else {							
                           A 16174    ; 6283			if (!(fsopt & FM_SFD)) {		
                           A 16175    ; 6284				lba[0] = sz_vol; lba[1] = 0
                           A 16176    ; 6285				fr = create_partition(pdrv,
                           A 16177    ; 6286				if (fr != FR_OK) LEAVE_MKFS
                           A 16178    ; 6287			}
                           A 16179    ; 6288		}
                           A 16180    ; 6289	
                           A 16181    ; 6290		if (disk_ioctl(pdrv, CTRL_SYNC, 0) 
                           A 16182    ; 6291	
                           A 16183    ; 6292		LEAVE_MKFS(FR_OK);
                           A 16184    ; 6293	}
                           A 16185    ; 6294	
                           A 16186    ; 6295	
                           A 16187    ; 6296	
                           A 16188    ; 6297	
                           A 16189    ; 6298	#if FF_MULTI_PARTITION
                           A 16190    ; 6299	/*-------------------------------------
                           A 16191    ; 6300	/* Create Partition Table on the Physic
                           A 16192    ; 6301	/*-------------------------------------
                           A 16193    ; 6302	
                           A 16194    ; 6303	FRESULT f_fdisk (
                           A 16195    ; 6304		BYTE pdrv,			/* Physical dri
                           A 16196    ; 6305		const LBA_t ptbl[],	/* Pointer to t
                           A 16197    ; 6306		void* work			/* Pointer to t
                           A 16198    ; 6307	)
                           A 16199    ; 6308	{
                           A 16200    ; 6309		BYTE *buf = (BYTE*)work;
                           A 16201    ; 6310		DSTATUS stat;
                           A 16202    ; 6311	
                           A 16203    ; 6312	
                           A 16204    ; 6313		stat = disk_initialize(pdrv);
                           A 16205    ; 6314		if (stat & STA_NOINIT) return FR_NO
                           A 16206    ; 6315		if (stat & STA_PROTECT) return FR_W
                           A 16207    ; 6316	#if FF_USE_LFN == 3
                           A 16208    ; 6317		if (!buf) buf = ff_memalloc(FF_MAX_
                           A 16209    ; 6318	#endif
                           A 16210    ; 6319		if (!buf) return FR_NOT_ENOUGH_CORE
                           A 16211    ; 6320	
                           A 16212    ; 6321		LEAVE_MKFS(create_partition(pdrv, p
                           A 16213    ; 6322	}
                           A 16214    ; 6323	
                           A 16215    ; 6324	#endif /* FF_MULTI_PARTITION */
                           A 16216    ; 6325	#endif /* !FF_FS_READONLY && FF_USE_MKF
                           A 16217    ; 6326	
                           A 16218    ; 6327	
                           A 16219    ; 6328	
                           A 16220    ; 6329	
                           A 16221    ; 6330	#if FF_USE_STRFUNC
                           A 16222    ; 6331	#if FF_USE_LFN && FF_LFN_UNICODE && (FF
                           A 16223    ; 6332	#error Wrong FF_STRF_ENCODE setting
                           A 16224    ; 6333	#endif
                           A 16225    ; 6334	/*-------------------------------------
                           A 16226    ; 6335	/* Get a String from the File          
                           A 16227    ; 6336	/*-------------------------------------
                           A 16228    ; 6337	
                           A 16229    ; 6338	TCHAR* f_gets (
                           A 16230    ; 6339		TCHAR* buff,	/* Pointer to the b
                           A 16231    ; 6340		int len,		/* Size of string b
                           A 16232    ; 6341		FIL* fp			/* Pointer to the f
                           A 16233    ; 6342	)
                           A 16234    ; 6343	{
043D3E                     A 16235    _f_gets:
                           A 16236    .DEFINE "_f_gets"
                           A 16237    
                           A 16238    .VALUE _f_gets
                           A 16239    
                           A 16240    .CLASS 2
                           A 16241    
                           A 16242    .TYPE 322
                           A 16243    
                           A 16244    .ENDEF
                           A 16245    
                           A 16246    .BEGFUNC "f_gets",6343,"_f_gets"
                           A 16247    
                           A 16248    .LINE 6343
                           A 16249    
                           A 16250    .DEFINE "buff"
                           A 16251    
                           A 16252    .CLASS 65
                           A 16253    
                           A 16254    .VALUE 6
                           A 16255    
                           A 16256    .TYPE 34
                           A 16257    
                           A 16258    .ENDEF
                           A 16259    
                           A 16260    .DEFINE "len"
                           A 16261    
                           A 16262    .CLASS 65
                           A 16263    
                           A 16264    .VALUE 9
                           A 16265    
                           A 16266    .TYPE 4
                           A 16267    
                           A 16268    .ENDEF
                           A 16269    
                           A 16270    .DEFINE "fp"
                           A 16271    
                           A 16272    .CLASS 65
                           A 16273    
                           A 16274    .VALUE 12
                           A 16275    
                           A 16276    .TAG "NONAME2"
                           A 16277    
                           A 16278    .TYPE 40
                           A 16279    
                           A 16280    .ENDEF
                           A 16281    
                           A 16282    .DEFINE "nc"
                           A 16283    
                           A 16284    .CLASS 65
                           A 16285    
                           A 16286    .VALUE -3
                           A 16287    
                           A 16288    .TYPE 4
                           A 16289    
                           A 16290    .ENDEF
                           A 16291    
                           A 16292    .DEFINE "p"
                           A 16293    
                           A 16294    .CLASS 65
                           A 16295    
                           A 16296    .VALUE -6
                           A 16297    
                           A 16298    .TYPE 34
                           A 16299    
                           A 16300    .ENDEF
                           A 16301    
                           A 16302    .DEFINE "rc"
                           A 16303    
                           A 16304    .CLASS 65
                           A 16305    
                           A 16306    .VALUE -12
                           A 16307    
                           A 16308    .TYPE 14
                           A 16309    
                           A 16310    .ENDEF
                           A 16311    
                           A 16312    .DEFINE "dc"
                           A 16313    
                           A 16314    .CLASS 65
                           A 16315    
                           A 16316    .VALUE -16
                           A 16317    
                           A 16318    .TYPE 15
                           A 16319    
                           A 16320    .ENDEF
                           A 16321    
                           A 16322    .DEFINE "s"
                           A 16323    
                           A 16324    .CLASS 65
                           A 16325    
                           A 16326    .VALUE -20
                           A 16327    
                           A 16328    .DIM 4
                           A 16329    
                           A 16330    .TYPE 108
                           A 16331    
                           A 16332    .ENDEF
                           A 16333    
043D3E DDE5                A 16334    	PUSH	IX
043D40 DD210000 00         A 16335    	LD	IX,0
043D45 DD39                A 16336    	ADD	IX,SP
043D47 ED22E8              A 16337    	LEA	HL,IX+%FFFFFFE8
043D4A F9                  A 16338    	LD	SP,HL
                           A 16339    ; 6344		int nc = 0;
                           A 16340    .LINE 6344
                           A 16341    
043D4B 01000000            A 16342    	LD	BC,0
043D4F DD0FFD              A 16343    	LD	(IX+%FFFFFFFD),BC
                           A 16344    ; 6345		TCHAR *p = buff;
                           A 16345    .LINE 6345
                           A 16346    
043D52 DD0706              A 16347    	LD	BC,(IX+%6)
043D55 DD0FFA              A 16348    	LD	(IX+%FFFFFFFA),BC
                           A 16349    ; 6346		BYTE s[4];
                           A 16350    ; 6347		UINT rc;
                           A 16351    ; 6348		DWORD dc;
                           A 16352    ; 6349	#if FF_USE_LFN && FF_LFN_UNICODE && FF_
                           A 16353    ; 6350		WCHAR wc;
                           A 16354    ; 6351	#endif
                           A 16355    ; 6352	#if FF_USE_LFN && FF_LFN_UNICODE && FF_
                           A 16356    ; 6353		UINT ct;
                           A 16357    ; 6354	#endif
                           A 16358    ; 6355	
                           A 16359    ; 6356	#if FF_USE_LFN && FF_LFN_UNICODE		
                           A 16360    ; 6357		/* Make a room for the character an
                           A 16361    ; 6358		if (FF_LFN_UNICODE == 1) len -= (FF
                           A 16362    ; 6359		if (FF_LFN_UNICODE == 2) len -= (FF
                           A 16363    ; 6360		if (FF_LFN_UNICODE == 3) len -= 1;
                           A 16364    ; 6361		while (nc < len) {
                           A 16365    ; 6362	#if FF_STRF_ENCODE == 0				/* 
                           A 16366    ; 6363			f_read(fp, s, 1, &rc);		/* 
                           A 16367    ; 6364			if (rc != 1) break;			/* 
                           A 16368    ; 6365			wc = s[0];
                           A 16369    ; 6366			if (dbc_1st((BYTE)wc)) {	/* 
                           A 16370    ; 6367				f_read(fp, s, 1, &rc);	/* 
                           A 16371    ; 6368				if (rc != 1 || !dbc_2nd(s[0
                           A 16372    ; 6369				wc = wc << 8 | s[0];
                           A 16373    ; 6370			}
                           A 16374    ; 6371			dc = ff_oem2uni(wc, CODEPAGE);	
                           A 16375    ; 6372			if (dc == 0) continue;		/* 
                           A 16376    ; 6373	#elif FF_STRF_ENCODE == 1 || FF_STRF_EN
                           A 16377    ; 6374			f_read(fp, s, 2, &rc);		/* 
                           A 16378    ; 6375			if (rc != 2) break;			/* 
                           A 16379    ; 6376			dc = (FF_STRF_ENCODE == 1) ? ld
                           A 16380    ; 6377			if (IsSurrogateL(dc)) continue;
                           A 16381    ; 6378			if (IsSurrogateH(dc)) {		/* 
                           A 16382    ; 6379				f_read(fp, s, 2, &rc);	/* 
                           A 16383    ; 6380				if (rc != 2) break;		/* 
                           A 16384    ; 6381				wc = (FF_STRF_ENCODE == 1) 
                           A 16385    ; 6382				if (!IsSurrogateL(wc)) cont
                           A 16386    ; 6383				dc = ((dc & 0x3FF) + 0x40) 
                           A 16387    ; 6384			}
                           A 16388    ; 6385	#else	/* Read a character in UTF-8 */
                           A 16389    ; 6386			f_read(fp, s, 1, &rc);		/* 
                           A 16390    ; 6387			if (rc != 1) break;			/* 
                           A 16391    ; 6388			dc = s[0];
                           A 16392    ; 6389			if (dc >= 0x80) {			/* 
                           A 16393    ; 6390				ct = 0;
                           A 16394    ; 6391				if ((dc & 0xE0) == 0xC0) { 
                           A 16395    ; 6392				if ((dc & 0xF0) == 0xE0) { 
                           A 16396    ; 6393				if ((dc & 0xF8) == 0xF0) { 
                           A 16397    ; 6394				if (ct == 0) continue;
                           A 16398    ; 6395				f_read(fp, s, ct, &rc);	/* 
                           A 16399    ; 6396				if (rc != ct) break;
                           A 16400    ; 6397				rc = 0;
                           A 16401    ; 6398				do {	/* Merge the byte s
                           A 16402    ; 6399					if ((s[rc] & 0xC0) != 0
                           A 16403    ; 6400					dc = dc << 6 | (s[rc] &
                           A 16404    ; 6401				} while (++rc < ct);
                           A 16405    ; 6402				if (rc != ct || dc < 0x80 |
                           A 16406    ; 6403			}
                           A 16407    ; 6404	#endif
                           A 16408    ; 6405			/* A code point is avaialble in
                           A 16409    ; 6406	
                           A 16410    ; 6407			if (FF_USE_STRFUNC == 2 && dc =
                           A 16411    ; 6408	#if FF_LFN_UNICODE == 1	|| FF_LFN_UNICO
                           A 16412    ; 6409			if (FF_LFN_UNICODE == 1 && dc >
                           A 16413    ; 6410				*p++ = (TCHAR)(0xD800 | ((d
                           A 16414    ; 6411				dc = 0xDC00 | (dc & 0x3FF);
                           A 16415    ; 6412			}
                           A 16416    ; 6413			*p++ = (TCHAR)dc; nc++;
                           A 16417    ; 6414			if (dc == '\n') break;	/* End 
                           A 16418    ; 6415	#elif FF_LFN_UNICODE == 2		/* Outp
                           A 16419    ; 6416			if (dc < 0x80) {	/* Single b
                           A 16420    ; 6417				*p++ = (TCHAR)dc;
                           A 16421    ; 6418				nc++;
                           A 16422    ; 6419				if (dc == '\n') break;	/* 
                           A 16423    ; 6420			} else {
                           A 16424    ; 6421				if (dc < 0x800) {		/* 
                           A 16425    ; 6422					*p++ = (TCHAR)(0xC0 | (
                           A 16426    ; 6423					*p++ = (TCHAR)(0x80 | (
                           A 16427    ; 6424					nc += 2;
                           A 16428    ; 6425				} else {
                           A 16429    ; 6426					if (dc < 0x10000) {	/* 
                           A 16430    ; 6427						*p++ = (TCHAR)(0xE0
                           A 16431    ; 6428						*p++ = (TCHAR)(0x80
                           A 16432    ; 6429						*p++ = (TCHAR)(0x80
                           A 16433    ; 6430						nc += 3;
                           A 16434    ; 6431					} else {			/* 
                           A 16435    ; 6432						*p++ = (TCHAR)(0xF0
                           A 16436    ; 6433						*p++ = (TCHAR)(0x80
                           A 16437    ; 6434						*p++ = (TCHAR)(0x80
                           A 16438    ; 6435						*p++ = (TCHAR)(0x80
                           A 16439    ; 6436						nc += 4;
                           A 16440    ; 6437					}
                           A 16441    ; 6438				}
                           A 16442    ; 6439			}
                           A 16443    ; 6440	#endif
                           A 16444    ; 6441		}
                           A 16445    ; 6442	
                           A 16446    ; 6443	#else			/* Byte-by-byte read wi
                           A 16447    ; 6444		len -= 1;	/* Make a room for the 
                           A 16448    .LINE 6444
                           A 16449    
043D58 DD0709              A 16450    	LD	BC,(IX+%9)
043D5B 0B                  A 16451    	DEC	BC
043D5C DD0F09              A 16452    	LD	(IX+%9),BC
                           A 16453    ; 6445		while (nc < len) {
                           A 16454    .LINE 6445
                           A 16455    
043D5F 18 60               A 16456    	JR	L_689
043D61                     A 16457    L_690:
                           A 16458    ; 6446			f_read(fp, s, 1, &rc);	/* Get 
                           A 16459    .LINE 6446
                           A 16460    
043D61 ED65F4              A 16461    	PEA	IX+%FFFFFFF4
043D64 01010000            A 16462    	LD	BC,1
043D68 C5                  A 16463    	PUSH	BC
043D69 ED65EC              A 16464    	PEA	IX+%FFFFFFEC
043D6C DD070C              A 16465    	LD	BC,(IX+%C)
043D6F C5                  A 16466    	PUSH	BC
043D70 DD77E8              A 16467    	LD	(IX+%FFFFFFE8),A
043D73 CD EE 34 04         A 16468    	CALL	_f_read
043D77 DD7EE8              A 16469    	LD	A,(IX+%FFFFFFE8)
043D7A C1                  A 16470    	POP	BC
043D7B C1                  A 16471    	POP	BC
043D7C C1                  A 16472    	POP	BC
043D7D C1                  A 16473    	POP	BC
                           A 16474    ; 6447			if (rc != 1) break;		/* EOF?
                           A 16475    .LINE 6447
                           A 16476    
043D7E 01010000            A 16477    	LD	BC,1
043D82 DD27F4              A 16478    	LD	HL,(IX+%FFFFFFF4)
043D85 B7                  A 16479    	OR	A,A
043D86 ED42                A 16480    	SBC	HL,BC
043D88 20 44               A 16481    	JR	NZ,L_691
                           A 16482    ; 6448			dc = s[0];
                           A 16483    .LINE 6448
                           A 16484    
043D8A B7ED62              A 16485    	UEXT	HL
043D8D DD6EEC              A 16486    	LD	L,(IX+%FFFFFFEC)
043D90 DD2FF0              A 16487    	LD	(IX+%FFFFFFF0),HL
043D93 DD74F3              A 16488    	LD	(IX+%FFFFFFF3),H
                           A 16489    ; 6449			if (FF_USE_STRFUNC == 2 && dc =
                           A 16490    ; 6450			*p++ = (TCHAR)dc; nc++;
                           A 16491    .LINE 6450
                           A 16492    
043D96 DD07FA              A 16493    	LD	BC,(IX+%FFFFFFFA)
043D99 DD0FE9              A 16494    	LD	(IX+%FFFFFFE9),BC
043D9C DD7EF0              A 16495    	LD	A,(IX+%FFFFFFF0)
043D9F C5E1                A 16496    	LD	HL,BC
043DA1 77                  A 16497    	LD	(HL),A
043DA2 DD07FA              A 16498    	LD	BC,(IX+%FFFFFFFA)
043DA5 03                  A 16499    	INC	BC
043DA6 DD0FFA              A 16500    	LD	(IX+%FFFFFFFA),BC
043DA9 DD07FD              A 16501    	LD	BC,(IX+%FFFFFFFD)
043DAC 03                  A 16502    	INC	BC
043DAD DD0FFD              A 16503    	LD	(IX+%FFFFFFFD),BC
                           A 16504    ; 6451			if (dc == '\n') break;
                           A 16505    .LINE 6451
                           A 16506    
043DB0 DD27F0              A 16507    	LD	HL,(IX+%FFFFFFF0)
043DB3 DD5EF3              A 16508    	LD	E,(IX+%FFFFFFF3)
043DB6 010A0000            A 16509    	LD	BC,10
043DBA AF                  A 16510    	XOR	A,A
043DBB CD AA 46 04         A 16511    	CALL	__lcmpu
043DBF 28 0D               A 16512    	JR	Z,L_691
                           A 16513    ; 6452		}
043DC1                     A 16514    L_689:
                           A 16515    .LINE 6452
                           A 16516    
043DC1 DD0709              A 16517    	LD	BC,(IX+%9)
043DC4 DD27FD              A 16518    	LD	HL,(IX+%FFFFFFFD)
043DC7 B7                  A 16519    	OR	A,A
043DC8 ED42                A 16520    	SBC	HL,BC
043DCA FA 61 3D 04         A 16521    	JP	M,L_690
043DCE                     A 16522    L_691:
                           A 16523    ; 6453	#endif
                           A 16524    ; 6454	
                           A 16525    ; 6455		*p = 0;		/* Terminate the string
                           A 16526    .LINE 6455
                           A 16527    
043DCE DD27FA              A 16528    	LD	HL,(IX+%FFFFFFFA)
043DD1 3600                A 16529    	LD	(HL),%0
                           A 16530    ; 6456		return nc ? buff : 0;	/* When no 
                           A 16531    .LINE 6456
                           A 16532    
043DD3 DD27FD              A 16533    	LD	HL,(IX+%FFFFFFFD)
043DD6 CD 07 46 04         A 16534    	CALL	__icmpzero
043DDA 28 08               A 16535    	JR	Z,L_694
043DDC DD0706              A 16536    	LD	BC,(IX+%6)
043DDF DD0FF7              A 16537    	LD	(IX+%FFFFFFF7),BC
043DE2 18 07               A 16538    	JR	L_695
043DE4                     A 16539    L_694:
043DE4 01000000            A 16540    	LD	BC,0
043DE8 DD0FF7              A 16541    	LD	(IX+%FFFFFFF7),BC
043DEB                     A 16542    L_695:
043DEB DD27F7              A 16543    	LD	HL,(IX+%FFFFFFF7)
                           A 16544    ; 6457	}
                           A 16545    .LINE 6457
                           A 16546    
043DEE DDF9                A 16547    	LD	SP,IX
043DF0 DDE1                A 16548    	POP	IX
043DF2 C9                  A 16549    	RET	
                           A 16550    
                           A 16551    
                           A 16552    ;**************************** _f_gets *********
                           A 16553    ;Name                         Addr/Register   S
                           A 16554    ;_f_read                             IMPORT  --
                           A 16555    ;s                                    IX-20    
                           A 16556    ;dc                                   IX-16    
                           A 16557    ;rc                                   IX-12    
                           A 16558    ;temp692                               IX-9    
                           A 16559    ;p                                     IX-6    
                           A 16560    ;nc                                    IX-3    
                           A 16561    ;fp                                   IX+12    
                           A 16562    ;len                                   IX+9    
                           A 16563    ;buff                                  IX+6    
                           A 16564    
                           A 16565    
                           A 16566    ; Stack Frame Size: 39 (bytes)
                           A 16567    ;       Spill Code: -1 (instruction)
                           A 16568    
                           A 16569    
                           A 16570    .ENDFUNC "f_gets",6457,"_f_gets"
                           A 16571    	XREF _disk_read:ROM
                           A 16572    	XREF _disk_status:ROM
                           A 16573    	XREF _disk_initialize:ROM
                           A 16574    	XREF _ff_wtoupper:ROM
                           A 16575    	XREF _ff_uni2oem:ROM
                           A 16576    	XREF _ff_oem2uni:ROM
                           A 16577    	XREF _strchr:ROM
                           A 16578    	XREF _memset:ROM
                           A 16579    	XREF _memcmp:ROM
                           A 16580    	XREF _memcpy:ROM
                           A 16581    	XREF __lcmpu:ROM
                           A 16582    	XREF __ladd:ROM
                           A 16583    	XREF __lsub:ROM
                           A 16584    	XREF __ldivu:ROM
                           A 16585    	XREF __lmulu:ROM
                           A 16586    	XREF __sor:ROM
                           A 16587    	XREF __ior:ROM
                           A 16588    	XREF __lor:ROM
                           A 16589    	XREF __sand:ROM
                           A 16590    	XREF __iand:ROM
                           A 16591    	XREF __land:ROM
                           A 16592    	XREF __bshl:ROM
                           A 16593    	XREF __lshl:ROM
                           A 16594    	XREF __lshru:ROM
                           A 16595    	XREF __stoiu:ROM
                           A 16596    	XREF __itol:ROM
                           A 16597    	XREF __ildix:ROM
                           A 16598    	XREF __istix:ROM
                           A 16599    	XREF __setflag:ROM
                           A 16600    	XREF __scmpzero:ROM
                           A 16601    	XREF __icmpzero:ROM
                           A 16602    	XREF __lcmpzero:ROM
                           A 16603    	XREF __case8D:ROM
                           A 16604    	XREF __seqcaseD:ROM
                           A 16605    	XREF __imul_b:ROM
                           A 16606    	XREF __ladd_b:ROM
                           A 16607    	XREF __ishl_b:ROM
                           A 16608    	XREF __ishru_b:ROM
                           A 16609    	XREF __ishrs_b:ROM
                           A 16610    	XDEF _f_gets
                           A 16611    	XDEF _f_getlabel
                           A 16612    	XDEF _f_getcwd
                           A 16613    	XDEF _f_chdir
                           A 16614    	XDEF _f_chdrive
                           A 16615    	XDEF _f_close
                           A 16616    	XDEF _f_read
                           A 16617    	XDEF _f_open
                           A 16618    	XDEF _f_mount
                           A 16619    	END


Errors: 0
Warnings: 0
Lines Assembled: 16620
