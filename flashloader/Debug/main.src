; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",558
.DEFINE "fs_type"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pdrv"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fats"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "wflag"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fsi_flag"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "id"
.VALUE 5
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "n_rootdir"
.VALUE 7
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "csize"
.VALUE 9
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "lfnbuf"
.VALUE 11
.CLASS 8
.TYPE 45
.ENDEF
.DEFINE "cdir"
.VALUE 14
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "n_fatent"
.VALUE 18
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fsize"
.VALUE 22
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "volbase"
.VALUE 26
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fatbase"
.VALUE 30
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dirbase"
.VALUE 34
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "database"
.VALUE 38
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "winsect"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "win"
.VALUE 46
.CLASS 8
.DIM 512
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 40
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",29
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",46
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "dptr"
.VALUE 15
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 19
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 23
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir"
.VALUE 27
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "fn"
.VALUE 30
.CLASS 8
.DIM 12
.TYPE 108
.ENDEF
.DEFINE "blk_ofs"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",278
.DEFINE "fsize"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fdate"
.VALUE 4
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "ftime"
.VALUE 6
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "fattrib"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "altname"
.VALUE 9
.CLASS 8
.DIM 13
.TYPE 98
.ENDEF
.DEFINE "fname"
.VALUE 22
.CLASS 8
.DIM 256
.TYPE 98
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",12
.DEFINE "fmt"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fat"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "align"
.VALUE 2
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "n_root"
.VALUE 5
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "au_size"
.VALUE 8
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME5"
	SEGMENT BSS
_fs:
	DS	558
.DEFINE "fs"
.ALIAS "_fs"
.CLASS 83
.VALUE _fs
.TAG "NONAME0"
.TYPE 8
.ENDEF
;    1	#include <ez80.h>
;    2	#include "src_fatfs\ff.h"
;    3	#include "spi.h"
;    4	#include "defines.h"
;    5	#include <stdint.h>
;    6	#include "agontimer.h"
;    7	#include "protocol.h"
;    8	
;    9	#define PAGESIZE	1024
;   10	#define FLASHPAGES	128
;   11	#define FLASHSTART	0x0
;   12	#define BAUDRATE	500000
;   13	
;   14	#define MOSFILENAME	"MOS.bin"
;   15	#define LOADADDRESS	0x50000
;   16	
;   17	extern void init_UART0(void);
;   18	
;   19	extern void enableFlashKeyRegister(void);
;   20	extern void lockFlashKeyRegister(void);
;   21	extern void fastmemcpy(UINT24 destination, UINT24 source, UINT24 size);
;   22	extern void reset(void);
;   23	
;   24	FATFS 	fs;
	SEGMENT CODE
;   25	
;   26	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",26,"_main"

.LINE 26

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "fr"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -6

.TYPE 14

.ENDEF

.DEFINE "counter"

.CLASS 65

.VALUE -9

.TYPE 14

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -12

.TYPE 4

.ENDEF

.DEFINE "br"

.CLASS 65

.VALUE -15

.TYPE 14

.ENDEF

.DEFINE "addressfrom"

.CLASS 65

.VALUE -18

.TYPE 14

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE -19

.TYPE 12

.ENDEF

.DEFINE "addressto"

.CLASS 65

.VALUE -22

.TYPE 14

.ENDEF

.DEFINE "pagemax"

.CLASS 65

.VALUE -25

.TYPE 14

.ENDEF

.DEFINE "total"

.CLASS 65

.VALUE -29

.TYPE 15

.ENDEF

.DEFINE "lastpagebytes"

.CLASS 65

.VALUE -35

.TYPE 14

.ENDEF

.DEFINE "fil"

.CLASS 65

.VALUE -64

.TAG "NONAME2"

.TYPE 8

.ENDEF

.DEFINE "buffer"

.CLASS 65

.VALUE -1088

.DIM 1024

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	HL,-1088
	ADD	HL,SP
	LD	SP,HL
;   27		FRESULT	fr;
;   28		FIL	   	fil;
;   29		UINT24  br;	
;   30		void * 	dest;
;   31		UINT24 size;
;   32		
;   33		UINT24	counter,pagemax, lastpagebytes;
;   34		UINT24 addressto,addressfrom;
;   35		UINT8	value;
;   36		UINT24 timer;
;   37	
;   38		char buffer[1024];
;   39		int n;
;   40		uint32_t total;
;   41	
;   42	
;   43		init_spi();
.LINE 43

	CALL	_init_spi
;   44		init_UART0();
.LINE 44

	CALL	_init_UART0
;   45	
;   46		f_mount(&fs, "", 1);
.LINE 46

	LD	BC,1
	PUSH	BC
	LD	BC,L__0
	PUSH	BC
	LD	BC,_fs
	PUSH	BC
	CALL	_f_mount
	POP	BC
	POP	BC
	POP	BC
;   47	
;   48		sendStatus('S', 1, 0); // startup complete
.LINE 48

	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,83
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   49	
;   50		addressto = FLASHSTART;
;   51		addressfrom = LOADADDRESS;
;   52		fr = f_open(&fil, MOSFILENAME, FA_READ);
.LINE 52

	LD	BC,1
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	PEA	IX+%FFFFFFC0
	CALL	_f_open
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFD),HL
;   53		if(fr == FR_OK) {
.LINE 53

	CALL	__icmpzero
	JR	NZ,L_30
;   54			size = f_size(&fil);
.LINE 54

	LD	BC,(IX+%FFFFFFCB)
	LD	(IX+%FFFFFFFA),BC
;   55			sendStatus('F', 1, size); // file read ok
.LINE 55

	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	LD	BC,1
	PUSH	BC
	LD	BC,70
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   56	
;   57			fr = f_read(&fil, (void *)LOADADDRESS, size, &br);
.LINE 57

	PEA	IX+%FFFFFFF1
	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	PEA	IX+%FFFFFFC0
	CALL	_f_read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFD),HL
;   58			sendStatus('M', 1, br); // file read into memory
.LINE 58

	LD	BC,(IX+%FFFFFFF1)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	LD	BC,1
	PUSH	BC
	LD	BC,77
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   59	
;   60			f_close(&fil);
.LINE 60

	PEA	IX+%FFFFFFC0
	CALL	_f_close
	POP	BC
;   61	
;   62			fr = f_open(&fil, "video.ino.bin", FA_READ);
.LINE 62

	LD	BC,1
	PUSH	BC
	LD	BC,L__3
	PUSH	BC
	PEA	IX+%FFFFFFC0
	CALL	_f_open
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFD),HL
;   63			if(fr == FR_OK) {
.LINE 63

	CALL	__icmpzero
	JR	NZ,L_10
;   64				size = f_size(&fil);
.LINE 64

	LD	BC,(IX+%FFFFFFCB)
	LD	(IX+%FFFFFFFA),BC
;   65				sendStatus('V', 1, size); // file read ok
.LINE 65

	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	LD	BC,1
	PUSH	BC
	LD	BC,86
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   66				
;   67				total = 0;
.LINE 67

	LD	BC,0
	XOR	A,A
	LD	(IX+%FFFFFFE3),BC
	LD	(IX+%FFFFFFE6),A
;   68				while(1) {
L_7:
.LINE 68

;   69					fr = f_read(&fil, (void *)buffer, 1024, &br);
.LINE 69

	PEA	IX+%FFFFFFF1
	LD	BC,1024
	PUSH	BC
	LD	HL,IX
	LD	BC,-1088
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PEA	IX+%FFFFFFC0
	CALL	_f_read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFD),HL
;   70					if(br == 0) break;
.LINE 70

	LD	HL,(IX+%FFFFFFF1)
	CALL	__icmpzero
	JR	Z,L_8
;   71					for(n = 0; n < br; n++) {
.LINE 71

	LD	BC,0
	LD	(IX+%FFFFFFF4),BC
	JR	L_4
L_2:
;   72						putch(buffer[n]);
.LINE 72

	LD	BC,(IX+%FFFFFFF4)
	LD	HL,IX
	LD	DE,-1088
	ADD	HL,DE
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	PUSH	HL
	CALL	_putch
	POP	BC
;   73						total += buffer[n];
.LINE 73

	LD	BC,(IX+%FFFFFFF4)
	LD	HL,IX
	LD	DE,-1088
	ADD	HL,DE
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	E,H
	LD	BC,(IX+%FFFFFFE3)
	LD	A,(IX+%FFFFFFE6)
	CALL	__ladd
	LD	(IX+%FFFFFFE3),HL
	LD	(IX+%FFFFFFE6),E
	LD	BC,(IX+%FFFFFFF4)
	INC	BC
	LD	(IX+%FFFFFFF4),BC
;   74					}
L_4:
.LINE 74

	LD	BC,(IX+%FFFFFFF1)
	LD	HL,(IX+%FFFFFFF4)
	OR	A,A
	SBC	HL,BC
	JR	C,L_2
	JR	L_7
;   75				}
L_8:
.LINE 75

;   76				sendStatus('W', 1, total);
.LINE 76

	LD	C,(IX+%FFFFFFE6)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%FFFFFFE3)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,87
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   77			}
;   78			else sendStatus('V', 0, fr);
.LINE 78

	JR	L_12
L_10:
	LD	BC,(IX+%FFFFFFFD)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	LD	BC,0
	PUSH	BC
	LD	BC,86
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   79			while(1)
L_12:
.LINE 79

;   80			// Wait for user to acknowledge to proceed
;   81			getch();
.LINE 81

	CALL	_getch
	JR	L_12
;   82			
;   83			// Unprotect and erase flash
;   84			enableFlashKeyRegister();	// unlock Flash Key Register, so we can write to the Flash Write/Erase protection registers
;   85			FLASH_PROT = 0;				// disable protection on all 8x16KB blocks in the flash
;   86			enableFlashKeyRegister();	// will need to unlock again after previous write to the flash protection register
;   87			FLASH_FDIV = 0x5F;			// Ceiling(18Mhz * 5,1us) = 95, or 0x5F
;   88	
;   89			// Mass erase flash
;   90			FLASH_PGCTL = 0x01;	// mass erase bit enable, start erase all pages
;   91			do {
L_15:
.LINE 91

;   92				value = FLASH_PGCTL;
.LINE 92

	IN0	A,(255)
	LD	(IX+%FFFFFFED),A
;   93			} while(value & 0x01); // wait for completion of erase
.LINE 93

	AND	A,%1
	JR	NZ,L_15
;   94			sendStatus('E', 1, 128);
.LINE 94

	LD	BC,0
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,69
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   95	
;   96			// determine number of pages to write
;   97			pagemax = size/PAGESIZE;
;   98			if(size%PAGESIZE) // last page has less than PAGESIZE bytes
.LINE 98

	LD	BC,1023
	LD	HL,(IX+%FFFFFFFA)
	CALL	__iand
	LD	(IX+%FFFFFFE0),HL
	CALL	__icmpzero
	JR	Z,L_26
;   99			{
;  100				pagemax += 1;
;  101				lastpagebytes = size%PAGESIZE;			
;  102			}
;  103			else lastpagebytes = PAGESIZE; // normal last page
.LINE 103

;  104	
;  105			// write out each page to flash
;  106			for(counter = 0; counter < pagemax; counter++)
.LINE 106

	JR	L_26
L_24:
;  107			{
;  108				if(counter == (pagemax - 1)) // last page to write - might need to write less than PAGESIZE
.LINE 108

	LD	IY,(IX+%FFFFFFE7)
	LEA	HL,IY+%FFFFFFFF
	LD	BC,(IX+%FFFFFFF7)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_22
;  109					fastmemcpy(addressto,addressfrom,lastpagebytes);				
.LINE 109

	LD	BC,(IX+%FFFFFFDD)
	PUSH	BC
	LD	BC,(IX+%FFFFFFEE)
	PUSH	BC
	LD	BC,(IX+%FFFFFFEA)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
;  110				else 
.LINE 110

	JR	L_23
L_22:
;  111					fastmemcpy(addressto,addressfrom,PAGESIZE);
.LINE 111

	LD	BC,1024
	PUSH	BC
	LD	BC,(IX+%FFFFFFEE)
	PUSH	BC
	LD	BC,(IX+%FFFFFFEA)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
L_23:
;  112			
;  113				addressto += PAGESIZE;
.LINE 113

	LD	BC,1024
	LD	HL,(IX+%FFFFFFEA)
	ADD	HL,BC
	LD	(IX+%FFFFFFEA),HL
;  114				addressfrom += PAGESIZE;
.LINE 114

	LD	HL,(IX+%FFFFFFEE)
	ADD	HL,BC
	LD	(IX+%FFFFFFEE),HL
;  115				sendStatus('X', 1, counter+1);
.LINE 115

	XOR	A,A
	LD	E,A
	LD	HL,(IX+%FFFFFFF7)
	LD	A,%1
	CALL	__ladd_b
	LD	C,E
	LD	B,%0
	PUSH	BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	LD	BC,88
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+%FFFFFFF7)
	INC	BC
	LD	(IX+%FFFFFFF7),BC
;  116			}
L_26:
.LINE 116

	LD	BC,(IX+%FFFFFFE7)
	LD	HL,(IX+%FFFFFFF7)
	OR	A,A
	SBC	HL,BC
	JR	C,L_24
;  117			lockFlashKeyRegister();	// lock the flash before WARM reset
.LINE 117

	CALL	_lockFlashKeyRegister
;  118			sendStatus('P', 1, counter); // programming ok
.LINE 118

	LD	BC,(IX+%FFFFFFF7)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	LD	BC,1
	PUSH	BC
	LD	BC,80
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  119		}
;  120		else sendStatus('F', 0, fr); // file not read ok
.LINE 120

	JR	L_32
L_30:
	LD	BC,(IX+%FFFFFFFD)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	LD	BC,0
	PUSH	BC
	LD	BC,70
	PUSH	BC
	CALL	_sendStatus
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  121		while(1);
L_32:
.LINE 121

	JR	L_32
;  122		return 0;
;  123	}
.LINE 123

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_lockFlashKeyRegister               IMPORT  -----   function
;_fastmemcpy                         IMPORT  -----   function
;_getch                              IMPORT  -----   function
;_putch                              IMPORT  -----   function
;_f_close                            IMPORT  -----   function
;_f_read                             IMPORT  -----   function
;_f_open                             IMPORT  -----   function
;_sendStatus                         IMPORT  -----   function
;_fs                                 STATIC    558   variable
;_f_mount                            IMPORT  -----   function
;_init_UART0                         IMPORT  -----   function
;_init_spi                           IMPORT  -----   function
;buffer                             IX-1088   1024   variable
;fil                                  IX-64     29   variable
;lastpagebytes                        IX-35      3   variable
;G_0                                  IX-32      3   variable
;total                                IX-29      4   variable
;pagemax                              IX-25      3   variable
;addressto                            IX-22      3   variable
;value                                IX-19      1   variable
;addressfrom                          IX-18      3   variable
;br                                   IX-15      3   variable
;n                                    IX-12      3   variable
;counter                               IX-9      3   variable
;size                                  IX-6      3   variable
;fr                                    IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 1100 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",123,"_main"
	SEGMENT STRSECT
L__0:
	DB	0
L__1:
	DB	"MOS.bin"
	DB	0
L__3:
	DB	"video.ino.bin"
	DB	0
	XREF _fastmemcpy:ROM
	XREF _lockFlashKeyRegister:ROM
	XREF _init_UART0:ROM
	XREF _getch:ROM
	XREF _putch:ROM
	XREF _sendStatus:ROM
	XREF _init_spi:ROM
	XREF _f_mount:ROM
	XREF _f_read:ROM
	XREF _f_close:ROM
	XREF _f_open:ROM
	XREF __ladd:ROM
	XREF __iand:ROM
	XREF __itol:ROM
	XREF __icmpzero:ROM
	XREF __ladd_b:ROM
	XDEF _main
	XDEF _fs
	END
