Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED21-Oct-23     16:06:26     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "NONAME0",558
                           A     9    .DEFINE "fs_type"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "pdrv"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "n_fats"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 12
                           A    23    .ENDEF
                           A    24    .DEFINE "wflag"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 12
                           A    28    .ENDEF
                           A    29    .DEFINE "fsi_flag"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 12
                           A    33    .ENDEF
                           A    34    .DEFINE "id"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 13
                           A    38    .ENDEF
                           A    39    .DEFINE "n_rootdir"
                           A    40    .VALUE 7
                           A    41    .CLASS 8
                           A    42    .TYPE 13
                           A    43    .ENDEF
                           A    44    .DEFINE "csize"
                           A    45    .VALUE 9
                           A    46    .CLASS 8
                           A    47    .TYPE 13
                           A    48    .ENDEF
                           A    49    .DEFINE "lfnbuf"
                           A    50    .VALUE 11
                           A    51    .CLASS 8
                           A    52    .TYPE 45
                           A    53    .ENDEF
                           A    54    .DEFINE "cdir"
                           A    55    .VALUE 14
                           A    56    .CLASS 8
                           A    57    .TYPE 15
                           A    58    .ENDEF
                           A    59    .DEFINE "n_fatent"
                           A    60    .VALUE 18
                           A    61    .CLASS 8
                           A    62    .TYPE 15
                           A    63    .ENDEF
                           A    64    .DEFINE "fsize"
                           A    65    .VALUE 22
                           A    66    .CLASS 8
                           A    67    .TYPE 15
                           A    68    .ENDEF
                           A    69    .DEFINE "volbase"
                           A    70    .VALUE 26
                           A    71    .CLASS 8
                           A    72    .TYPE 15
                           A    73    .ENDEF
                           A    74    .DEFINE "fatbase"
                           A    75    .VALUE 30
                           A    76    .CLASS 8
                           A    77    .TYPE 15
                           A    78    .ENDEF
                           A    79    .DEFINE "dirbase"
                           A    80    .VALUE 34
                           A    81    .CLASS 8
                           A    82    .TYPE 15
                           A    83    .ENDEF
                           A    84    .DEFINE "database"
                           A    85    .VALUE 38
                           A    86    .CLASS 8
                           A    87    .TYPE 15
                           A    88    .ENDEF
                           A    89    .DEFINE "winsect"
                           A    90    .VALUE 42
                           A    91    .CLASS 8
                           A    92    .TYPE 15
                           A    93    .ENDEF
                           A    94    .DEFINE "win"
                           A    95    .VALUE 46
                           A    96    .CLASS 8
                           A    97    .DIM 512
                           A    98    .TYPE 108
                           A    99    .ENDEF
                           A   100    .ENDREC "NONAME0"
                           A   101    .BEGREC "NONAME1",15
                           A   102    .DEFINE "fs"
                           A   103    .VALUE 0
                           A   104    .CLASS 8
                           A   105    .TAG "NONAME0"
                           A   106    .TYPE 40
                           A   107    .ENDEF
                           A   108    .DEFINE "id"
                           A   109    .VALUE 3
                           A   110    .CLASS 8
                           A   111    .TYPE 13
                           A   112    .ENDEF
                           A   113    .DEFINE "attr"
                           A   114    .VALUE 5
                           A   115    .CLASS 8
                           A   116    .TYPE 12
                           A   117    .ENDEF
                           A   118    .DEFINE "stat"
                           A   119    .VALUE 6
                           A   120    .CLASS 8
                           A   121    .TYPE 12
                           A   122    .ENDEF
                           A   123    .DEFINE "sclust"
                           A   124    .VALUE 7
                           A   125    .CLASS 8
                           A   126    .TYPE 15
                           A   127    .ENDEF
                           A   128    .DEFINE "objsize"
                           A   129    .VALUE 11
                           A   130    .CLASS 8
                           A   131    .TYPE 15
                           A   132    .ENDEF
                           A   133    .ENDREC "NONAME1"
                           A   134    .BEGREC "NONAME2",29
                           A   135    .DEFINE "obj"
                           A   136    .VALUE 0
                           A   137    .CLASS 8
                           A   138    .TAG "NONAME1"
                           A   139    .TYPE 8
                           A   140    .ENDEF
                           A   141    .DEFINE "flag"
                           A   142    .VALUE 15
                           A   143    .CLASS 8
                           A   144    .TYPE 12
                           A   145    .ENDEF
                           A   146    .DEFINE "err"
                           A   147    .VALUE 16
                           A   148    .CLASS 8
                           A   149    .TYPE 12
                           A   150    .ENDEF
                           A   151    .DEFINE "fptr"
                           A   152    .VALUE 17
                           A   153    .CLASS 8
                           A   154    .TYPE 15
                           A   155    .ENDEF
                           A   156    .DEFINE "clust"
                           A   157    .VALUE 21
                           A   158    .CLASS 8
                           A   159    .TYPE 15
                           A   160    .ENDEF
                           A   161    .DEFINE "sect"
                           A   162    .VALUE 25
                           A   163    .CLASS 8
                           A   164    .TYPE 15
                           A   165    .ENDEF
                           A   166    .ENDREC "NONAME2"
                           A   167    .BEGREC "NONAME3",46
                           A   168    .DEFINE "obj"
                           A   169    .VALUE 0
                           A   170    .CLASS 8
                           A   171    .TAG "NONAME1"
                           A   172    .TYPE 8
                           A   173    .ENDEF
                           A   174    .DEFINE "dptr"
                           A   175    .VALUE 15
                           A   176    .CLASS 8
                           A   177    .TYPE 15
                           A   178    .ENDEF
                           A   179    .DEFINE "clust"
                           A   180    .VALUE 19
                           A   181    .CLASS 8
                           A   182    .TYPE 15
                           A   183    .ENDEF
                           A   184    .DEFINE "sect"
                           A   185    .VALUE 23
                           A   186    .CLASS 8
                           A   187    .TYPE 15
                           A   188    .ENDEF
                           A   189    .DEFINE "dir"
                           A   190    .VALUE 27
                           A   191    .CLASS 8
                           A   192    .TYPE 44
                           A   193    .ENDEF
                           A   194    .DEFINE "fn"
                           A   195    .VALUE 30
                           A   196    .CLASS 8
                           A   197    .DIM 12
                           A   198    .TYPE 108
                           A   199    .ENDEF
                           A   200    .DEFINE "blk_ofs"
                           A   201    .VALUE 42
                           A   202    .CLASS 8
                           A   203    .TYPE 15
                           A   204    .ENDEF
                           A   205    .ENDREC "NONAME3"
                           A   206    .BEGREC "NONAME4",278
                           A   207    .DEFINE "fsize"
                           A   208    .VALUE 0
                           A   209    .CLASS 8
                           A   210    .TYPE 15
                           A   211    .ENDEF
                           A   212    .DEFINE "fdate"
                           A   213    .VALUE 4
                           A   214    .CLASS 8
                           A   215    .TYPE 13
                           A   216    .ENDEF
                           A   217    .DEFINE "ftime"
                           A   218    .VALUE 6
                           A   219    .CLASS 8
                           A   220    .TYPE 13
                           A   221    .ENDEF
                           A   222    .DEFINE "fattrib"
                           A   223    .VALUE 8
                           A   224    .CLASS 8
                           A   225    .TYPE 12
                           A   226    .ENDEF
                           A   227    .DEFINE "altname"
                           A   228    .VALUE 9
                           A   229    .CLASS 8
                           A   230    .DIM 13
                           A   231    .TYPE 98
                           A   232    .ENDEF
                           A   233    .DEFINE "fname"
                           A   234    .VALUE 22
                           A   235    .CLASS 8
                           A   236    .DIM 256
                           A   237    .TYPE 98
                           A   238    .ENDEF
                           A   239    .ENDREC "NONAME4"
                           A   240    .BEGREC "NONAME5",12
                           A   241    .DEFINE "fmt"
                           A   242    .VALUE 0
                           A   243    .CLASS 8
                           A   244    .TYPE 12
                           A   245    .ENDEF
                           A   246    .DEFINE "n_fat"
                           A   247    .VALUE 1
                           A   248    .CLASS 8
                           A   249    .TYPE 12
                           A   250    .ENDEF
                           A   251    .DEFINE "align"
                           A   252    .VALUE 2
                           A   253    .CLASS 8
                           A   254    .TYPE 14
                           A   255    .ENDEF
                           A   256    .DEFINE "n_root"
                           A   257    .VALUE 5
                           A   258    .CLASS 8
                           A   259    .TYPE 14
                           A   260    .ENDEF
                           A   261    .DEFINE "au_size"
                           A   262    .VALUE 8
                           A   263    .CLASS 8
                           A   264    .TYPE 15
                           A   265    .ENDEF
                           A   266    .ENDREC "NONAME5"
                           A   267    ;    1	#include <ez80.h>
                           A   268    ;    2	#include "src_fatfs\ff.h"
                           A   269    ;    3	#include "spi.h"
                           A   270    ;    4	#include "defines.h"
                           A   271    ;    5	#include <stdint.h>
                           A   272    ;    6	#include "agontimer.h"
                           A   273    ;    7	
                           A   274    ;    8	#define PAGESIZE	1024
                           A   275    ;    9	#define FLASHPAGES	128
                           A   276    ;   10	#define FLASHSTART	0x0
                           A   277    ;   11	#define BAUDRATE	500000
                           A   278    ;   12	
                           A   279    ;   13	#define MOSFILENAME	"MOS.bin"
                           A   280    ;   14	#define LOADADDRESS	0x50000
                           A   281    ;   15	
                           A   282    ;   16	enum {
                           A   283    ;   17		FEEDBACK_OPEN,
                           A   284    ;   18		FEEDBACK_FILEDONE,
                           A   285    ;   19		FEEDBACK_PROCEED,
                           A   286    ;   20		FEEDBACK_ERASEDONE,
                           A   287    ;   21		FEEDBACK_PAGEWRITTEN,
                           A   288    ;   22	};
                           A   289    ;   23	
                           A   290    ;   24	
                           A   291    ;   25	// Blocking non-interrupt putch to UART
                           A   292    ;   26	int putch(int c)
                           A   293    ;   27	{
040145                     A   294    _putch:
                           A   295    .DEFINE "_putch"
                           A   296    
                           A   297    .VALUE _putch
                           A   298    
                           A   299    .CLASS 2
                           A   300    
                           A   301    .TYPE 68
                           A   302    
                           A   303    .ENDEF
                           A   304    
                           A   305    .BEGFUNC "putch",27,"_putch"
                           A   306    
                           A   307    .LINE 27
                           A   308    
                           A   309    .DEFINE "c"
                           A   310    
                           A   311    .CLASS 65
                           A   312    
                           A   313    .VALUE 6
                           A   314    
                           A   315    .TYPE 4
                           A   316    
040145 DDE5                A   317    	PUSH	IX
040147 DD210000 00         A   318    	LD	IX,0
04014C DD39                A   319    	ADD	IX,SP
                           A   320    .ENDEF
                           A   321    
                           A   322    ;   28		//UINT8 lsr,temt;
                           A   323    ;   29		
                           A   324    ;   30		while((UART0_LSR & 0x40) == 0);
04014E                     A   325    L_1:
                           A   326    .LINE 30
                           A   327    
04014E ED38C5              A   328    	IN0	A,(197)
040151 E640                A   329    	AND	A,%40
040153 B7ED62              A   330    	UEXT	HL
040156 6F                  A   331    	LD	L,A
040157 CD C4 42 04         A   332    	CALL	__icmpzero
04015B 28 F1               A   333    	JR	Z,L_1
                           A   334    ;   31		UART0_THR = c;
                           A   335    .LINE 31
                           A   336    
04015D DD7E06              A   337    	LD	A,(IX+%6)
040160 ED39C0              A   338    	OUT0	(192),A
                           A   339    ;   32		return c;
                           A   340    .LINE 32
                           A   341    
040163 DD2706              A   342    	LD	HL,(IX+%6)
                           A   343    ;   33	}
                           A   344    .LINE 33
                           A   345    
040166 DDF9                A   346    	LD	SP,IX
040168 DDE1                A   347    	POP	IX
04016A C9                  A   348    	RET	
                           A   349    
                           A   350    
                           A   351    ;**************************** _putch **********
                           A   352    ;Name                         Addr/Register   S
                           A   353    ;c                                     IX+6    
                           A   354    
                           A   355    
                           A   356    ; Stack Frame Size: 9 (bytes)
                           A   357    ;       Spill Code: 0 (instruction)
                           A   358    
                           A   359    
                           A   360    .ENDFUNC "putch",33,"_putch"
                           A   361    	SEGMENT BSS
04452B                     A   362    _fs:
04452B                     A   363    	DS	558
                           A   364    .DEFINE "fs"
                           A   365    .ALIAS "_fs"
                           A   366    .CLASS 83
                           A   367    .VALUE _fs
                           A   368    .TAG "NONAME0"
                           A   369    .TYPE 8
                           A   370    .ENDEF
                           A   371    ;   34	
                           A   372    ;   35	extern void init_UART0(void);
                           A   373    ;   36	
                           A   374    ;   37	extern void enableFlashKeyRegister(void
                           A   375    ;   38	extern void lockFlashKeyRegister(void);
                           A   376    ;   39	extern void fastmemcpy(UINT24 destinati
                           A   377    ;   40	extern void reset(void);
                           A   378    ;   41	
                           A   379    ;   42	FATFS 	fs;
                           A   380    	SEGMENT CODE
                           A   381    ;   43	
                           A   382    ;   44	int main(int argc, char * argv[]) {
04016B                     A   383    _main:
                           A   384    .DEFINE "_main"
                           A   385    
                           A   386    .VALUE _main
                           A   387    
                           A   388    .CLASS 2
                           A   389    
                           A   390    .TYPE 68
                           A   391    
                           A   392    .ENDEF
                           A   393    
                           A   394    .BEGFUNC "main",44,"_main"
                           A   395    
                           A   396    .LINE 44
                           A   397    
                           A   398    .DEFINE "argc"
                           A   399    
                           A   400    .CLASS 65
                           A   401    
                           A   402    .VALUE 6
                           A   403    
                           A   404    .TYPE 4
                           A   405    
                           A   406    .ENDEF
                           A   407    
                           A   408    .DEFINE "argv"
                           A   409    
                           A   410    .CLASS 65
                           A   411    
                           A   412    .VALUE 9
                           A   413    
                           A   414    .TYPE 290
                           A   415    
                           A   416    .ENDEF
                           A   417    
                           A   418    .DEFINE "counter"
                           A   419    
                           A   420    .CLASS 65
                           A   421    
                           A   422    .VALUE -3
                           A   423    
                           A   424    .TYPE 14
                           A   425    
                           A   426    .ENDEF
                           A   427    
                           A   428    .DEFINE "addressto"
                           A   429    
                           A   430    .CLASS 65
                           A   431    
                           A   432    .VALUE -6
                           A   433    
                           A   434    .TYPE 14
                           A   435    
                           A   436    .ENDEF
                           A   437    
                           A   438    .DEFINE "addressfrom"
                           A   439    
                           A   440    .CLASS 65
                           A   441    
                           A   442    .VALUE -9
                           A   443    
                           A   444    .TYPE 14
                           A   445    
                           A   446    .ENDEF
                           A   447    
                           A   448    .DEFINE "value"
                           A   449    
                           A   450    .CLASS 65
                           A   451    
                           A   452    .VALUE -10
                           A   453    
                           A   454    .TYPE 12
                           A   455    
                           A   456    .ENDEF
                           A   457    
                           A   458    .DEFINE "pagemax"
                           A   459    
                           A   460    .CLASS 65
                           A   461    
                           A   462    .VALUE -13
                           A   463    
                           A   464    .TYPE 14
                           A   465    
                           A   466    .ENDEF
                           A   467    
                           A   468    .DEFINE "size"
                           A   469    
                           A   470    .CLASS 65
                           A   471    
                           A   472    .VALUE -19
                           A   473    
                           A   474    .TYPE 14
                           A   475    
                           A   476    .ENDEF
                           A   477    
                           A   478    .DEFINE "lastpagebytes"
                           A   479    
                           A   480    .CLASS 65
                           A   481    
                           A   482    .VALUE -22
                           A   483    
                           A   484    .TYPE 14
                           A   485    
                           A   486    .ENDEF
                           A   487    
04016B DDE5                A   488    	PUSH	IX
04016D DD210000 00         A   489    	LD	IX,0
040172 DD39                A   490    	ADD	IX,SP
040174 ED22EA              A   491    	LEA	HL,IX+%FFFFFFEA
040177 F9                  A   492    	LD	SP,HL
                           A   493    ;   45		FRESULT	fr;
                           A   494    ;   46		FIL	   	fil;
                           A   495    ;   47		UINT24  br;	
                           A   496    ;   48		void * 	dest;
                           A   497    ;   49		UINT24 size;
                           A   498    ;   50		
                           A   499    ;   51		UINT24	counter,pagemax, lastpageby
                           A   500    ;   52		UINT24 addressto,addressfrom;
                           A   501    ;   53		UINT8	value;
                           A   502    ;   54		UINT24 timer;
                           A   503    ;   55		init_spi();
                           A   504    .LINE 55
                           A   505    
040178 CD E3 3D 04         A   506    	CALL	_init_spi
                           A   507    ;   56		init_UART0();
                           A   508    .LINE 56
                           A   509    
04017C CD A1 3F 04         A   510    	CALL	_init_UART0
                           A   511    ;   57	
                           A   512    ;   58	
                           A   513    ;   59		while(1) {
040180                     A   514    L_5:
                           A   515    .LINE 59
                           A   516    
                           A   517    ;   60			putch('A');
                           A   518    .LINE 60
                           A   519    
040180 01410000            A   520    	LD	BC,65
040184 C5                  A   521    	PUSH	BC
040185 CD 45 01 04         A   522    	CALL	_putch
040189 C1                  A   523    	POP	BC
                           A   524    ;   61			delayms(500);
                           A   525    .LINE 61
                           A   526    
04018A 01F40100            A   527    	LD	BC,500
04018E C5                  A   528    	PUSH	BC
04018F CD 03 40 04         A   529    	CALL	_delayms
040193 C1                  A   530    	POP	BC
                           A   531    ;   62			putch('X');
                           A   532    .LINE 62
                           A   533    
040194 01580000            A   534    	LD	BC,88
040198 C5                  A   535    	PUSH	BC
040199 CD 45 01 04         A   536    	CALL	_putch
04019D C1                  A   537    	POP	BC
                           A   538    ;   63			delayms(500);
                           A   539    .LINE 63
                           A   540    
04019E 01F40100            A   541    	LD	BC,500
0401A2 C5                  A   542    	PUSH	BC
0401A3 CD 03 40 04         A   543    	CALL	_delayms
0401A7 C1                  A   544    	POP	BC
0401A8 18 D6               A   545    	JR	L_5
                           A   546    ;   64		}
                           A   547    ;   65	
                           A   548    ;   66	
                           A   549    ;   67	
                           A   550    ;   68	
                           A   551    ;   69	
                           A   552    ;   70		f_mount(&fs, "", 1);
                           A   553    ;   71	
                           A   554    ;   72		addressto = FLASHSTART;
                           A   555    ;   73		addressfrom = LOADADDRESS;
                           A   556    ;   74	
                           A   557    ;   75		fr = f_open(&fil, MOSFILENAME, FA_R
                           A   558    ;   76		if(fr == FR_OK) {
                           A   559    ;   77	
                           A   560    ;   78			di();
                           A   561    ;   79			size = f_size(&fil);
                           A   562    ;   80			//waitZDI(FEEDBACK_OPEN, size);
                           A   563    ;   81	
                           A   564    ;   82			fr = f_read(&fil, (void *)LOADA
                           A   565    ;   83	
                           A   566    ;   84			f_close(&fil);
                           A   567    ;   85			//waitZDI(FEEDBACK_FILEDONE, br
                           A   568    ;   86			
                           A   569    ;   87			// Wait for user to acknowledge
                           A   570    ;   88			//waitZDI(FEEDBACK_PROCEED, 0);
                           A   571    ;   89			
                           A   572    ;   90			// Unprotect and erase flash
                           A   573    ;   91			enableFlashKeyRegister();	// 
                           A   574    ;   92			FLASH_PROT = 0;				// 
                           A   575    ;   93			enableFlashKeyRegister();	// 
                           A   576    ;   94			FLASH_FDIV = 0x5F;			// 
                           A   577    ;   95	
                           A   578    ;   96			// Erase all flash pages
                           A   579    ;   97			for(counter = 0; counter < FLAS
0401AA                     A   580    L_10:
                           A   581    .LINE 97
                           A   582    
                           A   583    ;   98			{
                           A   584    ;   99				FLASH_PAGE = counter;
                           A   585    .LINE 99
                           A   586    
0401AA DD7EFD              A   587    	LD	A,(IX+%FFFFFFFD)
0401AD ED39FC              A   588    	OUT0	(252),A
                           A   589    ;  100				FLASH_PGCTL = 0x02;			
                           A   590    .LINE 100
                           A   591    
0401B0 3E02                A   592    	LD	A,%2
0401B2 ED39FF              A   593    	OUT0	(255),A
                           A   594    ;  101	
                           A   595    ;  102				do
0401B5                     A   596    L_8:
                           A   597    .LINE 102
                           A   598    
                           A   599    ;  103				{
                           A   600    ;  104					value = FLASH_PGCTL;
                           A   601    .LINE 104
                           A   602    
0401B5 ED38FF              A   603    	IN0	A,(255)
0401B8 DD77F6              A   604    	LD	(IX+%FFFFFFF6),A
                           A   605    ;  105				}
                           A   606    ;  106				while(value & 0x02);// wait
                           A   607    .LINE 106
                           A   608    
0401BB E602                A   609    	AND	A,%2
0401BD 20 F6               A   610    	JR	NZ,L_8
0401BF DD07FD              A   611    	LD	BC,(IX+%FFFFFFFD)
0401C2 03                  A   612    	INC	BC
0401C3 DD0FFD              A   613    	LD	(IX+%FFFFFFFD),BC
0401C6 01800000            A   614    	LD	BC,128
0401CA DD27FD              A   615    	LD	HL,(IX+%FFFFFFFD)
0401CD B7                  A   616    	OR	A,A
0401CE ED42                A   617    	SBC	HL,BC
0401D0 38 D8               A   618    	JR	C,L_10
                           A   619    ;  107			}
                           A   620    ;  108			
                           A   621    ;  109			// determine number of pages to
                           A   622    ;  110			pagemax = size/PAGESIZE;
                           A   623    ;  111			if(size%PAGESIZE) // last page 
                           A   624    .LINE 111
                           A   625    
0401D2 01FF0300            A   626    	LD	BC,1023
0401D6 DD27ED              A   627    	LD	HL,(IX+%FFFFFFED)
0401D9 CD D3 43 04         A   628    	CALL	__iand
0401DD DD2FF0              A   629    	LD	(IX+%FFFFFFF0),HL
0401E0 CD C4 42 04         A   630    	CALL	__icmpzero
                           A   631    ;  112			{
                           A   632    ;  113				pagemax += 1;
                           A   633    ;  114				lastpagebytes = size%PAGESI
                           A   634    ;  115			}
                           A   635    ;  116			else lastpagebytes = PAGESIZE; 
                           A   636    .LINE 116
                           A   637    
                           A   638    ;  117	
                           A   639    ;  118			//waitZDI(FEEDBACK_ERASEDONE, p
                           A   640    ;  119	
                           A   641    ;  120			// write out each page to flash
                           A   642    ;  121			for(counter = 0; counter < page
                           A   643    .LINE 121
                           A   644    
0401E4 01000000            A   645    	LD	BC,0
0401E8 DD0FFD              A   646    	LD	(IX+%FFFFFFFD),BC
0401EB 18 50               A   647    	JR	L_22
0401ED                     A   648    L_20:
                           A   649    ;  122			{
                           A   650    ;  123				if(counter == (pagemax - 1)
                           A   651    .LINE 123
                           A   652    
0401ED DD31F3              A   653    	LD	IY,(IX+%FFFFFFF3)
0401F0 ED23FF              A   654    	LEA	HL,IY+%FFFFFFFF
0401F3 DD07FD              A   655    	LD	BC,(IX+%FFFFFFFD)
0401F6 B7                  A   656    	OR	A,A
0401F7 ED42                A   657    	SBC	HL,BC
0401F9 20 15               A   658    	JR	NZ,L_18
                           A   659    ;  124					fastmemcpy(addressto,ad
                           A   660    .LINE 124
                           A   661    
0401FB DD07EA              A   662    	LD	BC,(IX+%FFFFFFEA)
0401FE C5                  A   663    	PUSH	BC
0401FF DD07F7              A   664    	LD	BC,(IX+%FFFFFFF7)
040202 C5                  A   665    	PUSH	BC
040203 DD07FA              A   666    	LD	BC,(IX+%FFFFFFFA)
040206 C5                  A   667    	PUSH	BC
040207 CD 26 01 04         A   668    	CALL	_fastmemcpy
04020B C1                  A   669    	POP	BC
04020C C1                  A   670    	POP	BC
04020D C1                  A   671    	POP	BC
                           A   672    ;  125				else 
                           A   673    .LINE 125
                           A   674    
04020E 18 14               A   675    	JR	L_19
040210                     A   676    L_18:
                           A   677    ;  126					fastmemcpy(addressto,ad
                           A   678    .LINE 126
                           A   679    
040210 01000400            A   680    	LD	BC,1024
040214 C5                  A   681    	PUSH	BC
040215 DD07F7              A   682    	LD	BC,(IX+%FFFFFFF7)
040218 C5                  A   683    	PUSH	BC
040219 DD07FA              A   684    	LD	BC,(IX+%FFFFFFFA)
04021C C5                  A   685    	PUSH	BC
04021D CD 26 01 04         A   686    	CALL	_fastmemcpy
040221 C1                  A   687    	POP	BC
040222 C1                  A   688    	POP	BC
040223 C1                  A   689    	POP	BC
040224                     A   690    L_19:
                           A   691    ;  127			
                           A   692    ;  128				addressto += PAGESIZE;
                           A   693    .LINE 128
                           A   694    
040224 01000400            A   695    	LD	BC,1024
040228 DD27FA              A   696    	LD	HL,(IX+%FFFFFFFA)
04022B 09                  A   697    	ADD	HL,BC
04022C DD2FFA              A   698    	LD	(IX+%FFFFFFFA),HL
                           A   699    ;  129				addressfrom += PAGESIZE;
                           A   700    .LINE 129
                           A   701    
04022F DD27F7              A   702    	LD	HL,(IX+%FFFFFFF7)
040232 09                  A   703    	ADD	HL,BC
040233 DD2FF7              A   704    	LD	(IX+%FFFFFFF7),HL
040236 DD07FD              A   705    	LD	BC,(IX+%FFFFFFFD)
040239 03                  A   706    	INC	BC
04023A DD0FFD              A   707    	LD	(IX+%FFFFFFFD),BC
                           A   708    ;  130				//timer = 0;
                           A   709    ;  131				//while(timer++ < 32768);
                           A   710    ;  132				////waitZDI(FEEDBACK_PAGEWR
                           A   711    ;  133			}
04023D                     A   712    L_22:
                           A   713    .LINE 133
                           A   714    
04023D DD07F3              A   715    	LD	BC,(IX+%FFFFFFF3)
040240 DD27FD              A   716    	LD	HL,(IX+%FFFFFFFD)
040243 B7                  A   717    	OR	A,A
040244 ED42                A   718    	SBC	HL,BC
040246 38 A5               A   719    	JR	C,L_20
                           A   720    ;  134			lockFlashKeyRegister();	// lock
                           A   721    .LINE 134
                           A   722    
040248 CD 11 01 04         A   723    	CALL	_lockFlashKeyRegister
                           A   724    ;  135			//waitZDI(FEEDBACK_PAGEWRITTEN,
                           A   725    ;  136		}
                           A   726    ;  137		else //waitZDI(FEEDBACK_OPEN, 0);
                           A   727    .LINE 137
                           A   728    
04024C 18 02               A   729    	JR	L_29
                           A   730    ;  138		while(1);
04024E                     A   731    L_26:
                           A   732    .LINE 138
                           A   733    
04024E 18 FE               A   734    	JR	L_26
040250                     A   735    L_29:
                           A   736    ;  139		return 0;
                           A   737    .LINE 139
                           A   738    
040250 B7                  A   739    	OR	A,A
040251 ED62                A   740    	SBC	HL,HL
                           A   741    ;  140	}
                           A   742    .LINE 140
                           A   743    
040253 DDF9                A   744    	LD	SP,IX
040255 DDE1                A   745    	POP	IX
040257 C9                  A   746    	RET	
                           A   747    
                           A   748    
                           A   749    ;**************************** _main ***********
                           A   750    ;Name                         Addr/Register   S
                           A   751    ;_lockFlashKeyRegister               IMPORT  --
                           A   752    ;_fastmemcpy                         IMPORT  --
                           A   753    ;_delayms                            IMPORT  --
                           A   754    ;_init_UART0                         IMPORT  --
                           A   755    ;_init_spi                           IMPORT  --
                           A   756    ;lastpagebytes                        IX-22    
                           A   757    ;size                                 IX-19    
                           A   758    ;G_0                                  IX-16    
                           A   759    ;pagemax                              IX-13    
                           A   760    ;value                                IX-10    
                           A   761    ;addressfrom                           IX-9    
                           A   762    ;addressto                             IX-6    
                           A   763    ;counter                               IX-3    
                           A   764    ;argv                                  IX+9    
                           A   765    ;argc                                  IX+6    
                           A   766    
                           A   767    
                           A   768    ; Stack Frame Size: 34 (bytes)
                           A   769    ;       Spill Code: 0 (instruction)
                           A   770    
                           A   771    
                           A   772    .ENDFUNC "main",140,"_main"
                           A   773    	XREF _fastmemcpy:ROM
                           A   774    	XREF _lockFlashKeyRegister:ROM
                           A   775    	XREF _init_UART0:ROM
                           A   776    	XREF _delayms:ROM
                           A   777    	XREF _init_spi:ROM
                           A   778    	XREF __iand:ROM
                           A   779    	XREF __icmpzero:ROM
                           A   780    	XDEF _main
                           A   781    	XDEF _fs
                           A   782    	XDEF _putch
                           A   783    	END


Errors: 0
Warnings: 0
Lines Assembled: 784
