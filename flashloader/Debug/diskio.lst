Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED22-Oct-23     19:01:07     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\src_fatfs\diskio.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "NONAME0",558
                           A     9    .DEFINE "fs_type"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "pdrv"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "n_fats"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 12
                           A    23    .ENDEF
                           A    24    .DEFINE "wflag"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 12
                           A    28    .ENDEF
                           A    29    .DEFINE "fsi_flag"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 12
                           A    33    .ENDEF
                           A    34    .DEFINE "id"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 13
                           A    38    .ENDEF
                           A    39    .DEFINE "n_rootdir"
                           A    40    .VALUE 7
                           A    41    .CLASS 8
                           A    42    .TYPE 13
                           A    43    .ENDEF
                           A    44    .DEFINE "csize"
                           A    45    .VALUE 9
                           A    46    .CLASS 8
                           A    47    .TYPE 13
                           A    48    .ENDEF
                           A    49    .DEFINE "lfnbuf"
                           A    50    .VALUE 11
                           A    51    .CLASS 8
                           A    52    .TYPE 45
                           A    53    .ENDEF
                           A    54    .DEFINE "cdir"
                           A    55    .VALUE 14
                           A    56    .CLASS 8
                           A    57    .TYPE 15
                           A    58    .ENDEF
                           A    59    .DEFINE "n_fatent"
                           A    60    .VALUE 18
                           A    61    .CLASS 8
                           A    62    .TYPE 15
                           A    63    .ENDEF
                           A    64    .DEFINE "fsize"
                           A    65    .VALUE 22
                           A    66    .CLASS 8
                           A    67    .TYPE 15
                           A    68    .ENDEF
                           A    69    .DEFINE "volbase"
                           A    70    .VALUE 26
                           A    71    .CLASS 8
                           A    72    .TYPE 15
                           A    73    .ENDEF
                           A    74    .DEFINE "fatbase"
                           A    75    .VALUE 30
                           A    76    .CLASS 8
                           A    77    .TYPE 15
                           A    78    .ENDEF
                           A    79    .DEFINE "dirbase"
                           A    80    .VALUE 34
                           A    81    .CLASS 8
                           A    82    .TYPE 15
                           A    83    .ENDEF
                           A    84    .DEFINE "database"
                           A    85    .VALUE 38
                           A    86    .CLASS 8
                           A    87    .TYPE 15
                           A    88    .ENDEF
                           A    89    .DEFINE "winsect"
                           A    90    .VALUE 42
                           A    91    .CLASS 8
                           A    92    .TYPE 15
                           A    93    .ENDEF
                           A    94    .DEFINE "win"
                           A    95    .VALUE 46
                           A    96    .CLASS 8
                           A    97    .DIM 512
                           A    98    .TYPE 108
                           A    99    .ENDEF
                           A   100    .ENDREC "NONAME0"
                           A   101    .BEGREC "NONAME1",15
                           A   102    .DEFINE "fs"
                           A   103    .VALUE 0
                           A   104    .CLASS 8
                           A   105    .TAG "NONAME0"
                           A   106    .TYPE 40
                           A   107    .ENDEF
                           A   108    .DEFINE "id"
                           A   109    .VALUE 3
                           A   110    .CLASS 8
                           A   111    .TYPE 13
                           A   112    .ENDEF
                           A   113    .DEFINE "attr"
                           A   114    .VALUE 5
                           A   115    .CLASS 8
                           A   116    .TYPE 12
                           A   117    .ENDEF
                           A   118    .DEFINE "stat"
                           A   119    .VALUE 6
                           A   120    .CLASS 8
                           A   121    .TYPE 12
                           A   122    .ENDEF
                           A   123    .DEFINE "sclust"
                           A   124    .VALUE 7
                           A   125    .CLASS 8
                           A   126    .TYPE 15
                           A   127    .ENDEF
                           A   128    .DEFINE "objsize"
                           A   129    .VALUE 11
                           A   130    .CLASS 8
                           A   131    .TYPE 15
                           A   132    .ENDEF
                           A   133    .ENDREC "NONAME1"
                           A   134    .BEGREC "NONAME2",29
                           A   135    .DEFINE "obj"
                           A   136    .VALUE 0
                           A   137    .CLASS 8
                           A   138    .TAG "NONAME1"
                           A   139    .TYPE 8
                           A   140    .ENDEF
                           A   141    .DEFINE "flag"
                           A   142    .VALUE 15
                           A   143    .CLASS 8
                           A   144    .TYPE 12
                           A   145    .ENDEF
                           A   146    .DEFINE "err"
                           A   147    .VALUE 16
                           A   148    .CLASS 8
                           A   149    .TYPE 12
                           A   150    .ENDEF
                           A   151    .DEFINE "fptr"
                           A   152    .VALUE 17
                           A   153    .CLASS 8
                           A   154    .TYPE 15
                           A   155    .ENDEF
                           A   156    .DEFINE "clust"
                           A   157    .VALUE 21
                           A   158    .CLASS 8
                           A   159    .TYPE 15
                           A   160    .ENDEF
                           A   161    .DEFINE "sect"
                           A   162    .VALUE 25
                           A   163    .CLASS 8
                           A   164    .TYPE 15
                           A   165    .ENDEF
                           A   166    .ENDREC "NONAME2"
                           A   167    .BEGREC "NONAME3",46
                           A   168    .DEFINE "obj"
                           A   169    .VALUE 0
                           A   170    .CLASS 8
                           A   171    .TAG "NONAME1"
                           A   172    .TYPE 8
                           A   173    .ENDEF
                           A   174    .DEFINE "dptr"
                           A   175    .VALUE 15
                           A   176    .CLASS 8
                           A   177    .TYPE 15
                           A   178    .ENDEF
                           A   179    .DEFINE "clust"
                           A   180    .VALUE 19
                           A   181    .CLASS 8
                           A   182    .TYPE 15
                           A   183    .ENDEF
                           A   184    .DEFINE "sect"
                           A   185    .VALUE 23
                           A   186    .CLASS 8
                           A   187    .TYPE 15
                           A   188    .ENDEF
                           A   189    .DEFINE "dir"
                           A   190    .VALUE 27
                           A   191    .CLASS 8
                           A   192    .TYPE 44
                           A   193    .ENDEF
                           A   194    .DEFINE "fn"
                           A   195    .VALUE 30
                           A   196    .CLASS 8
                           A   197    .DIM 12
                           A   198    .TYPE 108
                           A   199    .ENDEF
                           A   200    .DEFINE "blk_ofs"
                           A   201    .VALUE 42
                           A   202    .CLASS 8
                           A   203    .TYPE 15
                           A   204    .ENDEF
                           A   205    .ENDREC "NONAME3"
                           A   206    .BEGREC "NONAME4",278
                           A   207    .DEFINE "fsize"
                           A   208    .VALUE 0
                           A   209    .CLASS 8
                           A   210    .TYPE 15
                           A   211    .ENDEF
                           A   212    .DEFINE "fdate"
                           A   213    .VALUE 4
                           A   214    .CLASS 8
                           A   215    .TYPE 13
                           A   216    .ENDEF
                           A   217    .DEFINE "ftime"
                           A   218    .VALUE 6
                           A   219    .CLASS 8
                           A   220    .TYPE 13
                           A   221    .ENDEF
                           A   222    .DEFINE "fattrib"
                           A   223    .VALUE 8
                           A   224    .CLASS 8
                           A   225    .TYPE 12
                           A   226    .ENDEF
                           A   227    .DEFINE "altname"
                           A   228    .VALUE 9
                           A   229    .CLASS 8
                           A   230    .DIM 13
                           A   231    .TYPE 98
                           A   232    .ENDEF
                           A   233    .DEFINE "fname"
                           A   234    .VALUE 22
                           A   235    .CLASS 8
                           A   236    .DIM 256
                           A   237    .TYPE 98
                           A   238    .ENDEF
                           A   239    .ENDREC "NONAME4"
                           A   240    .BEGREC "NONAME5",12
                           A   241    .DEFINE "fmt"
                           A   242    .VALUE 0
                           A   243    .CLASS 8
                           A   244    .TYPE 12
                           A   245    .ENDEF
                           A   246    .DEFINE "n_fat"
                           A   247    .VALUE 1
                           A   248    .CLASS 8
                           A   249    .TYPE 12
                           A   250    .ENDEF
                           A   251    .DEFINE "align"
                           A   252    .VALUE 2
                           A   253    .CLASS 8
                           A   254    .TYPE 14
                           A   255    .ENDEF
                           A   256    .DEFINE "n_root"
                           A   257    .VALUE 5
                           A   258    .CLASS 8
                           A   259    .TYPE 14
                           A   260    .ENDEF
                           A   261    .DEFINE "au_size"
                           A   262    .VALUE 8
                           A   263    .CLASS 8
                           A   264    .TYPE 15
                           A   265    .ENDEF
                           A   266    .ENDREC "NONAME5"
                           A   267    	SEGMENT BSS
044B28                     A   268    _rtc:
044B28                     A   269    	DS	1
                           A   270    .DEFINE "rtc"
                           A   271    .ALIAS "_rtc"
                           A   272    .CLASS 83
                           A   273    .VALUE _rtc
                           A   274    .TYPE 12
                           A   275    .ENDEF
                           A   276    ;    1	/*
                           A   277    ;    2	 * Title:			AGON Low level disk
                           A   278    ;    3	 * Modified By:		Dean Belfield
                           A   279    ;    4	 * Created:			19/06/2022
                           A   280    ;    5	 * Last Updated:	15/03/2023
                           A   281    ;    6	 *
                           A   282    ;    7	 * Credits:
                           A   283    ;    8	 * Based upon a skeleton framework (C)C
                           A   284    ;    9	 *
                           A   285    ;   10	 * Modinfo:
                           A   286    ;   11	 * 11/07/2023:		Tweaked to compile 
                           A   287    ;   12	 * 15/03/2023:		Added get_fattime
                           A   288    ;   13	 */
                           A   289    ;   14	
                           A   290    ;   15	#include "ff.h"			// Obtains inte
                           A   291    ;   16	#include "diskio.h"		// Declarations
                           A   292    ;   17	
                           A   293    ;   18	#include "sd.h"			// Physical SD 
                           A   294    ;   19	//#include "clock.h"		// Clock fo
                           A   295    ;   20	
                           A   296    ;   21	BYTE rtc;		// will not work here
                           A   297    	SEGMENT CODE
                           A   298    ;   22	
                           A   299    ;   23	// Get Drive Status (Not implemented in
                           A   300    ;   24	// Parameters:
                           A   301    ;   25	// - pdrv: Physical drive number to ide
                           A   302    ;   26	// Returns:
                           A   303    ;   27	// - DSTATUS
                           A   304    ;   28	// 
                           A   305    ;   29	DSTATUS disk_status(BYTE pdrv) {
043E68                     A   306    _disk_status:
                           A   307    .DEFINE "_disk_status"
                           A   308    
                           A   309    .VALUE _disk_status
                           A   310    
                           A   311    .CLASS 2
                           A   312    
                           A   313    .TYPE 76
                           A   314    
                           A   315    .ENDEF
                           A   316    
                           A   317    .BEGFUNC "disk_status",29,"_disk_status"
                           A   318    
                           A   319    .LINE 29
                           A   320    
                           A   321    .DEFINE "pdrv"
                           A   322    
                           A   323    .CLASS 65
                           A   324    
                           A   325    .VALUE 6
                           A   326    
                           A   327    .TYPE 12
                           A   328    
                           A   329    .ENDEF
                           A   330    
043E68 DDE5                A   331    	PUSH	IX
043E6A DD210000 00         A   332    	LD	IX,0
043E6F DD39                A   333    	ADD	IX,SP
                           A   334    ;   30		return 0;
                           A   335    .LINE 30
                           A   336    
043E71 AF                  A   337    	XOR	A,A
                           A   338    ;   31	}
                           A   339    .LINE 31
                           A   340    
043E72 DDF9                A   341    	LD	SP,IX
043E74 DDE1                A   342    	POP	IX
043E76 C9                  A   343    	RET	
                           A   344    
                           A   345    
                           A   346    ;**************************** _disk_status ****
                           A   347    ;Name                         Addr/Register   S
                           A   348    ;pdrv                                  IX+6    
                           A   349    
                           A   350    
                           A   351    ; Stack Frame Size: 9 (bytes)
                           A   352    ;       Spill Code: 0 (instruction)
                           A   353    
                           A   354    
                           A   355    .ENDFUNC "disk_status",31,"_disk_status"
                           A   356    ;   32	
                           A   357    ;   33	// Initialise a drive
                           A   358    ;   34	// Parameters:
                           A   359    ;   35	// - pdrv: Physical drive number to ide
                           A   360    ;   36	// Returns:
                           A   361    ;   37	// - DSTATUS
                           A   362    ;   38	//
                           A   363    ;   39	DSTATUS disk_initialize(BYTE pdrv) {
043E77                     A   364    _disk_initialize:
                           A   365    .DEFINE "_disk_initialize"
                           A   366    
                           A   367    .VALUE _disk_initialize
                           A   368    
                           A   369    .CLASS 2
                           A   370    
                           A   371    .TYPE 76
                           A   372    
                           A   373    .ENDEF
                           A   374    
                           A   375    .BEGFUNC "disk_initialize",39,"_disk_initialize
                           A   376    
                           A   377    .LINE 39
                           A   378    
                           A   379    .DEFINE "pdrv"
                           A   380    
                           A   381    .CLASS 65
                           A   382    
                           A   383    .VALUE 6
                           A   384    
                           A   385    .TYPE 12
                           A   386    
                           A   387    .ENDEF
                           A   388    
                           A   389    .DEFINE "err"
                           A   390    
                           A   391    .CLASS 65
                           A   392    
                           A   393    .VALUE -1
                           A   394    
                           A   395    .TYPE 12
                           A   396    
                           A   397    .ENDEF
                           A   398    
043E77 DDE5                A   399    	PUSH	IX
043E79 DD210000 00         A   400    	LD	IX,0
043E7E DD39                A   401    	ADD	IX,SP
043E80 3B                  A   402    	DEC	SP
                           A   403    ;   40		BYTE err = SD_init();
                           A   404    .LINE 40
                           A   405    
043E81 CD 11 0B 04         A   406    	CALL	_SD_init
043E85 DD77FF              A   407    	LD	(IX+%FFFFFFFF),A
                           A   408    ;   41		if(err == SD_SUCCESS) {
                           A   409    .LINE 41
                           A   410    
043E88 B7                  A   411    	OR	A,A
043E89 20 03               A   412    	JR	NZ,L_2
                           A   413    ;   42			return RES_OK;
                           A   414    .LINE 42
                           A   415    
043E8B AF                  A   416    	XOR	A,A
043E8C 18 02               A   417    	JR	L_3
                           A   418    ;   43		}
043E8E                     A   419    L_2:
                           A   420    .LINE 43
                           A   421    
                           A   422    ;   44		return RES_ERROR;
                           A   423    .LINE 44
                           A   424    
043E8E 3E01                A   425    	LD	A,%1
                           A   426    ;   45	}
043E90                     A   427    L_3:
                           A   428    .LINE 45
                           A   429    
043E90 DDF9                A   430    	LD	SP,IX
043E92 DDE1                A   431    	POP	IX
043E94 C9                  A   432    	RET	
                           A   433    
                           A   434    
                           A   435    ;**************************** _disk_initialize 
                           A   436    ;Name                         Addr/Register   S
                           A   437    ;_SD_init                            IMPORT  --
                           A   438    ;err                                   IX-1    
                           A   439    ;pdrv                                  IX+6    
                           A   440    
                           A   441    
                           A   442    ; Stack Frame Size: 10 (bytes)
                           A   443    ;       Spill Code: 0 (instruction)
                           A   444    
                           A   445    
                           A   446    .ENDFUNC "disk_initialize",45,"_disk_initialize
                           A   447    ;   46	
                           A   448    ;   47	// Read Sector(s)
                           A   449    ;   48	// Parameters:
                           A   450    ;   49	// - pdrv: Physical drive nmuber to ide
                           A   451    ;   50	// - buff: Data buffer to store read da
                           A   452    ;   51	// - sector: Start sector in LBA
                           A   453    ;   52	// - count: Number of sectors to read
                           A   454    ;   53	// Returns:
                           A   455    ;   54	// - DSTATUS
                           A   456    ;   55	//
                           A   457    ;   56	DRESULT disk_read(BYTE pdrv, BYTE *buff
043E95                     A   458    _disk_read:
                           A   459    .DEFINE "_disk_read"
                           A   460    
                           A   461    .VALUE _disk_read
                           A   462    
                           A   463    .CLASS 2
                           A   464    
                           A   465    .TYPE 68
                           A   466    
                           A   467    .ENDEF
                           A   468    
                           A   469    .BEGFUNC "disk_read",56,"_disk_read"
                           A   470    
                           A   471    .LINE 56
                           A   472    
                           A   473    .DEFINE "pdrv"
                           A   474    
                           A   475    .CLASS 65
                           A   476    
                           A   477    .VALUE 6
                           A   478    
                           A   479    .TYPE 12
                           A   480    
                           A   481    .ENDEF
                           A   482    
                           A   483    .DEFINE "buff"
                           A   484    
                           A   485    .CLASS 65
                           A   486    
                           A   487    .VALUE 9
                           A   488    
                           A   489    .TYPE 44
                           A   490    
                           A   491    .ENDEF
                           A   492    
                           A   493    .DEFINE "sector"
                           A   494    
                           A   495    .CLASS 65
                           A   496    
                           A   497    .VALUE 12
                           A   498    
                           A   499    .TYPE 15
                           A   500    
                           A   501    .ENDEF
                           A   502    
                           A   503    .DEFINE "count"
                           A   504    
                           A   505    .CLASS 65
                           A   506    
                           A   507    .VALUE 18
                           A   508    
                           A   509    .TYPE 14
                           A   510    
                           A   511    .ENDEF
                           A   512    
                           A   513    .DEFINE "err"
                           A   514    
                           A   515    .CLASS 65
                           A   516    
                           A   517    .VALUE -1
                           A   518    
                           A   519    .TYPE 12
                           A   520    
                           A   521    .ENDEF
                           A   522    
043E95 DDE5                A   523    	PUSH	IX
043E97 DD210000 00         A   524    	LD	IX,0
043E9C DD39                A   525    	ADD	IX,SP
043E9E 3B                  A   526    	DEC	SP
                           A   527    ;   57		BYTE err = SD_readBlocks(sector, bu
                           A   528    .LINE 57
                           A   529    
043E9F DD0712              A   530    	LD	BC,(IX+%12)
043EA2 C5                  A   531    	PUSH	BC
043EA3 DD0709              A   532    	LD	BC,(IX+%9)
043EA6 C5                  A   533    	PUSH	BC
043EA7 DD4E0F              A   534    	LD	C,(IX+%F)
043EAA 0600                A   535    	LD	B,%0
043EAC C5                  A   536    	PUSH	BC
043EAD DD070C              A   537    	LD	BC,(IX+%C)
043EB0 C5                  A   538    	PUSH	BC
043EB1 CD D3 07 04         A   539    	CALL	_SD_readBlocks
043EB5 C1                  A   540    	POP	BC
043EB6 C1                  A   541    	POP	BC
043EB7 C1                  A   542    	POP	BC
043EB8 C1                  A   543    	POP	BC
043EB9 DD77FF              A   544    	LD	(IX+%FFFFFFFF),A
                           A   545    ;   58		if(err == SD_SUCCESS) {
                           A   546    .LINE 58
                           A   547    
043EBC B7                  A   548    	OR	A,A
043EBD 20 05               A   549    	JR	NZ,L_5
                           A   550    ;   59			return RES_OK;
                           A   551    .LINE 59
                           A   552    
043EBF B7                  A   553    	OR	A,A
043EC0 ED62                A   554    	SBC	HL,HL
043EC2 18 04               A   555    	JR	L_6
                           A   556    ;   60		}
043EC4                     A   557    L_5:
                           A   558    .LINE 60
                           A   559    
                           A   560    ;   61		return RES_ERROR;
                           A   561    .LINE 61
                           A   562    
043EC4 21010000            A   563    	LD	HL,1
                           A   564    ;   62	}
043EC8                     A   565    L_6:
                           A   566    .LINE 62
                           A   567    
043EC8 DDF9                A   568    	LD	SP,IX
043ECA DDE1                A   569    	POP	IX
043ECC C9                  A   570    	RET	
                           A   571    
                           A   572    
                           A   573    ;**************************** _disk_read ******
                           A   574    ;Name                         Addr/Register   S
                           A   575    ;_SD_readBlocks                      IMPORT  --
                           A   576    ;err                                   IX-1    
                           A   577    ;count                                IX+18    
                           A   578    ;sector                               IX+12    
                           A   579    ;buff                                  IX+9    
                           A   580    ;pdrv                                  IX+6    
                           A   581    
                           A   582    
                           A   583    ; Stack Frame Size: 22 (bytes)
                           A   584    ;       Spill Code: 0 (instruction)
                           A   585    
                           A   586    
                           A   587    .ENDFUNC "disk_read",62,"_disk_read"
                           A   588    ;   63	
                           A   589    ;   64	#if FF_FS_READONLY == 0
                           A   590    ;   65	
                           A   591    ;   66	// Write Sector(s)
                           A   592    ;   67	// Parameters:
                           A   593    ;   68	// - pdrv: Physical drive nmuber to ide
                           A   594    ;   69	// - buff: Data to be written
                           A   595    ;   70	// - sector: Start sector in LBA
                           A   596    ;   71	// - count: Number of sectors to write
                           A   597    ;   72	// Returns:
                           A   598    ;   73	// - DSTATUS
                           A   599    ;   74	//
                           A   600    ;   75	DRESULT disk_write(BYTE pdrv, const BYT
                           A   601    ;   76		BYTE err = SD_writeBlocks(sector, b
                           A   602    ;   77		if(err == SD_SUCCESS) {
                           A   603    ;   78			return RES_OK;
                           A   604    ;   79		}
                           A   605    ;   80		
                           A   606    ;   81		return RES_ERROR;
                           A   607    ;   82	}
                           A   608    ;   83	
                           A   609    ;   84	#endif
                           A   610    ;   85	
                           A   611    ;   86	// Disk I/O Control (Not implemented in
                           A   612    ;   87	// Parameters:
                           A   613    ;   88	// - pdrv: Physical drive nmuber (0..)
                           A   614    ;   89	// - cmd: Control code
                           A   615    ;   90	// - buff: Buffer to send/receive contr
                           A   616    ;   91	// Returns:
                           A   617    ;   92	// - DSTATUS
                           A   618    ;   93	//
                           A   619    ;   94	DRESULT disk_ioctl(BYTE pdrv, BYTE cmd,
043ECD                     A   620    _disk_ioctl:
                           A   621    .DEFINE "_disk_ioctl"
                           A   622    
                           A   623    .VALUE _disk_ioctl
                           A   624    
                           A   625    .CLASS 2
                           A   626    
                           A   627    .TYPE 68
                           A   628    
                           A   629    .ENDEF
                           A   630    
                           A   631    .BEGFUNC "disk_ioctl",94,"_disk_ioctl"
                           A   632    
                           A   633    .LINE 94
                           A   634    
                           A   635    .DEFINE "pdrv"
                           A   636    
                           A   637    .CLASS 65
                           A   638    
                           A   639    .VALUE 6
                           A   640    
                           A   641    .TYPE 12
                           A   642    
                           A   643    .ENDEF
                           A   644    
                           A   645    .DEFINE "cmd"
                           A   646    
                           A   647    .CLASS 65
                           A   648    
                           A   649    .VALUE 9
                           A   650    
                           A   651    .TYPE 12
                           A   652    
                           A   653    .ENDEF
                           A   654    
                           A   655    .DEFINE "buff"
                           A   656    
                           A   657    .CLASS 65
                           A   658    
                           A   659    .VALUE 12
                           A   660    
                           A   661    .TYPE 33
                           A   662    
                           A   663    .ENDEF
                           A   664    
043ECD DDE5                A   665    	PUSH	IX
043ECF DD210000 00         A   666    	LD	IX,0
043ED4 DD39                A   667    	ADD	IX,SP
                           A   668    ;   95		return RES_OK;
                           A   669    .LINE 95
                           A   670    
043ED6 B7                  A   671    	OR	A,A
043ED7 ED62                A   672    	SBC	HL,HL
                           A   673    ;   96	}
                           A   674    .LINE 96
                           A   675    
043ED9 DDF9                A   676    	LD	SP,IX
043EDB DDE1                A   677    	POP	IX
043EDD C9                  A   678    	RET	
                           A   679    
                           A   680    
                           A   681    ;**************************** _disk_ioctl *****
                           A   682    ;Name                         Addr/Register   S
                           A   683    ;buff                                 IX+12    
                           A   684    ;cmd                                   IX+9    
                           A   685    ;pdrv                                  IX+6    
                           A   686    
                           A   687    
                           A   688    ; Stack Frame Size: 15 (bytes)
                           A   689    ;       Spill Code: 0 (instruction)
                           A   690    
                           A   691    
                           A   692    .ENDFUNC "disk_ioctl",96,"_disk_ioctl"
                           A   693    ;   97	
                           A   694    ;   98	// Get RTC time for filestamps
                           A   695    ;   99	// Returns:
                           A   696    ;  100	// - TIME (bit packed)
                           A   697    ;  101	//
                           A   698    ;  102	//    0 to  4: Seconds/2 (0 to 29)
                           A   699    ;  103	//    5 to 10: Minutes (0 to 59)
                           A   700    ;  104	//   11 to 15: Hours (0 to 23)
                           A   701    ;  105	//   16 to 20: Day of Month (1 to 31)
                           A   702    ;  106	//   21 to 24: Month (1 to 12)
                           A   703    ;  107	//   25 to 31: Year-1980 (0 to 127)
                           A   704    ;  108	//
                           A   705    ;  109	DWORD get_fattime(void) {
043EDE                     A   706    _get_fattime:
                           A   707    .DEFINE "_get_fattime"
                           A   708    
                           A   709    .VALUE _get_fattime
                           A   710    
                           A   711    .CLASS 2
                           A   712    
                           A   713    .TYPE 79
                           A   714    
                           A   715    .ENDEF
                           A   716    
                           A   717    .BEGFUNC "get_fattime",109,"_get_fattime"
                           A   718    
                           A   719    .LINE 109
                           A   720    
                           A   721    .DEFINE "yr"
                           A   722    
                           A   723    .CLASS 65
                           A   724    
                           A   725    .VALUE -4
                           A   726    
                           A   727    .TYPE 15
                           A   728    
                           A   729    .ENDEF
                           A   730    
                           A   731    .DEFINE "mo"
                           A   732    
                           A   733    .CLASS 65
                           A   734    
                           A   735    .VALUE -8
                           A   736    
                           A   737    .TYPE 15
                           A   738    
                           A   739    .ENDEF
                           A   740    
                           A   741    .DEFINE "da"
                           A   742    
                           A   743    .CLASS 65
                           A   744    
                           A   745    .VALUE -12
                           A   746    
                           A   747    .TYPE 15
                           A   748    
                           A   749    .ENDEF
                           A   750    
                           A   751    .DEFINE "hr"
                           A   752    
                           A   753    .CLASS 65
                           A   754    
                           A   755    .VALUE -16
                           A   756    
                           A   757    .TYPE 15
                           A   758    
                           A   759    .ENDEF
                           A   760    
                           A   761    .DEFINE "mi"
                           A   762    
                           A   763    .CLASS 65
                           A   764    
                           A   765    .VALUE -20
                           A   766    
                           A   767    .TYPE 15
                           A   768    
                           A   769    .ENDEF
                           A   770    
                           A   771    .DEFINE "se"
                           A   772    
                           A   773    .CLASS 65
                           A   774    
                           A   775    .VALUE -24
                           A   776    
                           A   777    .TYPE 15
                           A   778    
                           A   779    .ENDEF
                           A   780    
043EDE DDE5                A   781    	PUSH	IX
043EE0 DD210000 00         A   782    	LD	IX,0
043EE5 DD39                A   783    	ADD	IX,SP
043EE7 ED22E8              A   784    	LEA	HL,IX+%FFFFFFE8
043EEA F9                  A   785    	LD	SP,HL
                           A   786    ;  110		DWORD	yr, mo, da, hr, mi, se;
                           A   787    ;  111		BYTE *	p = &rtc;
                           A   788    ;  112	
                           A   789    ;  113		//rtc_update();
                           A   790    ;  114	
                           A   791    ;  115		yr =  *(p+0)    << 25;
                           A   792    .LINE 115
                           A   793    
043EEB B7ED62              A   794    	UEXT	HL
043EEE 3A 28 4B 04         A   795    	LD	A,(_rtc)
043EF2 6F                  A   796    	LD	L,A
043EF3 7C                  A   797    	LD	A,H
043EF4 E5C1                A   798    	LD	BC,HL
043EF6 2E19                A   799    	LD	L,%19
043EF8 CD 7C 47 04         A   800    	CALL	__lshl
043EFC DD0FFC              A   801    	LD	(IX+%FFFFFFFC),BC
043EFF DD77FF              A   802    	LD	(IX+%FFFFFFFF),A
                           A   803    ;  116		mo = (*(p+1)+1) << 21;
                           A   804    .LINE 116
                           A   805    
043F02 FD21 28 4B 04       A   806    	LD	IY,_rtc
043F07 B7ED62              A   807    	UEXT	HL
043F0A FD6E01              A   808    	LD	L,(IY+%1)
043F0D 5C                  A   809    	LD	E,H
043F0E 3E01                A   810    	LD	A,%1
043F10 CD 2D 44 04         A   811    	CALL	__ladd_b
043F14 7B                  A   812    	LD	A,E
043F15 E5C1                A   813    	LD	BC,HL
043F17 2E15                A   814    	LD	L,%15
043F19 CD 7C 47 04         A   815    	CALL	__lshl
043F1D DD0FF8              A   816    	LD	(IX+%FFFFFFF8),BC
043F20 DD77FB              A   817    	LD	(IX+%FFFFFFFB),A
                           A   818    ;  117		da =  *(p+2)    << 16;
                           A   819    .LINE 117
                           A   820    
043F23 B7ED62              A   821    	UEXT	HL
043F26 FD6E02              A   822    	LD	L,(IY+%2)
043F29 7C                  A   823    	LD	A,H
043F2A E5C1                A   824    	LD	BC,HL
043F2C 2E10                A   825    	LD	L,%10
043F2E CD 7C 47 04         A   826    	CALL	__lshl
043F32 DD0FF4              A   827    	LD	(IX+%FFFFFFF4),BC
043F35 DD77F7              A   828    	LD	(IX+%FFFFFFF7),A
                           A   829    ;  118		hr =  *(p+5)    << 11;
                           A   830    .LINE 118
                           A   831    
043F38 B7ED62              A   832    	UEXT	HL
043F3B FD6E05              A   833    	LD	L,(IY+%5)
043F3E 7C                  A   834    	LD	A,H
043F3F E5C1                A   835    	LD	BC,HL
043F41 2E0B                A   836    	LD	L,%B
043F43 CD 7C 47 04         A   837    	CALL	__lshl
043F47 DD0FF0              A   838    	LD	(IX+%FFFFFFF0),BC
043F4A DD77F3              A   839    	LD	(IX+%FFFFFFF3),A
                           A   840    ;  119		mi =  *(p+6)    <<  5;
                           A   841    .LINE 119
                           A   842    
043F4D B7ED62              A   843    	UEXT	HL
043F50 FD6E06              A   844    	LD	L,(IY+%6)
043F53 7C                  A   845    	LD	A,H
043F54 E5C1                A   846    	LD	BC,HL
043F56 2E05                A   847    	LD	L,%5
043F58 CD 7C 47 04         A   848    	CALL	__lshl
043F5C DD0FEC              A   849    	LD	(IX+%FFFFFFEC),BC
043F5F DD77EF              A   850    	LD	(IX+%FFFFFFEF),A
                           A   851    ;  120		se =  *(p+7)    >>  1;
                           A   852    .LINE 120
                           A   853    
043F62 ED2307              A   854    	LEA	HL,IY+%7
043F65 7E                  A   855    	LD	A,(HL)
043F66 B7ED62              A   856    	UEXT	HL
043F69 6F                  A   857    	LD	L,A
043F6A 3E01                A   858    	LD	A,%1
043F6C CD 7A 44 04         A   859    	CALL	__ishrs_b
043F70 E5C1                A   860    	LD	BC,HL
043F72 CD 18 47 04         A   861    	CALL	__itol
043F76 DD0FE8              A   862    	LD	(IX+%FFFFFFE8),BC
043F79 DD77EB              A   863    	LD	(IX+%FFFFFFEB),A
                           A   864    ;  121	
                           A   865    ;  122		return se | mi | hr | da | mo | yr;
                           A   866    .LINE 122
                           A   867    
043F7C DD27EC              A   868    	LD	HL,(IX+%FFFFFFEC)
043F7F DD5EEF              A   869    	LD	E,(IX+%FFFFFFEF)
043F82 DD7EEB              A   870    	LD	A,(IX+%FFFFFFEB)
043F85 CD 6A 46 04         A   871    	CALL	__lor
043F89 DD07F0              A   872    	LD	BC,(IX+%FFFFFFF0)
043F8C DD7EF3              A   873    	LD	A,(IX+%FFFFFFF3)
043F8F CD 6A 46 04         A   874    	CALL	__lor
043F93 DD07F4              A   875    	LD	BC,(IX+%FFFFFFF4)
043F96 DD7EF7              A   876    	LD	A,(IX+%FFFFFFF7)
043F99 CD 6A 46 04         A   877    	CALL	__lor
043F9D DD07F8              A   878    	LD	BC,(IX+%FFFFFFF8)
043FA0 DD7EFB              A   879    	LD	A,(IX+%FFFFFFFB)
043FA3 CD 6A 46 04         A   880    	CALL	__lor
043FA7 DD07FC              A   881    	LD	BC,(IX+%FFFFFFFC)
043FAA DD7EFF              A   882    	LD	A,(IX+%FFFFFFFF)
043FAD CD 6A 46 04         A   883    	CALL	__lor
                           A   884    ;  123	}
                           A   885    .LINE 123
                           A   886    
043FB1 DDF9                A   887    	LD	SP,IX
043FB3 DDE1                A   888    	POP	IX
043FB5 C9                  A   889    	RET	
                           A   890    
                           A   891    
                           A   892    ;**************************** _get_fattime ****
                           A   893    ;Name                         Addr/Register   S
                           A   894    ;_rtc                                STATIC    
                           A   895    ;se                                   IX-24    
                           A   896    ;mi                                   IX-20    
                           A   897    ;hr                                   IX-16    
                           A   898    ;da                                   IX-12    
                           A   899    ;mo                                    IX-8    
                           A   900    ;yr                                    IX-4    
                           A   901    
                           A   902    
                           A   903    ; Stack Frame Size: 30 (bytes)
                           A   904    ;       Spill Code: 0 (instruction)
                           A   905    
                           A   906    
                           A   907    .ENDFUNC "get_fattime",123,"_get_fattime"
                           A   908    	XREF _SD_init:ROM
                           A   909    	XREF _SD_readBlocks:ROM
                           A   910    	XREF __lor:ROM
                           A   911    	XREF __lshl:ROM
                           A   912    	XREF __itol:ROM
                           A   913    	XREF __ladd_b:ROM
                           A   914    	XREF __ishrs_b:ROM
                           A   915    	XDEF _get_fattime
                           A   916    	XDEF _disk_ioctl
                           A   917    	XDEF _disk_read
                           A   918    	XDEF _disk_initialize
                           A   919    	XDEF _disk_status
                           A   920    	XDEF _rtc
                           A   921    	END


Errors: 0
Warnings: 0
Lines Assembled: 922
