Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED21-Oct-23     18:18:30     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\protocol.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    ;    1	#include "protocol.h"
                           A     9    ;    2	
                           A    10    ;    3	//#define UART_LSR_TEMT	0x40
                           A    11    ;    4	// Blocking non-interrupt putch to UART
                           A    12    ;    5	int putch(int c)
                           A    13    ;    6	{
04415C                     A    14    _putch:
                           A    15    .DEFINE "_putch"
                           A    16    
                           A    17    .VALUE _putch
                           A    18    
                           A    19    .CLASS 2
                           A    20    
                           A    21    .TYPE 68
                           A    22    
                           A    23    .ENDEF
                           A    24    
                           A    25    .BEGFUNC "putch",6,"_putch"
                           A    26    
                           A    27    .LINE 6
                           A    28    
                           A    29    .DEFINE "c"
                           A    30    
                           A    31    .CLASS 65
                           A    32    
                           A    33    .VALUE 6
                           A    34    
                           A    35    .TYPE 4
                           A    36    
04415C DDE5                A    37    	PUSH	IX
04415E DD210000 00         A    38    	LD	IX,0
044163 DD39                A    39    	ADD	IX,SP
                           A    40    .ENDEF
                           A    41    
                           A    42    ;    7		while((UART0_LSR & UART_LSR_TEMT) =
044165                     A    43    L_1:
                           A    44    .LINE 7
                           A    45    
044165 ED38C5              A    46    	IN0	A,(197)
044168 E640                A    47    	AND	A,%40
04416A B7ED62              A    48    	UEXT	HL
04416D 6F                  A    49    	LD	L,A
04416E CD 32 45 04         A    50    	CALL	__icmpzero
044172 28 F1               A    51    	JR	Z,L_1
                           A    52    ;    8		UART0_THR = c;
                           A    53    .LINE 8
                           A    54    
044174 DD7E06              A    55    	LD	A,(IX+%6)
044177 ED39C0              A    56    	OUT0	(192),A
                           A    57    ;    9		return c;
                           A    58    .LINE 9
                           A    59    
04417A DD2706              A    60    	LD	HL,(IX+%6)
                           A    61    ;   10	}
                           A    62    .LINE 10
                           A    63    
04417D DDF9                A    64    	LD	SP,IX
04417F DDE1                A    65    	POP	IX
044181 C9                  A    66    	RET	
                           A    67    
                           A    68    
                           A    69    ;**************************** _putch **********
                           A    70    ;Name                         Addr/Register   S
                           A    71    ;c                                     IX+6    
                           A    72    
                           A    73    
                           A    74    ; Stack Frame Size: 9 (bytes)
                           A    75    ;       Spill Code: 0 (instruction)
                           A    76    
                           A    77    
                           A    78    .ENDFUNC "putch",10,"_putch"
                           A    79    ;   11	
                           A    80    ;   12	void sendStatus(char state, UINT8 statu
044182                     A    81    _sendStatus:
                           A    82    .DEFINE "_sendStatus"
                           A    83    
                           A    84    .VALUE _sendStatus
                           A    85    
                           A    86    .CLASS 2
                           A    87    
                           A    88    .TYPE 65
                           A    89    
                           A    90    .ENDEF
                           A    91    
                           A    92    .BEGFUNC "sendStatus",12,"_sendStatus"
                           A    93    
                           A    94    .LINE 12
                           A    95    
                           A    96    .DEFINE "state"
                           A    97    
                           A    98    .CLASS 65
                           A    99    
                           A   100    .VALUE 6
                           A   101    
                           A   102    .TYPE 2
                           A   103    
                           A   104    .ENDEF
                           A   105    
                           A   106    .DEFINE "status"
                           A   107    
                           A   108    .CLASS 65
                           A   109    
                           A   110    .VALUE 9
                           A   111    
                           A   112    .TYPE 12
                           A   113    
                           A   114    .ENDEF
                           A   115    
                           A   116    .DEFINE "result"
                           A   117    
                           A   118    .CLASS 65
                           A   119    
                           A   120    .VALUE 12
                           A   121    
                           A   122    .TYPE 15
                           A   123    
                           A   124    .ENDEF
                           A   125    
044182 DDE5                A   126    	PUSH	IX
044184 DD210000 00         A   127    	LD	IX,0
044189 DD39                A   128    	ADD	IX,SP
                           A   129    ;   13		putch(state);
                           A   130    .LINE 13
                           A   131    
04418B DD7E06              A   132    	LD	A,(IX+%6)
04418E 17ED62              A   133    	SEXT	HL
044191 DD6E06              A   134    	LD	L,(IX+%6)
044194 E5                  A   135    	PUSH	HL
044195 CD 5C 41 04         A   136    	CALL	_putch
044199 C1                  A   137    	POP	BC
                           A   138    ;   14		putch(status);
                           A   139    .LINE 14
                           A   140    
04419A DD7E09              A   141    	LD	A,(IX+%9)
04419D B7ED62              A   142    	UEXT	HL
0441A0 6F                  A   143    	LD	L,A
0441A1 E5                  A   144    	PUSH	HL
0441A2 CD 5C 41 04         A   145    	CALL	_putch
0441A6 C1                  A   146    	POP	BC
                           A   147    ;   15		putch((result) & 0xFF);
                           A   148    .LINE 15
                           A   149    
0441A7 DD270C              A   150    	LD	HL,(IX+%C)
0441AA 7D                  A   151    	LD	A,L
0441AB B7ED62              A   152    	UEXT	HL
0441AE 6F                  A   153    	LD	L,A
0441AF E5                  A   154    	PUSH	HL
0441B0 CD 5C 41 04         A   155    	CALL	_putch
0441B4 C1                  A   156    	POP	BC
                           A   157    ;   16		putch((result >> 8) & 0xFF);
                           A   158    .LINE 16
                           A   159    
0441B5 DD070C              A   160    	LD	BC,(IX+%C)
0441B8 DD7E0F              A   161    	LD	A,(IX+%F)
0441BB 2E08                A   162    	LD	L,%8
0441BD CD D4 44 04         A   163    	CALL	__lshru
0441C1 C5E1                A   164    	LD	HL,BC
0441C3 7D                  A   165    	LD	A,L
0441C4 B7ED62              A   166    	UEXT	HL
0441C7 6F                  A   167    	LD	L,A
0441C8 E5                  A   168    	PUSH	HL
0441C9 CD 5C 41 04         A   169    	CALL	_putch
0441CD C1                  A   170    	POP	BC
                           A   171    ;   17		putch((result >> 16) & 0xFF);
                           A   172    .LINE 17
                           A   173    
0441CE DD070C              A   174    	LD	BC,(IX+%C)
0441D1 DD7E0F              A   175    	LD	A,(IX+%F)
0441D4 2E10                A   176    	LD	L,%10
0441D6 CD D4 44 04         A   177    	CALL	__lshru
0441DA C5E1                A   178    	LD	HL,BC
0441DC 7D                  A   179    	LD	A,L
0441DD B7ED62              A   180    	UEXT	HL
0441E0 6F                  A   181    	LD	L,A
0441E1 E5                  A   182    	PUSH	HL
0441E2 CD 5C 41 04         A   183    	CALL	_putch
0441E6 C1                  A   184    	POP	BC
                           A   185    ;   18		putch((result >> 24) & 0xFF);
                           A   186    .LINE 18
                           A   187    
0441E7 DD7E0F              A   188    	LD	A,(IX+%F)
0441EA B7ED62              A   189    	UEXT	HL
0441ED 6F                  A   190    	LD	L,A
0441EE E5                  A   191    	PUSH	HL
0441EF CD 5C 41 04         A   192    	CALL	_putch
0441F3 C1                  A   193    	POP	BC
                           A   194    ;   19	}
                           A   195    .LINE 19
                           A   196    
0441F4 DDF9                A   197    	LD	SP,IX
0441F6 DDE1                A   198    	POP	IX
0441F8 C9                  A   199    	RET	
                           A   200    
                           A   201    
                           A   202    ;**************************** _sendStatus *****
                           A   203    ;Name                         Addr/Register   S
                           A   204    ;_putch                              IMPORT  --
                           A   205    ;result                               IX+12    
                           A   206    ;status                                IX+9    
                           A   207    ;state                                 IX+6    
                           A   208    
                           A   209    
                           A   210    ; Stack Frame Size: 18 (bytes)
                           A   211    ;       Spill Code: 0 (instruction)
                           A   212    
                           A   213    
                           A   214    .ENDFUNC "sendStatus",19,"_sendStatus"
                           A   215    ;   20	
                           A   216    ;   21	UCHAR read_UART0(CHAR *pData, int *nbyt
0441F9                     A   217    _read_UART0:
                           A   218    .DEFINE "_read_UART0"
                           A   219    
                           A   220    .VALUE _read_UART0
                           A   221    
                           A   222    .CLASS 2
                           A   223    
                           A   224    .TYPE 76
                           A   225    
                           A   226    .ENDEF
                           A   227    
                           A   228    .BEGFUNC "read_UART0",21,"_read_UART0"
                           A   229    
                           A   230    .LINE 21
                           A   231    
                           A   232    .DEFINE "pData"
                           A   233    
                           A   234    .CLASS 65
                           A   235    
                           A   236    .VALUE 6
                           A   237    
                           A   238    .TYPE 34
                           A   239    
                           A   240    .ENDEF
                           A   241    
                           A   242    .DEFINE "nbytes"
                           A   243    
                           A   244    .CLASS 65
                           A   245    
                           A   246    .VALUE 9
                           A   247    
                           A   248    .TYPE 36
                           A   249    
                           A   250    .ENDEF
                           A   251    
                           A   252    .DEFINE "status"
                           A   253    
                           A   254    .CLASS 65
                           A   255    
                           A   256    .VALUE -1
                           A   257    
                           A   258    .TYPE 12
                           A   259    
                           A   260    .ENDEF
                           A   261    
                           A   262    .DEFINE "lsr"
                           A   263    
                           A   264    .CLASS 65
                           A   265    
                           A   266    .VALUE -2
                           A   267    
                           A   268    .TYPE 12
                           A   269    
                           A   270    .ENDEF
                           A   271    
                           A   272    .DEFINE "index"
                           A   273    
                           A   274    .CLASS 65
                           A   275    
                           A   276    .VALUE -5
                           A   277    
                           A   278    .TYPE 4
                           A   279    
                           A   280    .ENDEF
                           A   281    
0441F9 DDE5                A   282    	PUSH	IX
0441FB DD210000 00         A   283    	LD	IX,0
044200 DD39                A   284    	ADD	IX,SP
044202 C5                  A   285    	PUSH	BC
044203 3B                  A   286    	DEC	SP
044204 3B                  A   287    	DEC	SP
                           A   288    ;   22		UCHAR lsr ;
                           A   289    ;   23		UCHAR status = UART_ERR_NONE ;
                           A   290    .LINE 23
                           A   291    
044205 DD36FF00            A   292    	LD	(IX+%FFFFFFFF),%0
                           A   293    ;   24		int   index = 0 ;
                           A   294    .LINE 24
                           A   295    
044209 01000000            A   296    	LD	BC,0
04420D DD0FFB              A   297    	LD	(IX+%FFFFFFFB),BC
                           A   298    ;   25	
                           A   299    ;   26		while( UART_ERR_NONE == status ) {
                           A   300    .LINE 26
                           A   301    
044210 18 55               A   302    	JR	L_17
044212                     A   303    L_18:
                           A   304    ;   27			lsr = UART0_LSR ;				
                           A   305    .LINE 27
                           A   306    
044212 ED38C5              A   307    	IN0	A,(197)
044215 DD77FE              A   308    	LD	(IX+%FFFFFFFE),A
                           A   309    ;   28			
                           A   310    ;   29			if( 0 != (lsr & UART_LSR_BREAKI
                           A   311    .LINE 29
                           A   312    
044218 E610                A   313    	AND	A,%10
04421A 28 04               A   314    	JR	Z,L_7
                           A   315    ;   30				status = UART_ERR_BREAKINDI
                           A   316    .LINE 30
                           A   317    
04421C DD36FF05            A   318    	LD	(IX+%FFFFFFFF),%5
                           A   319    ;   31			}
044220                     A   320    L_7:
                           A   321    .LINE 31
                           A   322    
                           A   323    ;   32			if( 0 != (lsr & UART_LSR_FRAMIN
                           A   324    .LINE 32
                           A   325    
044220 DD7EFE              A   326    	LD	A,(IX+%FFFFFFFE)
044223 E608                A   327    	AND	A,%8
044225 28 04               A   328    	JR	Z,L_9
                           A   329    ;   33				status = UART_ERR_FRAMINGER
                           A   330    .LINE 33
                           A   331    
044227 DD36FF02            A   332    	LD	(IX+%FFFFFFFF),%2
                           A   333    ;   34			}
04422B                     A   334    L_9:
                           A   335    .LINE 34
                           A   336    
                           A   337    ;   35			if( 0 != (lsr & UART_LSR_PARITY
                           A   338    .LINE 35
                           A   339    
04422B DD7EFE              A   340    	LD	A,(IX+%FFFFFFFE)
04422E E604                A   341    	AND	A,%4
044230 28 04               A   342    	JR	Z,L_11
                           A   343    ;   36				status = UART_ERR_PARITYERR
                           A   344    .LINE 36
                           A   345    
044232 DD36FF03            A   346    	LD	(IX+%FFFFFFFF),%3
                           A   347    ;   37			}
044236                     A   348    L_11:
                           A   349    .LINE 37
                           A   350    
                           A   351    ;   38			if( 0 != (lsr & UART_LSR_OVERRR
                           A   352    .LINE 38
                           A   353    
044236 DD7EFE              A   354    	LD	A,(IX+%FFFFFFFE)
044239 E602                A   355    	AND	A,%2
04423B 28 04               A   356    	JR	Z,L_14
                           A   357    ;   39				status = UART_ERR_OVERRUNER
                           A   358    .LINE 39
                           A   359    
04423D DD36FF04            A   360    	LD	(IX+%FFFFFFFF),%4
                           A   361    ;   40			}
044241                     A   362    L_14:
                           A   363    .LINE 40
                           A   364    
                           A   365    ;   41			if( 0 != (lsr & UART_LSR_DATA_R
                           A   366    .LINE 41
                           A   367    
044241 DD7EFE              A   368    	LD	A,(IX+%FFFFFFFE)
044244 E601                A   369    	AND	A,%1
044246 28 12               A   370    	JR	Z,L_16
                           A   371    ;   42				pData[ index++ ] = UART0_RB
                           A   372    .LINE 42
                           A   373    
044248 DD07FB              A   374    	LD	BC,(IX+%FFFFFFFB)
04424B DD2706              A   375    	LD	HL,(IX+%6)
04424E 09                  A   376    	ADD	HL,BC
04424F ED38C0              A   377    	IN0	A,(192)
044252 77                  A   378    	LD	(HL),A
044253 DD07FB              A   379    	LD	BC,(IX+%FFFFFFFB)
044256 03                  A   380    	INC	BC
044257 DD0FFB              A   381    	LD	(IX+%FFFFFFFB),BC
                           A   382    ;   43			}
04425A                     A   383    L_16:
                           A   384    .LINE 43
                           A   385    
                           A   386    ;   44			if( index == (*nbytes) ) {		
                           A   387    .LINE 44
                           A   388    
04425A DD2709              A   389    	LD	HL,(IX+%9)
04425D DD07FB              A   390    	LD	BC,(IX+%FFFFFFFB)
044260 ED27                A   391    	LD	HL,(HL)
044262 B7                  A   392    	OR	A,A
044263 ED42                A   393    	SBC	HL,BC
044265 28 06               A   394    	JR	Z,L_19
                           A   395    ;   45				break ;
                           A   396    ;   46			}
                           A   397    ;   47		}
044267                     A   398    L_17:
                           A   399    .LINE 47
                           A   400    
044267 DD7EFF              A   401    	LD	A,(IX+%FFFFFFFF)
04426A B7                  A   402    	OR	A,A
04426B 28 A5               A   403    	JR	Z,L_18
04426D                     A   404    L_19:
                           A   405    ;   48		*nbytes = index ;
                           A   406    .LINE 48
                           A   407    
04426D DD2709              A   408    	LD	HL,(IX+%9)
044270 DD07FB              A   409    	LD	BC,(IX+%FFFFFFFB)
044273 ED0F                A   410    	LD	(HL),BC
                           A   411    ;   49		return status ;
                           A   412    .LINE 49
                           A   413    
044275 DD7EFF              A   414    	LD	A,(IX+%FFFFFFFF)
                           A   415    ;   50		
                           A   416    ;   51	}
                           A   417    .LINE 51
                           A   418    
044278 DDF9                A   419    	LD	SP,IX
04427A DDE1                A   420    	POP	IX
04427C C9                  A   421    	RET	
                           A   422    
                           A   423    
                           A   424    ;**************************** _read_UART0 *****
                           A   425    ;Name                         Addr/Register   S
                           A   426    ;index                                 IX-5    
                           A   427    ;lsr                                   IX-2    
                           A   428    ;status                                IX-1    
                           A   429    ;nbytes                                IX+9    
                           A   430    ;pData                                 IX+6    
                           A   431    
                           A   432    
                           A   433    ; Stack Frame Size: 17 (bytes)
                           A   434    ;       Spill Code: 0 (instruction)
                           A   435    
                           A   436    
                           A   437    .ENDFUNC "read_UART0",51,"_read_UART0"
                           A   438    ;   52	
                           A   439    ;   53	int getch(void) {
04427D                     A   440    _getch:
                           A   441    .DEFINE "_getch"
                           A   442    
                           A   443    .VALUE _getch
                           A   444    
                           A   445    .CLASS 2
                           A   446    
                           A   447    .TYPE 68
                           A   448    
                           A   449    .ENDEF
                           A   450    
                           A   451    .BEGFUNC "getch",53,"_getch"
                           A   452    
                           A   453    .LINE 53
                           A   454    
                           A   455    .DEFINE "nbytes"
                           A   456    
                           A   457    .CLASS 65
                           A   458    
                           A   459    .VALUE -3
                           A   460    
                           A   461    .TYPE 4
                           A   462    
                           A   463    .ENDEF
                           A   464    
                           A   465    .DEFINE "ch"
                           A   466    
                           A   467    .CLASS 65
                           A   468    
                           A   469    .VALUE -4
                           A   470    
                           A   471    .TYPE 2
                           A   472    
                           A   473    .ENDEF
                           A   474    
                           A   475    .DEFINE "status"
                           A   476    
                           A   477    .CLASS 65
                           A   478    
                           A   479    .VALUE -5
                           A   480    
                           A   481    .TYPE 12
                           A   482    
                           A   483    .ENDEF
                           A   484    
04427D DDE5                A   485    	PUSH	IX
04427F DD210000 00         A   486    	LD	IX,0
044284 DD39                A   487    	ADD	IX,SP
044286 C5                  A   488    	PUSH	BC
044287 C5                  A   489    	PUSH	BC
044288 3B                  A   490    	DEC	SP
044289 3B                  A   491    	DEC	SP
                           A   492    ;   54		CHAR ch;
                           A   493    ;   55		int nbytes = 1;
                           A   494    .LINE 55
                           A   495    
04428A 01010000            A   496    	LD	BC,1
04428E DD0FFD              A   497    	LD	(IX+%FFFFFFFD),BC
                           A   498    ;   56		UCHAR status = read_UART0(&ch, &nby
                           A   499    .LINE 56
                           A   500    
044291 ED65FD              A   501    	PEA	IX+%FFFFFFFD
044294 ED65FC              A   502    	PEA	IX+%FFFFFFFC
044297 CD F9 41 04         A   503    	CALL	_read_UART0
04429B C1                  A   504    	POP	BC
04429C C1                  A   505    	POP	BC
04429D DD77FB              A   506    	LD	(IX+%FFFFFFFB),A
                           A   507    ;   57		nbytes = (UINT)ch;
                           A   508    .LINE 57
                           A   509    
0442A0 DD7EFC              A   510    	LD	A,(IX+%FFFFFFFC)
0442A3 17ED62              A   511    	SEXT	HL
0442A6 DD6EFC              A   512    	LD	L,(IX+%FFFFFFFC)
0442A9 DD2FFD              A   513    	LD	(IX+%FFFFFFFD),HL
                           A   514    ;   58		nbytes = (nbytes & 0x0000FF);
                           A   515    .LINE 58
                           A   516    
0442AC DD7EFD              A   517    	LD	A,(IX+%FFFFFFFD)
0442AF B7ED62              A   518    	UEXT	HL
0442B2 6F                  A   519    	LD	L,A
0442B3 DD2FFD              A   520    	LD	(IX+%FFFFFFFD),HL
                           A   521    ;   59		return (UART_ERR_NONE!=status) ? -1
                           A   522    .LINE 59
                           A   523    
0442B6 DD7EFB              A   524    	LD	A,(IX+%FFFFFFFB)
0442B9 B7                  A   525    	OR	A,A
0442BA 28 09               A   526    	JR	Z,L_23
0442BC 01FFFFFF            A   527    	LD	BC,16777215
0442C0 DD0FF8              A   528    	LD	(IX+%FFFFFFF8),BC
0442C3 18 06               A   529    	JR	L_24
0442C5                     A   530    L_23:
0442C5 DD07FD              A   531    	LD	BC,(IX+%FFFFFFFD)
0442C8 DD0FF8              A   532    	LD	(IX+%FFFFFFF8),BC
0442CB                     A   533    L_24:
0442CB DD27F8              A   534    	LD	HL,(IX+%FFFFFFF8)
                           A   535    ;   60	}
                           A   536    .LINE 60
                           A   537    
0442CE DDF9                A   538    	LD	SP,IX
0442D0 DDE1                A   539    	POP	IX
0442D2 C9                  A   540    	RET	
                           A   541    
                           A   542    
                           A   543    ;**************************** _getch **********
                           A   544    ;Name                         Addr/Register   S
                           A   545    ;temp21                                IX-8    
                           A   546    ;status                                IX-5    
                           A   547    ;ch                                    IX-4    
                           A   548    ;nbytes                                IX-3    
                           A   549    
                           A   550    
                           A   551    ; Stack Frame Size: 14 (bytes)
                           A   552    ;       Spill Code: 0 (instruction)
                           A   553    
                           A   554    
                           A   555    .ENDFUNC "getch",60,"_getch"
                           A   556    	XREF __lshru:ROM
                           A   557    	XREF __icmpzero:ROM
                           A   558    	XDEF _getch
                           A   559    	XDEF _read_UART0
                           A   560    	XDEF _sendStatus
                           A   561    	XDEF _putch
                           A   562    	END


Errors: 0
Warnings: 0
Lines Assembled: 563
