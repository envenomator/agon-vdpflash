; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",558
.DEFINE "fs_type"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pdrv"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fats"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "wflag"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fsi_flag"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "id"
.VALUE 5
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "n_rootdir"
.VALUE 7
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "csize"
.VALUE 9
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "lfnbuf"
.VALUE 11
.CLASS 8
.TYPE 45
.ENDEF
.DEFINE "cdir"
.VALUE 14
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "n_fatent"
.VALUE 18
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fsize"
.VALUE 22
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "volbase"
.VALUE 26
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fatbase"
.VALUE 30
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dirbase"
.VALUE 34
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "database"
.VALUE 38
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "winsect"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "win"
.VALUE 46
.CLASS 8
.DIM 512
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 40
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",29
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",46
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "dptr"
.VALUE 15
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 19
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 23
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir"
.VALUE 27
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "fn"
.VALUE 30
.CLASS 8
.DIM 12
.TYPE 108
.ENDEF
.DEFINE "blk_ofs"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",278
.DEFINE "fsize"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fdate"
.VALUE 4
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "ftime"
.VALUE 6
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "fattrib"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "altname"
.VALUE 9
.CLASS 8
.DIM 13
.TYPE 98
.ENDEF
.DEFINE "fname"
.VALUE 22
.CLASS 8
.DIM 256
.TYPE 98
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",12
.DEFINE "fmt"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fat"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "align"
.VALUE 2
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "n_root"
.VALUE 5
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "au_size"
.VALUE 8
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME5"
;    1	#include <ez80.h>
;    2	#include "src_fatfs\ff.h"
;    3	#include "spi.h"
;    4	#include "defines.h"
;    5	#include <stdint.h>
;    6	#include "agontimer.h"
;    7	
;    8	#define PAGESIZE	1024
;    9	#define FLASHPAGES	128
;   10	#define FLASHSTART	0x0
;   11	#define BAUDRATE	500000
;   12	
;   13	#define MOSFILENAME	"MOS.bin"
;   14	#define LOADADDRESS	0x50000
;   15	
;   16	enum {
;   17		FEEDBACK_OPEN,
;   18		FEEDBACK_FILEDONE,
;   19		FEEDBACK_PROCEED,
;   20		FEEDBACK_ERASEDONE,
;   21		FEEDBACK_PAGEWRITTEN,
;   22	};
;   23	
;   24	
;   25	// Blocking non-interrupt putch to UART0
;   26	int putch(int c)
;   27	{
_putch:
.DEFINE "_putch"

.VALUE _putch

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "putch",27,"_putch"

.LINE 27

.DEFINE "c"

.CLASS 65

.VALUE 6

.TYPE 4

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
.ENDEF

;   28		//UINT8 lsr,temt;
;   29		
;   30		while((UART0_LSR & 0x40) == 0);
L_1:
.LINE 30

	IN0	A,(197)
	AND	A,%40
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_1
;   31		UART0_THR = c;
.LINE 31

	LD	A,(IX+%6)
	OUT0	(192),A
;   32		return c;
.LINE 32

	LD	HL,(IX+%6)
;   33	}
.LINE 33

	LD	SP,IX
	POP	IX
	RET	


;**************************** _putch ***************************
;Name                         Addr/Register   Size   Type
;c                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "putch",33,"_putch"
	SEGMENT BSS
_fs:
	DS	558
.DEFINE "fs"
.ALIAS "_fs"
.CLASS 83
.VALUE _fs
.TAG "NONAME0"
.TYPE 8
.ENDEF
;   34	
;   35	extern void init_UART0(void);
;   36	
;   37	extern void enableFlashKeyRegister(void);
;   38	extern void lockFlashKeyRegister(void);
;   39	extern void fastmemcpy(UINT24 destination, UINT24 source, UINT24 size);
;   40	extern void reset(void);
;   41	
;   42	FATFS 	fs;
	SEGMENT CODE
;   43	
;   44	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",44,"_main"

.LINE 44

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "counter"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

.DEFINE "addressto"

.CLASS 65

.VALUE -6

.TYPE 14

.ENDEF

.DEFINE "addressfrom"

.CLASS 65

.VALUE -9

.TYPE 14

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE -10

.TYPE 12

.ENDEF

.DEFINE "pagemax"

.CLASS 65

.VALUE -13

.TYPE 14

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -19

.TYPE 14

.ENDEF

.DEFINE "lastpagebytes"

.CLASS 65

.VALUE -22

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFEA
	LD	SP,HL
;   45		FRESULT	fr;
;   46		FIL	   	fil;
;   47		UINT24  br;	
;   48		void * 	dest;
;   49		UINT24 size;
;   50		
;   51		UINT24	counter,pagemax, lastpagebytes;
;   52		UINT24 addressto,addressfrom;
;   53		UINT8	value;
;   54		UINT24 timer;
;   55		init_spi();
.LINE 55

	CALL	_init_spi
;   56		init_UART0();
.LINE 56

	CALL	_init_UART0
;   57	
;   58	
;   59		while(1) {
L_5:
.LINE 59

;   60			putch('A');
.LINE 60

	LD	BC,65
	PUSH	BC
	CALL	_putch
	POP	BC
;   61			delayms(500);
.LINE 61

	LD	BC,500
	PUSH	BC
	CALL	_delayms
	POP	BC
;   62			putch('X');
.LINE 62

	LD	BC,88
	PUSH	BC
	CALL	_putch
	POP	BC
;   63			delayms(500);
.LINE 63

	LD	BC,500
	PUSH	BC
	CALL	_delayms
	POP	BC
	JR	L_5
;   64		}
;   65	
;   66	
;   67	
;   68	
;   69	
;   70		f_mount(&fs, "", 1);
;   71	
;   72		addressto = FLASHSTART;
;   73		addressfrom = LOADADDRESS;
;   74	
;   75		fr = f_open(&fil, MOSFILENAME, FA_READ);
;   76		if(fr == FR_OK) {
;   77	
;   78			di();
;   79			size = f_size(&fil);
;   80			//waitZDI(FEEDBACK_OPEN, size);
;   81	
;   82			fr = f_read(&fil, (void *)LOADADDRESS, size, &br);
;   83	
;   84			f_close(&fil);
;   85			//waitZDI(FEEDBACK_FILEDONE, br);
;   86			
;   87			// Wait for user to acknowledge proceed (remote ZDI)
;   88			//waitZDI(FEEDBACK_PROCEED, 0);
;   89			
;   90			// Unprotect and erase flash
;   91			enableFlashKeyRegister();	// unlock Flash Key Register, so we can write to the Flash Write/Erase protection registers
;   92			FLASH_PROT = 0;				// disable protection on all 8x16KB blocks in the flash
;   93			enableFlashKeyRegister();	// will need to unlock again after previous write to the flash protection register
;   94			FLASH_FDIV = 0x5F;			// Ceiling(18Mhz * 5,1us) = 95, or 0x5F
;   95	
;   96			// Erase all flash pages
;   97			for(counter = 0; counter < FLASHPAGES; counter++)
L_10:
.LINE 97

;   98			{
;   99				FLASH_PAGE = counter;
.LINE 99

	LD	A,(IX+%FFFFFFFD)
	OUT0	(252),A
;  100				FLASH_PGCTL = 0x02;			// Page erase bit enable, start erase
.LINE 100

	LD	A,%2
	OUT0	(255),A
;  101	
;  102				do
L_8:
.LINE 102

;  103				{
;  104					value = FLASH_PGCTL;
.LINE 104

	IN0	A,(255)
	LD	(IX+%FFFFFFF6),A
;  105				}
;  106				while(value & 0x02);// wait for completion of erase			
.LINE 106

	AND	A,%2
	JR	NZ,L_8
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
	LD	BC,128
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_10
;  107			}
;  108			
;  109			// determine number of pages to write
;  110			pagemax = size/PAGESIZE;
;  111			if(size%PAGESIZE) // last page has less than PAGESIZE bytes
.LINE 111

	LD	BC,1023
	LD	HL,(IX+%FFFFFFED)
	CALL	__iand
	LD	(IX+%FFFFFFF0),HL
	CALL	__icmpzero
;  112			{
;  113				pagemax += 1;
;  114				lastpagebytes = size%PAGESIZE;			
;  115			}
;  116			else lastpagebytes = PAGESIZE; // normal last page
.LINE 116

;  117	
;  118			//waitZDI(FEEDBACK_ERASEDONE, pagemax);
;  119	
;  120			// write out each page to flash
;  121			for(counter = 0; counter < pagemax; counter++)
.LINE 121

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_22
L_20:
;  122			{
;  123				if(counter == (pagemax - 1)) // last page to write - might need to write less than PAGESIZE
.LINE 123

	LD	IY,(IX+%FFFFFFF3)
	LEA	HL,IY+%FFFFFFFF
	LD	BC,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_18
;  124					fastmemcpy(addressto,addressfrom,lastpagebytes);				
.LINE 124

	LD	BC,(IX+%FFFFFFEA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF7)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
;  125				else 
.LINE 125

	JR	L_19
L_18:
;  126					fastmemcpy(addressto,addressfrom,PAGESIZE);
.LINE 126

	LD	BC,1024
	PUSH	BC
	LD	BC,(IX+%FFFFFFF7)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
L_19:
;  127			
;  128				addressto += PAGESIZE;
.LINE 128

	LD	BC,1024
	LD	HL,(IX+%FFFFFFFA)
	ADD	HL,BC
	LD	(IX+%FFFFFFFA),HL
;  129				addressfrom += PAGESIZE;
.LINE 129

	LD	HL,(IX+%FFFFFFF7)
	ADD	HL,BC
	LD	(IX+%FFFFFFF7),HL
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  130				//timer = 0;
;  131				//while(timer++ < 32768);
;  132				////waitZDI(FEEDBACK_PAGEWRITTEN, counter);
;  133			}
L_22:
.LINE 133

	LD	BC,(IX+%FFFFFFF3)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_20
;  134			lockFlashKeyRegister();	// lock the flash before WARM reset
.LINE 134

	CALL	_lockFlashKeyRegister
;  135			//waitZDI(FEEDBACK_PAGEWRITTEN, counter);
;  136		}
;  137		else //waitZDI(FEEDBACK_OPEN, 0);
.LINE 137

	JR	L_29
;  138		while(1);
L_26:
.LINE 138

	JR	L_26
L_29:
;  139		return 0;
.LINE 139

	OR	A,A
	SBC	HL,HL
;  140	}
.LINE 140

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_lockFlashKeyRegister               IMPORT  -----   function
;_fastmemcpy                         IMPORT  -----   function
;_delayms                            IMPORT  -----   function
;_init_UART0                         IMPORT  -----   function
;_init_spi                           IMPORT  -----   function
;lastpagebytes                        IX-22      3   variable
;size                                 IX-19      3   variable
;G_0                                  IX-16      3   variable
;pagemax                              IX-13      3   variable
;value                                IX-10      1   variable
;addressfrom                           IX-9      3   variable
;addressto                             IX-6      3   variable
;counter                               IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 34 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",140,"_main"
	XREF _fastmemcpy:ROM
	XREF _lockFlashKeyRegister:ROM
	XREF _init_UART0:ROM
	XREF _delayms:ROM
	XREF _init_spi:ROM
	XREF __iand:ROM
	XREF __icmpzero:ROM
	XDEF _main
	XDEF _fs
	XDEF _putch
	END
