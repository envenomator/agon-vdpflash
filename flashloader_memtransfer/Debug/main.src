; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",558
.DEFINE "fs_type"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pdrv"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fats"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "wflag"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fsi_flag"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "id"
.VALUE 5
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "n_rootdir"
.VALUE 7
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "csize"
.VALUE 9
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "lfnbuf"
.VALUE 11
.CLASS 8
.TYPE 45
.ENDEF
.DEFINE "cdir"
.VALUE 14
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "n_fatent"
.VALUE 18
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fsize"
.VALUE 22
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "volbase"
.VALUE 26
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fatbase"
.VALUE 30
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dirbase"
.VALUE 34
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "database"
.VALUE 38
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "winsect"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "win"
.VALUE 46
.CLASS 8
.DIM 512
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 40
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",29
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",46
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "dptr"
.VALUE 15
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 19
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 23
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir"
.VALUE 27
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "fn"
.VALUE 30
.CLASS 8
.DIM 12
.TYPE 108
.ENDEF
.DEFINE "blk_ofs"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",278
.DEFINE "fsize"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fdate"
.VALUE 4
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "ftime"
.VALUE 6
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "fattrib"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "altname"
.VALUE 9
.CLASS 8
.DIM 13
.TYPE 98
.ENDEF
.DEFINE "fname"
.VALUE 22
.CLASS 8
.DIM 256
.TYPE 98
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",12
.DEFINE "fmt"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fat"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "align"
.VALUE 2
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "n_root"
.VALUE 5
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "au_size"
.VALUE 8
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME5"
	SEGMENT BSS
_fs:
	DS	558
.DEFINE "fs"
.ALIAS "_fs"
.CLASS 83
.VALUE _fs
.TAG "NONAME0"
.TYPE 8
.ENDEF
;    1	#include <ez80.h>
;    2	#include "src_fatfs\ff.h"
;    3	#include "spi.h"
;    4	#include "defines.h"
;    5	
;    6	#define PAGESIZE	1024
;    7	#define FLASHPAGES	128
;    8	#define FLASHSTART	0x0
;    9	
;   10	#define MOSFILENAME	"MOS.bin"
;   11	#define LOADADDRESS	0x50000
;   12	#define RETURNCODE	0x60000
;   13	#define	RETURNVALUE	0x60001
;   14	
;   15	enum {
;   16		FEEDBACK_OPEN,
;   17		FEEDBACK_FILEDONE,
;   18		FEEDBACK_PROCEED,
;   19		FEEDBACK_ERASEDONE,
;   20		FEEDBACK_PAGEWRITTEN,
;   21	};
;   22	
;   23	extern void waitZDI(UINT8 status, UINT24 value);
;   24	extern void enableFlashKeyRegister(void);
;   25	extern void lockFlashKeyRegister(void);
;   26	extern void fastmemcpy(UINT24 destination, UINT24 source, UINT24 size);
;   27	extern void reset(void);
;   28	
;   29	FATFS 	fs;
	SEGMENT CODE
;   30	
;   31	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",31,"_main"

.LINE 31

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "counter"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

.DEFINE "pagemax"

.CLASS 65

.VALUE -6

.TYPE 14

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -9

.TYPE 14

.ENDEF

.DEFINE "addressto"

.CLASS 65

.VALUE -12

.TYPE 14

.ENDEF

.DEFINE "addressfrom"

.CLASS 65

.VALUE -15

.TYPE 14

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE -16

.TYPE 12

.ENDEF

.DEFINE "lastpagebytes"

.CLASS 65

.VALUE -19

.TYPE 14

.ENDEF

.DEFINE "fr"

.CLASS 65

.VALUE -22

.TYPE 4

.ENDEF

.DEFINE "br"

.CLASS 65

.VALUE -28

.TYPE 14

.ENDEF

.DEFINE "dest"

.CLASS 65

.VALUE -31

.TYPE 33

.ENDEF

.DEFINE "timer"

.CLASS 65

.VALUE -34

.TYPE 14

.ENDEF

.DEFINE "fil"

.CLASS 65

.VALUE -63

.TAG "NONAME2"

.TYPE 8

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFC1
	LD	SP,HL
;   32		FRESULT	fr;
;   33		FIL	   	fil;
;   34		UINT24  br;	
;   35		void * 	dest;
;   36		UINT24 size;
;   37		
;   38		UINT24	counter,pagemax, lastpagebytes;
;   39		UINT24 addressto,addressfrom;
;   40		UINT8	value;
;   41		UINT24 timer;
;   42		
;   43		waitZDI(1,0);
.LINE 43

	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_waitZDI
	POP	BC
	POP	BC
;   44		
;   45		init_spi();
.LINE 45

	CALL	_init_spi
;   46		f_mount(&fs, "", 1);
.LINE 46

	LD	BC,1
	PUSH	BC
	LD	BC,L__0
	PUSH	BC
	LD	BC,_fs
	PUSH	BC
	CALL	_f_mount
	POP	BC
	POP	BC
	POP	BC
;   47	
;   48		addressto = FLASHSTART;
.LINE 48

	LD	BC,0
	LD	(IX+%FFFFFFF4),BC
;   49		addressfrom = LOADADDRESS;
.LINE 49

	LD	BC,327680
	LD	(IX+%FFFFFFF1),BC
;   50	
;   51		fr = f_open(&fil, MOSFILENAME, FA_READ);
.LINE 51

	LD	BC,1
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	PEA	IX+%FFFFFFC1
	CALL	_f_open
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFEA),HL
;   52		if(fr == FR_OK) {
.LINE 52

	CALL	__icmpzero
	JR	NZ,L_19
;   53	
;   54			di();
.LINE 54

	di
;   55			size = f_size(&fil);
.LINE 55

	LD	BC,(IX+%FFFFFFCC)
	LD	(IX+%FFFFFFF7),BC
;   56			waitZDI(FEEDBACK_OPEN, size);
.LINE 56

	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_waitZDI
	POP	BC
	POP	BC
;   57	
;   58			fr = f_read(&fil, (void *)LOADADDRESS, size, &br);
.LINE 58

	PEA	IX+%FFFFFFE4
	LD	BC,(IX+%FFFFFFF7)
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	PEA	IX+%FFFFFFC1
	CALL	_f_read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFEA),HL
;   59	
;   60			f_close(&fil);
.LINE 60

	PEA	IX+%FFFFFFC1
	CALL	_f_close
	POP	BC
;   61			waitZDI(FEEDBACK_FILEDONE, br);
.LINE 61

	LD	BC,(IX+%FFFFFFE4)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_waitZDI
	POP	BC
	POP	BC
;   62			
;   63			// Wait for user to acknowledge proceed (remote ZDI)
;   64			waitZDI(FEEDBACK_PROCEED, 0);
.LINE 64

	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_waitZDI
	POP	BC
	POP	BC
;   65			
;   66			// Unprotect and erase flash
;   67			enableFlashKeyRegister();	// unlock Flash Key Register, so we can write to the Flash Write/Erase protection registers
.LINE 67

	CALL	_enableFlashKeyRegister
;   68			FLASH_PROT = 0;				// disable protection on all 8x16KB blocks in the flash
.LINE 68

	XOR	A,A
	OUT0	(250),A
;   69			enableFlashKeyRegister();	// will need to unlock again after previous write to the flash protection register
.LINE 69

	CALL	_enableFlashKeyRegister
;   70			FLASH_FDIV = 0x5F;			// Ceiling(18Mhz * 5,1us) = 95, or 0x5F
.LINE 70

	LD	A,%5F
	OUT0	(249),A
;   71	
;   72			// Erase all flash pages
;   73			for(counter = 0; counter < FLASHPAGES; counter++)
.LINE 73

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_5
L_3:
;   74			{
;   75				FLASH_PAGE = counter;
.LINE 75

	LD	A,(IX+%FFFFFFFD)
	OUT0	(252),A
;   76				FLASH_PGCTL = 0x02;			// Page erase bit enable, start erase
.LINE 76

	LD	A,%2
	OUT0	(255),A
;   77	
;   78				do
L_1:
.LINE 78

;   79				{
;   80					value = FLASH_PGCTL;
.LINE 80

	IN0	A,(255)
	LD	(IX+%FFFFFFF0),A
;   81				}
;   82				while(value & 0x02);// wait for completion of erase			
.LINE 82

	AND	A,%2
	JR	NZ,L_1
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;   83			}
L_5:
.LINE 83

	LD	BC,128
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_3
;   84			
;   85			// determine number of pages to write
;   86			pagemax = size/PAGESIZE;
.LINE 86

	LD	HL,(IX+%FFFFFFF7)
	LD	A,%A
	CALL	__ishru_b
	LD	(IX+%FFFFFFFA),HL
;   87			if(size%PAGESIZE) // last page has less than PAGESIZE bytes
.LINE 87

	LD	BC,1023
	LD	HL,(IX+%FFFFFFF7)
	CALL	__iand
	LD	(IX+%FFFFFFE7),HL
	CALL	__icmpzero
	JR	Z,L_8
;   88			{
;   89				pagemax += 1;
.LINE 89

	LD	BC,(IX+%FFFFFFFA)
	INC	BC
	LD	(IX+%FFFFFFFA),BC
;   90				lastpagebytes = size%PAGESIZE;			
.LINE 90

	LD	BC,(IX+%FFFFFFE7)
	LD	(IX+%FFFFFFED),BC
;   91			}
;   92			else lastpagebytes = PAGESIZE; // normal last page
.LINE 92

	JR	L_9
L_8:
	LD	BC,1024
	LD	(IX+%FFFFFFED),BC
L_9:
;   93	
;   94			waitZDI(FEEDBACK_ERASEDONE, pagemax);
.LINE 94

	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_waitZDI
	POP	BC
	POP	BC
;   95	
;   96			// write out each page to flash
;   97			for(counter = 0; counter < pagemax; counter++)
.LINE 97

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_16
L_14:
;   98			{
;   99				if(counter == (pagemax - 1)) // last page to write - might need to write less than PAGESIZE
.LINE 99

	LD	IY,(IX+%FFFFFFFA)
	LEA	HL,IY+%FFFFFFFF
	LD	BC,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_12
;  100					fastmemcpy(addressto,addressfrom,lastpagebytes);				
.LINE 100

	LD	BC,(IX+%FFFFFFED)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF1)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF4)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
;  101				else 
.LINE 101

	JR	L_13
L_12:
;  102					fastmemcpy(addressto,addressfrom,PAGESIZE);
.LINE 102

	LD	BC,1024
	PUSH	BC
	LD	BC,(IX+%FFFFFFF1)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF4)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
L_13:
;  103			
;  104				addressto += PAGESIZE;
.LINE 104

	LD	BC,1024
	LD	HL,(IX+%FFFFFFF4)
	ADD	HL,BC
	LD	(IX+%FFFFFFF4),HL
;  105				addressfrom += PAGESIZE;
.LINE 105

	LD	HL,(IX+%FFFFFFF1)
	ADD	HL,BC
	LD	(IX+%FFFFFFF1),HL
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  106				//timer = 0;
;  107				//while(timer++ < 32768);
;  108				//waitZDI(FEEDBACK_PAGEWRITTEN, counter);
;  109			}
L_16:
.LINE 109

	LD	BC,(IX+%FFFFFFFA)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_14
;  110			lockFlashKeyRegister();	// lock the flash before WARM reset
.LINE 110

	CALL	_lockFlashKeyRegister
;  111			waitZDI(FEEDBACK_PAGEWRITTEN, counter);
.LINE 111

	LD	BC,(IX+%FFFFFFFD)
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_waitZDI
	POP	BC
	POP	BC
;  112		}
;  113		else waitZDI(FEEDBACK_OPEN, 0);
.LINE 113

	JR	L_21
L_19:
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_waitZDI
	POP	BC
	POP	BC
;  114		while(1);
L_21:
.LINE 114

	JR	L_21
;  115		return 0;
;  116	}
.LINE 116

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_lockFlashKeyRegister               IMPORT  -----   function
;_fastmemcpy                         IMPORT  -----   function
;_enableFlashKeyRegister             IMPORT  -----   function
;_f_close                            IMPORT  -----   function
;_f_read                             IMPORT  -----   function
;_f_open                             IMPORT  -----   function
;_fs                                 STATIC    558   variable
;_f_mount                            IMPORT  -----   function
;_init_spi                           IMPORT  -----   function
;_waitZDI                            IMPORT  -----   function
;fil                                  IX-63     29   variable
;timer                                IX-34      3   variable
;dest                                 IX-31      3   variable
;br                                   IX-28      3   variable
;G_0                                  IX-25      3   variable
;fr                                   IX-22      3   variable
;lastpagebytes                        IX-19      3   variable
;value                                IX-16      1   variable
;addressfrom                          IX-15      3   variable
;addressto                            IX-12      3   variable
;size                                  IX-9      3   variable
;pagemax                               IX-6      3   variable
;counter                               IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 75 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",116,"_main"
	SEGMENT STRSECT
L__0:
	DB	0
L__1:
	DB	"MOS.bin"
	DB	0
	XREF _fastmemcpy:ROM
	XREF _lockFlashKeyRegister:ROM
	XREF _enableFlashKeyRegister:ROM
	XREF _waitZDI:ROM
	XREF _init_spi:ROM
	XREF _f_mount:ROM
	XREF _f_read:ROM
	XREF _f_close:ROM
	XREF _f_open:ROM
	XREF __iand:ROM
	XREF __icmpzero:ROM
	XREF __ishru_b:ROM
	XDEF _main
	XDEF _fs
	END
